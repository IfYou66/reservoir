package com.szsk.reservoir.run.service.Impl;

import com.github.pagehelper.PageHelper;
import com.ruoyi.common.core.base.BaseController;
import com.ruoyi.common.core.utils.Constant;
import com.ruoyi.common.core.utils.SecurityUtils;
import com.ruoyi.common.core.utils.StringUtils;
import com.ruoyi.common.core.utils.sql.SqlUtil;
import com.ruoyi.common.core.web.domain.AjaxResult;
import com.ruoyi.common.core.web.page.PageDomain;
import com.ruoyi.common.core.web.page.TableSupport;
import com.ruoyi.system.api.domain.SysFile;
import com.ruoyi.system.api.domain.SysUser;
import com.szsk.reservoir.run.domain.RSecurity;
import com.szsk.reservoir.run.mapper.RSecurityMapper;
import com.szsk.reservoir.run.service.IRSecurityService;
import com.szsk.reservoir.workflow.service.WorkFlowService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.List;

/**
 * 安全检查计划编制 Service业务层处理
 * 
 * @author wangcc
 * @date 2021-08-10
 */
@Service
public class RSecurityServiceImpl extends BaseController implements IRSecurityService
{
    @Resource
    private RSecurityMapper rSecurityMapper;

    @Autowired
    private WorkFlowService workFlowService;

    @Override
    @Transactional
    public AjaxResult planEditStartWorkFlow(RSecurity rSecurity) {
        rSecurity.setfStartPersion(String.valueOf(SecurityUtils.getUserId()));
        // 默认为1：有效
        rSecurity.setfStatus(Constant.GLOBAL_NUM_ONE);
        // 1:待审核 2：待审批 3：审批完成 4：驳回
        rSecurity.setfActStatus(Constant.GLOBAL_NUM_ONE);
        rSecurityMapper.insertRSecurity(rSecurity);
        return workFlowService.startWorkFlow(Long.valueOf(rSecurity.getfId()),rSecurity.getfActPersion(),"planEdit");
    }

    @Override
    @Transactional
    public AjaxResult planEditTaskReview(RSecurity rSecurity) {
        // 1:待审核 2：待审批 3：审批完成 4：驳回
        rSecurity.setfActStatus(Constant.GLOBAL_NUM_TWO);
        rSecurityMapper.updatePlanEdit(rSecurity);
        return workFlowService.taskReview("security",rSecurity.getfActId(),rSecurity.getfActPersion(),rSecurity.getAuditStatus(),String.valueOf(rSecurity.getfId()));
    }

    @Override
    @Transactional
    public AjaxResult planEditTaskApprove(RSecurity rSecurity) {
        // 1:待审核 2：待审批 3：审批完成 4：驳回
        if ("1".equals(rSecurity.getAuditStatus())) {
            rSecurity.setfActStatus(Constant.GLOBAL_NUM_THREE);
        }else if ("3".equals(rSecurity.getAuditStatus())) {
            rSecurity.setfActStatus(Constant.GLOBAL_NUM_FOUR);
        }
        rSecurityMapper.updatePlanEdit(rSecurity);
        return workFlowService.taskReview("security",rSecurity.getfActId(),rSecurity.getfActPersion(),rSecurity.getAuditStatus(),String.valueOf(rSecurity.getfId()));
    }

    @Override
    public AjaxResult queryUserList() {
        Long userId = SecurityUtils.getUserId();
        List<SysUser> sysUsers = rSecurityMapper.queryUserList(String.valueOf(userId));
        return AjaxResult.success(sysUsers);
    }

    @Override
    public AjaxResult queryBusiness(Long id) {
        // 业务信息
        RSecurity rSecurity = rSecurityMapper.queryPlanEdit(id);
        if (rSecurity != null) {
            SysFile fileInfo = rSecurityMapper.getFileInfo(Long.valueOf(rSecurity.getfPlanId()));
            rSecurity.setSysFile(fileInfo);
        }
        return AjaxResult.success(rSecurity);
    }

    @Override
    public List<RSecurity> queryPlanList(RSecurity rSecurity) {
        String userId = String.valueOf(SecurityUtils.getUserId());
        // 判断是否为管理员角色  管理员角色查询全部列表
        int ifAdmin = rSecurityMapper.ifAdmin(userId);
        if (ifAdmin > 0) {
            userId = "";
        }
        rSecurity.setfActPersion(userId);
        PageDomain pageDomain = TableSupport.buildPageRequest();
        Integer pageNum = pageDomain.getPageNum();
        Integer pageSize = pageDomain.getPageSize();
        if (StringUtils.isNotNull(pageNum) && StringUtils.isNotNull(pageSize))
        {
            String orderBy = SqlUtil.escapeOrderBySql(pageDomain.getOrderBy());
            PageHelper.startPage(pageNum, pageSize, orderBy);
        }
        // 查询当前登录人 发起的计划信息 以及 待审核审批的计划信息
        return rSecurityMapper.queryPlanList(rSecurity);
    }

}
