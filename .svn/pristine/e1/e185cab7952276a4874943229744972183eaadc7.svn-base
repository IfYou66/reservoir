package com.szsk.archives.archivesManage.service.Impl;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;

import com.ruoyi.common.core.utils.StringUtils;
import com.ruoyi.system.api.domain.SysDept;
import com.szsk.archives.archivesManage.domain.vo.ArchivesTreeSelect;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.szsk.archives.archivesManage.mapper.ArchivesTypeMapper;
import com.szsk.archives.archivesManage.domain.ArchivesType;
import com.szsk.archives.archivesManage.service.IArchivesTypeService;

/**
 * 档案分类 Service业务层处理
 * 
 * @author cangfeng
 * @date 2021-08-10
 */
@Service
public class ArchivesTypeServiceImpl implements IArchivesTypeService
{
    @Autowired
    private ArchivesTypeMapper archivesTypeMapper;

    /**
     * 查询档案分类 
     * 
     * @param archivesTypeId 档案分类 ID
     * @return 档案分类 
     */
    @Override
    public ArchivesType selectarchivesTypeById(Long archivesTypeId)
    {
        return archivesTypeMapper.selectarchivesTypeById(archivesTypeId);
    }

    /**
     * 查询档案分类 列表
     * 
     * @param archivesType 档案分类 
     * @return 档案分类 
     */
    @Override
    public List<ArchivesType> selectarchivesTypeList(ArchivesType archivesType)
    {
        return archivesTypeMapper.selectarchivesTypeList(archivesType);
    }

    /**
     * 新增档案分类 
     * 
     * @param archivesType 档案分类 
     * @return 结果
     */
    @Override
    public int insertarchivesType(ArchivesType archivesType)
    {
        return archivesTypeMapper.insertarchivesType(archivesType);
    }

    /**
     * 修改档案分类 
     * 
     * @param archivesType 档案分类 
     * @return 结果
     */
    @Override
    public int updatearchivesType(ArchivesType archivesType)
    {
        return archivesTypeMapper.updatearchivesType(archivesType);
    }

    /**
     * 批量删除档案分类 
     * 
     * @param archivesTypeIds 需要删除的档案分类 ID
     * @return 结果
     */
    @Override
    public int deletearchivesTypeByIds(Long[] archivesTypeIds)
    {
        return archivesTypeMapper.deletearchivesTypeByIds(archivesTypeIds);
    }

    /**
     * 删除档案分类 信息
     * 
     * @param archivesTypeId 档案分类 ID
     * @return 结果
     */
    @Override
    public int deletearchivesTypeById(Long archivesTypeId)
    {
        return archivesTypeMapper.deletearchivesTypeById(archivesTypeId);
    }

    /**
     * 构建前端所需要树结构
     *
     * @param archivesTypes 部门列表
     * @return 树结构列表
     */
    @Override
    public List<ArchivesType> buildArchivesTree(List<ArchivesType> archivesTypes)
    {
        List<ArchivesType> returnList = new ArrayList<ArchivesType>();
        List<Long> tempList = new ArrayList<Long>();
        for (ArchivesType archivesType : archivesTypes)
        {
            tempList.add(archivesType.getArchivesTypeId());
        }
        for (Iterator<ArchivesType> iterator = archivesTypes.iterator(); iterator.hasNext();)
        {
            ArchivesType archives = (ArchivesType) iterator.next();
            // 如果是顶级节点, 遍历该父节点的所有子节点
            if (!tempList.contains(archives.getParentId()))
            {
                recursionFn(archivesTypes, archives);
                returnList.add(archives);
            }
        }
        if (returnList.isEmpty())
        {
            returnList = archivesTypes;
        }
        return returnList;
    }

    /**
     * 构建前端所需要下拉树结构
     *
     * @param archivesTypes 部门列表
     * @return 下拉树结构列表
     */
    @Override
    public List<ArchivesTreeSelect> buildArchivesTypeTreeSelect(List<ArchivesType> archivesTypes)
    {
        List<ArchivesType> archivesTrees = buildArchivesTree(archivesTypes);
        return archivesTrees.stream().map(ArchivesTreeSelect::new).collect(Collectors.toList());
    }

    /**
     * 递归列表
     */
    private void recursionFn(List<ArchivesType> list, ArchivesType t)
    {
        // 得到子节点列表
        List<ArchivesType> childList = getChildList(list, t);
        t.setArchivesChildren(childList);
        for (ArchivesType tChild : childList)
        {
            if (hasChild(list, tChild))
            {
                recursionFn(list, tChild);
            }
        }
    }

    /**
     * 得到子节点列表
     */
    private List<ArchivesType> getChildList(List<ArchivesType> list, ArchivesType t)
    {
        List<ArchivesType> tlist = new ArrayList<ArchivesType>();
        Iterator<ArchivesType> it = list.iterator();
        while (it.hasNext())
        {
            ArchivesType n = (ArchivesType) it.next();
            if (StringUtils.isNotNull(n.getParentId()) && n.getParentId().longValue() == t.getArchivesTypeId().longValue())
            {
                tlist.add(n);
            }
        }
        return tlist;
    }

    /**
     * 判断是否有子节点
     */
    private boolean hasChild(List<ArchivesType> list, ArchivesType t)
    {
        return getChildList(list, t).size() > 0 ? true : false;
    }

}
