{"remainingRequest":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\@jiaminghi\\data-view\\lib\\components\\decoration5\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\@jiaminghi\\data-view\\lib\\components\\decoration5\\src\\main.vue","mtime":1711181257402},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711181250741},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":1711181252330},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711181250741},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1711181252689}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKCJEOi9HcmFkdWF0aW9uUHJvamVjdC9maW5hbC9yZXNlcnZpb2lyL3Jlc2VydmlvaXItdWkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0IikuZGVmYXVsdDsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3Rvci5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiKTsKCnZhciBfYXV0b1Jlc2l6ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi4vLi4vLi4vbWl4aW4vYXV0b1Jlc2l6ZSIpKTsKCnZhciBfdXRpbCA9IHJlcXVpcmUoIkBqaWFtaW5naGkvY2hhcnRzL2xpYi91dGlsIik7Cgp2YXIgX2luZGV4ID0gcmVxdWlyZSgiQGppYW1pbmdoaS9jaGFydHMvbGliL3V0aWwvaW5kZXgiKTsKCnZhciBfdXRpbDIgPSByZXF1aXJlKCJAamlhbWluZ2hpL2MtcmVuZGVyL2xpYi9wbHVnaW4vdXRpbCIpOwoKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KdmFyIF9kZWZhdWx0MiA9IHsKICBuYW1lOiAnRHZEZWNvcmF0aW9uNScsCiAgbWl4aW5zOiBbX2F1dG9SZXNpemUuZGVmYXVsdF0sCiAgcHJvcHM6IHsKICAgIGNvbG9yOiB7CiAgICAgIHR5cGU6IEFycmF5LAogICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4gW107CiAgICAgIH0KICAgIH0sCiAgICBkdXI6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiAxLjIKICAgIH0KICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICByZWY6ICdkZWNvcmF0aW9uLTUnLAogICAgICBsaW5lMVBvaW50czogJycsCiAgICAgIGxpbmUyUG9pbnRzOiAnJywKICAgICAgbGluZTFMZW5ndGg6IDAsCiAgICAgIGxpbmUyTGVuZ3RoOiAwLAogICAgICBkZWZhdWx0Q29sb3I6IFsnIzNmOTZhNScsICcjM2Y5NmE1J10sCiAgICAgIG1lcmdlZENvbG9yOiBbXQogICAgfTsKICB9LAogIHdhdGNoOiB7CiAgICBjb2xvcjogZnVuY3Rpb24gY29sb3IoKSB7CiAgICAgIHZhciBtZXJnZUNvbG9yID0gdGhpcy5tZXJnZUNvbG9yOwogICAgICBtZXJnZUNvbG9yKCk7CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBhZnRlckF1dG9SZXNpemVNaXhpbkluaXQ6IGZ1bmN0aW9uIGFmdGVyQXV0b1Jlc2l6ZU1peGluSW5pdCgpIHsKICAgICAgdmFyIGNhbGNTVkdEYXRhID0gdGhpcy5jYWxjU1ZHRGF0YTsKICAgICAgY2FsY1NWR0RhdGEoKTsKICAgIH0sCiAgICBjYWxjU1ZHRGF0YTogZnVuY3Rpb24gY2FsY1NWR0RhdGEoKSB7CiAgICAgIHZhciB3aWR0aCA9IHRoaXMud2lkdGgsCiAgICAgICAgICBoZWlnaHQgPSB0aGlzLmhlaWdodDsKICAgICAgdmFyIGxpbmUxUG9pbnRzID0gW1swLCBoZWlnaHQgKiAwLjJdLCBbd2lkdGggKiAwLjE4LCBoZWlnaHQgKiAwLjJdLCBbd2lkdGggKiAwLjIsIGhlaWdodCAqIDAuNF0sIFt3aWR0aCAqIDAuMjUsIGhlaWdodCAqIDAuNF0sIFt3aWR0aCAqIDAuMjcsIGhlaWdodCAqIDAuNl0sIFt3aWR0aCAqIDAuNzIsIGhlaWdodCAqIDAuNl0sIFt3aWR0aCAqIDAuNzUsIGhlaWdodCAqIDAuNF0sIFt3aWR0aCAqIDAuOCwgaGVpZ2h0ICogMC40XSwgW3dpZHRoICogMC44MiwgaGVpZ2h0ICogMC4yXSwgW3dpZHRoLCBoZWlnaHQgKiAwLjJdXTsKICAgICAgdmFyIGxpbmUyUG9pbnRzID0gW1t3aWR0aCAqIDAuMywgaGVpZ2h0ICogMC44XSwgW3dpZHRoICogMC43LCBoZWlnaHQgKiAwLjhdXTsKICAgICAgdmFyIGxpbmUxTGVuZ3RoID0gKDAsIF91dGlsLmdldFBvbHlsaW5lTGVuZ3RoKShsaW5lMVBvaW50cyk7CiAgICAgIHZhciBsaW5lMkxlbmd0aCA9ICgwLCBfdXRpbC5nZXRQb2x5bGluZUxlbmd0aCkobGluZTJQb2ludHMpOwogICAgICBsaW5lMVBvaW50cyA9IGxpbmUxUG9pbnRzLm1hcChmdW5jdGlvbiAocG9pbnQpIHsKICAgICAgICByZXR1cm4gcG9pbnQuam9pbignLCcpOwogICAgICB9KS5qb2luKCcgJyk7CiAgICAgIGxpbmUyUG9pbnRzID0gbGluZTJQb2ludHMubWFwKGZ1bmN0aW9uIChwb2ludCkgewogICAgICAgIHJldHVybiBwb2ludC5qb2luKCcsJyk7CiAgICAgIH0pLmpvaW4oJyAnKTsKICAgICAgdGhpcy5saW5lMVBvaW50cyA9IGxpbmUxUG9pbnRzOwogICAgICB0aGlzLmxpbmUyUG9pbnRzID0gbGluZTJQb2ludHM7CiAgICAgIHRoaXMubGluZTFMZW5ndGggPSBsaW5lMUxlbmd0aDsKICAgICAgdGhpcy5saW5lMkxlbmd0aCA9IGxpbmUyTGVuZ3RoOwogICAgfSwKICAgIG9uUmVzaXplOiBmdW5jdGlvbiBvblJlc2l6ZSgpIHsKICAgICAgdmFyIGNhbGNTVkdEYXRhID0gdGhpcy5jYWxjU1ZHRGF0YTsKICAgICAgY2FsY1NWR0RhdGEoKTsKICAgIH0sCiAgICBtZXJnZUNvbG9yOiBmdW5jdGlvbiBtZXJnZUNvbG9yKCkgewogICAgICB2YXIgY29sb3IgPSB0aGlzLmNvbG9yLAogICAgICAgICAgZGVmYXVsdENvbG9yID0gdGhpcy5kZWZhdWx0Q29sb3I7CiAgICAgIHRoaXMubWVyZ2VkQ29sb3IgPSAoMCwgX2luZGV4LmRlZXBNZXJnZSkoKDAsIF91dGlsMi5kZWVwQ2xvbmUpKGRlZmF1bHRDb2xvciwgdHJ1ZSksIGNvbG9yIHx8IFtdKTsKICAgIH0KICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB2YXIgbWVyZ2VDb2xvciA9IHRoaXMubWVyZ2VDb2xvcjsKICAgIG1lcmdlQ29sb3IoKTsKICB9Cn07CmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0Mjs="},{"version":3,"sources":["main.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"dv-decoration-5\" :ref=\"ref\">\n    <svg :width=\"width\" :height=\"height\">\n      <polyline\n        fill=\"transparent\"\n        :stroke=\"mergedColor[0]\"\n        stroke-width=\"3\"\n        :points=\"line1Points\"\n      >\n        <animate\n          attributeName=\"stroke-dasharray\"\n          attributeType=\"XML\"\n          :from=\"`0, ${line1Length / 2}, 0, ${line1Length / 2}`\"\n          :to=\"`0, 0, ${line1Length}, 0`\"\n          :dur=\"`${dur}s`\"\n          begin=\"0s\"\n          calcMode=\"spline\"\n          keyTimes=\"0;1\"\n          keySplines=\"0.4,1,0.49,0.98\"\n          repeatCount=\"indefinite\"\n        />\n      </polyline>\n      <polyline\n        fill=\"transparent\"\n        :stroke=\"mergedColor[1]\"\n        stroke-width=\"2\"\n        :points=\"line2Points\"\n      >\n        <animate\n          attributeName=\"stroke-dasharray\"\n          attributeType=\"XML\"\n          :from=\"`0, ${line2Length / 2}, 0, ${line2Length / 2}`\"\n          :to=\"`0, 0, ${line2Length}, 0`\"\n          :dur=\"`${dur}s`\"\n          begin=\"0s\"\n          calcMode=\"spline\"\n          keyTimes=\"0;1\"\n          keySplines=\".4,1,.49,.98\"\n          repeatCount=\"indefinite\"\n        />\n      </polyline>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { getPolylineLength } from '@jiaminghi/charts/lib/util'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvDecoration5',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    },\n    dur: {\n      type: Number,\n      default: 1.2\n    }\n  },\n  data () {\n    return {\n      ref: 'decoration-5',\n\n      line1Points: '',\n      line2Points: '',\n\n      line1Length: 0,\n      line2Length: 0,\n\n      defaultColor: ['#3f96a5', '#3f96a5'],\n\n      mergedColor: []\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    calcSVGData () {\n      const { width, height } = this\n\n      let line1Points = [\n        [0, height * 0.2], [width * 0.18, height * 0.2], [width * 0.2, height * 0.4], [width * 0.25, height * 0.4],\n        [width * 0.27, height * 0.6], [width * 0.72, height * 0.6], [width * 0.75, height * 0.4],\n        [width * 0.8, height * 0.4], [width * 0.82, height * 0.2], [width, height * 0.2]\n      ]\n\n      let line2Points = [\n        [width * 0.3, height * 0.8], [width * 0.7, height * 0.8]\n      ]\n\n      const line1Length = getPolylineLength(line1Points)\n      const line2Length = getPolylineLength(line2Points)\n\n      line1Points = line1Points.map(point => point.join(',')).join(' ')\n      line2Points = line2Points.map(point => point.join(',')).join(' ')\n\n      this.line1Points = line1Points\n      this.line2Points = line2Points\n\n      this.line1Length = line1Length\n      this.line2Length = line2Length\n    },\n    onResize () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    }\n  },\n  mounted () {\n    const { mergeColor } = this\n\n    mergeColor()\n  }\n}\n</script>"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/decoration5/src"}]}