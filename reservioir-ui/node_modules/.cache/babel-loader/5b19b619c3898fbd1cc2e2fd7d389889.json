{"remainingRequest":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\src\\views\\collection\\safe\\gate\\gateDeclination.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\src\\views\\collection\\safe\\gate\\gateDeclination.vue","mtime":1640571458995},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711181250741},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":1711181252330},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711181250741},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1711181252689}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["gateDeclination.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <record :sensor=\"sensor\" :dialogVisible=\"dialogVisible\" @changeShow=\"showHistory\"></record>\n    <dv-border-box9 style=\"padding: 10px; height: 80vh\">\n      <el-row>\n        <el-col :span=\"6\">\n          <dv-decoration3 style=\"width: 320px;height: 30px\"></dv-decoration3>\n        </el-col>\n        <el-col :span=\"10\">\n          <label class=\"w-label\">参数选择：</label>\n          <el-radio-group v-model=\"paraIndex\">\n            <el-radio :label=\"i\" v-bind:key=\"item\" v-for=\"(item,i) in paras\" @change=\"select(paraIndex)\">{{item}}\n            </el-radio>\n          </el-radio-group>\n        </el-col>\n        <el-col :span=\"8\">\n          <div id=\"lb-time\" class=\"layui-inline\">\n            <label class=\"w-label\" for=\"newest-time\">最新监测时间：<span\n              id=\"newest-time\">{{newestTime}}</span></label>\n          </div>\n        </el-col>\n      </el-row>\n      <el-row>\n        <div id=\"div-main\">\n          <div id=\"div-img\" style=\"width:100%;height:500px;margin-left: 10%;margin-top: 50px;\"></div>\n        </div>\n      </el-row>\n    </dv-border-box9>\n  </div>\n</template>\n\n<script>\n\n  import record from '@/views/collection/common/record'\n  import zrender from 'zrender'\n  import ImageShape from 'zrender/src/graphic/Image';\n  import PolygonShape from 'zrender/src/graphic/shape/Polygon';\n  import Text from 'zrender/src/graphic/Text';\n  import Circle from 'zrender/src/graphic/shape/Circle';\n  import LinearGradient from 'zrender/src/graphic/LinearGradient';\n  import ShapeLine from \"zrender/src/graphic/shape/Polyline\";\n\n  export default {\n    name: \"realtime\",\n    components: {record},\n    data() {\n      let paras = this.operator.getAttrArray(this.common.getData('gateDeclination'), 'name');\n      return {\n        transform: this.reservoir.getGate().getDeclinationSafe(),\n        paras: paras,\n        paraIndex: 1,\n        sensor: null,\n        dialogVisible: false,\n        newestTime: '2016-08-01 10:00:00',\n\n        zr: null,\n        images: [],\n        shapeGs: [],\n        shapes: [],\n      }\n    },\n    methods: {\n      select(paraIndex) {\n        this.paraIndex = paraIndex;\n        this.updateSensors();\n      },\n      showRecord(sen) {\n        this.sensor = sen;\n        this.dialogVisible = true;\n      },\n      // 监听 子组件弹窗关闭后触发，有子组件调用\n      showHistory(data) {\n        this.dialogVisible = data !== 'false';\n      },\n      /**\n       * 创建多边形\n       * @param points 多个点\n       * @param order\n       * @returns {PolygonShape}\n       */\n      createShapePolygon(sensor) {\n        let that = this;\n        return new PolygonShape({\n          style: {\n            fill: 'rgba(20, 200, 200, 0.6)',\n            lineWidth: 2\n          },\n          draggable: false,\n          shape: {\n            points: this.operator.createBackgroundRect(sensor.pos[0], sensor.pos[1], 100, 50),\n          },\n          states: {\n            normal: {\n              transition: '* 500 0 Linear'\n            },\n            hover: {\n              shape: {\n                points: [[0, 0], [1000, 0], [1000, 600], [0, 600]]\n              }\n            }\n          },\n          // 图形元素上绑定事件\n          onclick: function () {\n            that.lineShow(sensor);\n          }\n        });\n      },\n      /**\n       * 创建一个圆形\n       * @param color 颜色\n       * @param radius 半径\n       * @param order 次序\n       * @returns {Circle}\n       */\n      createCircleShape(color, radius, order) {\n        let position = this.findSensor(order).pos;\n        let x = position[0] + 10;\n        let y = position[1] + 30;\n\n        let gradient = new LinearGradient();\n        gradient.addColorStop(0, color);\n        gradient.addColorStop(1, color);\n        let shape = new Circle({\n          position: [x, y],\n          scale: [1, 1],\n          shape: {\n            cx: 0,\n            cy: 0,\n            r: 7\n          },\n          style: {\n            fill: gradient,\n            lineWidth: 5\n          }\n        });\n\n        shape.animateShape(true).when(1000, {r: radius}).start();\n        return shape;\n      },\n      /**\n       * 创建图像文本内容\n       * @param text 文本内容\n       * @param order 次序\n       * @returns {zrender/graphic/Text|Text|Text}\n       */\n      createShapeText(text, order) {\n        let that = this;\n        let position = this.findSensor(order).pos;\n        let x = position[0] + 25;\n        let y = position[1] + 5;\n\n        return new Text({\n          style: {\n            text: text,\n            x: x,\n            y: y,\n            textFont: 'bold 16px Arial',\n            color: '#fff000',\n            strokeColor: '#0ff000'\n          },\n          draggable: false,\n          onclick: function () {\n            that.lineShow(that.findSensor(order));\n          }\n        });\n      },\n\n      /**\n       * 创建图片形状\n       * @param imageName 图片名称\n       * @param posX 横坐标\n       * @param posY 纵坐标\n       * @param width 宽度\n       * @param height 高度\n       * @param text 文本\n       * @param order 次序\n       * @returns {ImageShape}\n       */\n      createImageShape(imageName, posX, posY, width, height, text, order) {\n        let that = this;\n        let position = this.findSensor(order).pos;\n        let x = position[0];\n        let y = position[1] + 20;\n        return new ImageShape({\n          position: [x, y],\n          scale: [1, 1],\n          style: {\n            x: 0,\n            y: 0,\n            image: require(`@/assets/images/common/` + imageName),\n            width: 20,\n            height: 20,\n            sx: posX,\n            sy: posY,\n            sWidth: width,\n            sHeight: height,\n            text: text,\n            hoverable: true,\n            textAlign: 'start',\n            textPosition: 'right',\n            textFont: 'bold 16px Arial'\n          },\n          draggable: false,\n          // 图形元素上绑定事件\n          onclick: function () {\n            that.lineShow(that.findSensor(order));\n          }\n        });\n      },\n\n      /**\n       * 创建形状线条\n       * @param order 次序\n       * @returns {ShapeLine}\n       */\n      createShapeLine(order) {\n        let that = this;\n        return new ShapeLine({\n          position: this.findSensor(order).pos,\n          style: {\n            stroke: \"rgba(0, 0, 200, 0.8)\",\n            lineWidth: 2\n          },\n          shape: {\n            points: [[10, 0], [10, 20], [10, 10], [0, 10], [20, 10]]\n          },\n          // 图形元素上绑定事件\n          onclick: function () {\n            that.lineShow(that.findSensor(order));\n          }\n        });\n      },\n      /**\n       * 显示历史数据\n       * */\n      lineShow(sensor) {\n        if (sensor && !sensor.invalid) {\n          if (sensor.name === '沉降' && sensor.type === 0) {   //处理沉降中的基准点，让它不显示曲线\n            sensor.url = '';\n          }\n          this.showRecord(sensor);\n        }\n      },\n      setData(sensor) {\n        let posX = 0;\n        let posY = 0;\n        let img;\n        let txtTem;\n        let shapeInfo;\n        let sensors = this.common.getData('gateDeclination');\n        if (sensor.name === '电压') {                                 //电压没有正负，单独处理\n          for (let i = 0; i < sensors.length; i++) {\n            if (sensor.id === sensors[i].id) {\n              img = 'horizontal.png';\n              this.zr.remove(this.shapeGs[i]);\n              this.zr.add(this.shapes[i]);\n              this.zr.remove(this.images[i]);\n              txtTem = sensor.name + \":\" + (value).toFixed(1) + sensor.unit;\n              this.images[i] = this.createImageShape(img, posX,\n                posY, 100, 100, txtTem, i);\n              this.zr.add(this.images[i]);\n            }\n          }\n        } else if (sensor.name === '液面') {                          //液面距离\n          shapeInfo = this.setValue(150, 0, 320, 260, sensor);\n          this.switchImage(shapeInfo, sensor);\n        } else {                                                      //沉降位移的处理\n          shapeInfo = this.setValue(310, 135, 140, 270, sensor);\n          this.switchImage(shapeInfo, sensor);\n        }\n      },\n      /**\n       * 成功获取数据后的处理函数\n       */\n      updateSensors() {\n        let sens = this.common.getData('gateDeclination');\n        let newestTime = sens[0].time;\n        for (let i = 0; i < sens.length; i++) {\n          if (sens[i].time > newestTime) {\n            newestTime = sens[i].time;\n          }\n          let sensorID = sens[i].id;\n          let sensor = this.operator.findArrayItemByAttrValue(sens, 'id', sensorID);\n\n          if (sensor && this.paras[this.paraIndex] === sensor.name) {\n            this.setData(sensor);\n          }\n        }\n        this.newestTime = new Date(newestTime).format(\"yyyy-MM-dd hh:mm:ss\");\n      },\n      /**\n       * 设置数据\n       * @param posX1\n       * @param posY1\n       * @param posX2\n       * @param posY2\n       * @param sensor 传感器数据\n       * */\n      setValue(posX1, posY1, posX2, posY2, sensor) {\n        let posX, posY, img, txtTem;\n        if (sensor.value > 0) {\n          posX = posX1;\n          posY = posY1;\n          img = 'orientation.png';\n          this.zr.remove(this.shapeGs[sensor.type]);\n          this.zr.add(this.shapes[sensor.type]);\n        } else if (sensor.value < 0) {\n          posX = posX2;\n          posY = posY2;\n          img = 'orientation.png';\n          this.zr.remove(this.shapes[sensor.type]);\n          this.zr.add(this.shapeGs[sensor.type]);\n        } else {\n          img = 'horizontal.png';\n        }\n        txtTem = this.operator.getPointText(sensor);\n        return {'posX': posX, 'posY': posY, 'img': img, 'txtTem': txtTem};\n      },\n      /**\n       * 查找传感器数据\n       *\n       * */\n      findSensor(order) {\n        let sensors = this.common.getData('gateDeclination');\n        let name = this.paras[this.paraIndex];\n        return this.operator.getSensor(this.operator.getSensors(sensors, 'type', order), 'name', name, true);\n      },\n      /**\n       * 切换图片\n       * @param shapeInfo 图像参数\n       * @param sensor 传感器数据\n       * */\n      switchImage(shapeInfo, sensor) {\n        this.zr.remove(this.images[sensor.type]);\n        this.images[sensor.type] = this.createImageShape(shapeInfo.img, shapeInfo.posX,\n          shapeInfo.posY, 100, 100, shapeInfo.txtTem, sensor.type);\n        this.zr.add(this.images[sensor.type]);\n      },\n    },\n    mounted() {\n      this.zr = zrender.init(document.getElementById(\"div-img\"));\n      let image = new ImageShape({\n        scale: [1.1, 1],\n        style: {\n          x: -80,\n          y: 0,\n          image: require(`../../../../assets/images/${this.common.CURRENT_RESERVOIR}/gateDisplacement.jpg`),\n          width: 1000,\n          height: 600\n        },\n        draggable: false\n      });\n      this.zr.add(image);\n\n      let sens = this.operator.getSensors(this.common.getData('gateDeclination'), 'name', 'x倾斜');\n      for (let i = 0; i < sens.length; i++) {\n        this.zr.add(this.createShapePolygon(sens[i]));\n        this.shapes.push(this.createCircleShape('#0000ff', sens[i].size, i));\n        this.shapeGs.push(this.createCircleShape('#0ff000', sens[i].size, i));\n\n        this.zr.add(this.createShapeText(sens[i].title, i));\n        image = this.createImageShape(sens[i].image, '', '', 100, 100, sens[i].text, i);\n        this.images.push(image);\n        this.zr.add(image);\n        this.zr.add(this.createShapeLine(i));\n      }\n\n      this.updateSensors();\n      let that = this;\n      setInterval(function () {\n        that.updateSensors();\n      }, this.common.TIME_SPAN);\n    }\n  }\n\n\n</script>\n\n<style scoped>\n  .app-container {\n    margin: 0;\n    background: url(\"../../../../assets/images/bg.png\") repeat-y;\n    color: #dfe6ec;\n    height: 100vh;\n  }\n\n  ::v-deep .w-label {\n    font-size: 24px;\n    font-family: 楷体, serif;\n    color: #eceebc;\n  }\n\n  ::v-deep .el-radio__label {\n    font-size: 24px;\n    font-family: 楷体, serif;\n    color: #eceebc;\n  }\n\n  ::v-deep .el-radio__input {\n    vertical-align: baseline;\n  }\n</style>\n"],"sourceRoot":"src/views/collection/safe/gate"}]}