{"remainingRequest":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\src\\views\\collection\\common\\record.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\src\\views\\collection\\common\\record.vue","mtime":1655822906139},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711181250741},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":1711181252330},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711181250741},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1711181252689}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["record.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA,IAAA,KAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;gBACA;AACA,EAAA,IAAA,EAAA,QADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,aAAA,EAAA;AACA,QAAA,SAAA,EAAA,CAAA;AACA,UAAA,IAAA,EAAA,MADA;AAEA,UAAA,OAFA,mBAEA,MAFA,EAEA;AACA,gBAAA,GAAA,GAAA,IAAA,IAAA,EAAA;AACA,gBAAA,KAAA,GAAA,IAAA,IAAA,EAAA;AACA,YAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,OAAA,KAAA,OAAA,IAAA,GAAA,EAAA,GAAA,CAAA;AACA,YAAA,MAAA,CAAA,KAAA,CAAA,MAAA,EAAA,CAAA,KAAA,EAAA,GAAA,CAAA;AACA;AAPA,SAAA,EAQA;AACA,UAAA,IAAA,EAAA,OADA;AAEA,UAAA,OAFA,mBAEA,MAFA,EAEA;AACA,gBAAA,GAAA,GAAA,IAAA,IAAA,EAAA;AACA,gBAAA,KAAA,GAAA,IAAA,IAAA,EAAA;AACA,YAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,OAAA,KAAA,OAAA,IAAA,GAAA,EAAA,GAAA,EAAA;AACA,YAAA,MAAA,CAAA,KAAA,CAAA,MAAA,EAAA,CAAA,KAAA,EAAA,GAAA,CAAA;AACA;AAPA,SARA,EAgBA;AACA,UAAA,IAAA,EAAA,OADA;AAEA,UAAA,OAFA,mBAEA,MAFA,EAEA;AACA,gBAAA,GAAA,GAAA,IAAA,IAAA,EAAA;AACA,gBAAA,KAAA,GAAA,IAAA,IAAA,EAAA;AACA,YAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,OAAA,KAAA,OAAA,IAAA,GAAA,EAAA,GAAA,EAAA;AACA,YAAA,MAAA,CAAA,KAAA,CAAA,MAAA,EAAA,CAAA,KAAA,EAAA,GAAA,CAAA;AACA;AAPA,SAhBA;AADA,OADA;AA4BA,MAAA,SAAA,EAAA,CAAA,IAAA,IAAA,GAAA,MAAA,CAAA,YAAA,CAAA,EAAA,IAAA,IAAA,GAAA,MAAA,CAAA,YAAA,CAAA,CA5BA;AA6BA,MAAA,OAAA,EAAA,EA7BA;AA8BA,MAAA,IAAA,EAAA,EA9BA;AA+BA,MAAA,UAAA,EAAA,KA/BA;AAgCA,MAAA,SAAA,EAAA,IAhCA;AAiCA,MAAA,UAAA,EAAA;AAjCA,KAAA;AAmCA,GAtCA;AAuCA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA,KADA;AAKA,IAAA,aAAA,EAAA;AAAA,MAAA,IAAA,EAAA,OAAA;AAAA,MAAA,OAAA,EAAA;AAAA;AALA,GAvCA;AA8CA,EAAA,KAAA,EAAA;AACA;AACA,IAAA,aAFA,yBAEA,MAFA,EAEA,MAFA,EAEA;AACA,WAAA,UAAA,GAAA,KAAA,aAAA;AACA;AAJA,GA9CA;AAoDA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,WAFA,yBAEA;AACA;AACA,WAAA,KAAA,CAAA,YAAA,EAAA,OAAA;AACA,KALA;AAMA,IAAA,UANA,wBAMA;AACA;AACA,WAAA,WAAA;AACA,KATA;AAUA,IAAA,MAVA,oBAUA;AACA,UAAA,KAAA,GAAA,IAAA,IAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,CAAA;AACA,UAAA,GAAA,GAAA,IAAA,IAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,CAAA;AACA,UAAA,IAAA,GAAA,GAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,EAAA,GAAA,KAAA,IAAA,GAAA,IAAA;AACA,MAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,OAAA,KAAA,IAAA;AACA,MAAA,GAAA,CAAA,OAAA,CAAA,GAAA,CAAA,OAAA,KAAA,IAAA;AACA,WAAA,SAAA,CAAA,CAAA,IAAA,KAAA,CAAA,MAAA,CAAA,YAAA,CAAA;AACA,WAAA,SAAA,CAAA,CAAA,IAAA,GAAA,CAAA,MAAA,CAAA,YAAA,CAAA;AACA,WAAA,IAAA,CAAA,IAAA,EAAA,WAAA,EAAA,CAAA,KAAA,CAAA,MAAA,CAAA,YAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,YAAA,CAAA,CAAA;AACA,WAAA,WAAA;AACA,KApBA;AAqBA,IAAA,OArBA,qBAqBA;AACA,UAAA,KAAA,GAAA,IAAA,IAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,CAAA;AACA,UAAA,GAAA,GAAA,IAAA,IAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,CAAA;AACA,UAAA,IAAA,GAAA,GAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,EAAA,GAAA,KAAA,IAAA,GAAA,IAAA;AACA,MAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,OAAA,KAAA,IAAA;AACA,MAAA,GAAA,CAAA,OAAA,CAAA,GAAA,CAAA,OAAA,KAAA,IAAA;AACA,WAAA,SAAA,CAAA,CAAA,IAAA,KAAA,CAAA,MAAA,CAAA,YAAA,CAAA;AACA,WAAA,SAAA,CAAA,CAAA,IAAA,GAAA,CAAA,MAAA,CAAA,YAAA,CAAA;AACA,WAAA,IAAA,CAAA,IAAA,EAAA,WAAA,EAAA,CAAA,KAAA,CAAA,MAAA,CAAA,YAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,YAAA,CAAA,CAAA;AACA,WAAA,WAAA;AACA,KA/BA;AAgCA,IAAA,WAhCA,yBAgCA;AACA,WAAA,SAAA;AACA,WAAA,OAAA,GAAA,KAAA,WAAA,EAAA,CAFA,CAGA;;AACA,UAAA,KAAA,MAAA,CAAA,EAAA,EAAA;AACA,aAAA,OAAA,CAAA,iBAAA,CAAA,KAAA,MAAA,CAAA,GAAA,EAAA,KAAA,MAAA,CAAA,qBAAA,EACA,KAAA,MAAA,CAAA,EADA,EACA,KAAA,SAAA,CAAA,CAAA,CADA,EACA,KAAA,SAAA,CAAA,CAAA,CADA,EACA,KAAA,MADA;AAEA,OAHA,MAGA;AACA,aAAA,IAAA,GAAA,EAAA;AACA,aAAA,SAAA,CAAA,EAAA,EAAA,CAAA,EAAA;AACA,aAAA,OAAA,CAAA,KAAA;AACA,aAAA,QAAA,CAAA,OAAA,CAAA,MAAA;AACA;AACA,KA7CA;AA+CA,IAAA,SA/CA,uBA+CA;AACA,WAAA,WAAA;AACA,KAjDA;AAmDA,IAAA,SAnDA,uBAmDA;AACA,WAAA,SAAA,GAAA,KAAA,QAAA,CAAA,IAAA,CAAA,QAAA,CAAA,cAAA,CAAA,UAAA,CAAA,CAAA;AACA,WAAA,UAAA,GAAA;AACA,QAAA,KAAA,EAAA;AACA,UAAA,IAAA,EAAA,KAAA,MAAA,CAAA,IAAA,GAAA,GAAA,GAAA,KAAA,MAAA,CAAA,IAAA,GAAA,GADA;AAEA,UAAA,SAAA,EAAA;AACA,YAAA,KAAA,EAAA,SADA;AAEA,YAAA,SAAA,EAAA;AAFA;AAFA,SADA;AASA,QAAA,QAAA,EAAA,CAAA;AACA,UAAA,IAAA,EAAA,IADA;AAEA,UAAA,QAAA,EAAA,IAFA;AAGA,UAAA,KAAA,EAAA,IAHA;AAIA,UAAA,GAAA,EAAA;AAJA,SAAA,CATA;AAgBA,QAAA,IAAA,EAAA;AACA,UAAA,IAAA,EAAA,IADA;AAEA,UAAA,KAAA,EAAA,IAFA;AAGA,UAAA,MAAA,EAAA,KAHA;AAIA,UAAA,IAAA,EAAA,KAJA;AAKA,UAAA,YAAA,EAAA;AALA,SAhBA;AAuBA,QAAA,KAAA,EAAA;AACA,UAAA,IAAA,EAAA,MADA;AAEA,UAAA,QAAA,EAAA;AACA,YAAA,IAAA,EAAA,IADA;AAEA,YAAA,MAAA,EAAA,KAFA;AAGA,YAAA,KAAA,EAAA;AAHA,WAFA;AAOA,UAAA,QAAA,EAAA;AACA,YAAA,IAAA,EAAA;AADA,WAPA;AAUA,UAAA,SAAA,EAAA;AACA,YAAA,IAAA,EAAA,IADA;AAEA,YAAA,SAAA,EAAA;AACA,cAAA,KAAA,EAAA;AADA;AAFA,WAVA;AAgBA,UAAA,CAAA,EAAA;AAhBA,SAvBA;AAyCA,QAAA,KAAA,EAAA;AACA,UAAA,QAAA,EAAA;AACA,YAAA,IAAA,EAAA,IADA;AAEA,YAAA,SAAA,EAAA;AACA,cAAA,KAAA,EAAA;AADA;AAFA,WADA;AAOA,UAAA,QAAA,EAAA;AACA,YAAA,IAAA,EAAA;AADA,WAPA;AAUA,UAAA,SAAA,EAAA;AACA,YAAA,IAAA,EAAA,IADA;AAEA,YAAA,SAAA,EAAA;AACA,cAAA,KAAA,EAAA;AADA;AAFA;AAVA,SAzCA;AA2DA,QAAA,OAAA,EAAA;AACA,UAAA,OAAA,EAAA,MADA;AAEA,UAAA,WAAA,EAAA;AACA,YAAA,IAAA,EAAA,OADA;AAEA,YAAA,KAAA,EAAA;AACA,cAAA,eAAA,EAAA;AADA;AAFA;AAFA,SA3DA;AAoEA,QAAA,MAAA,EAAA;AApEA,OAAA;AAsEA,WAAA,SAAA,CAAA,SAAA,CAAA,KAAA,UAAA;AACA,KA5HA;AA8HA,IAAA,UA9HA,wBA8HA;AACA,UAAA,KAAA;AACA,UAAA,QAAA,GAAA,KAAA,MAAA,CAAA,IAAA,GAAA,GAAA,GAAA,KAAA,MAAA,CAAA,IAAA,GAAA,GAAA;AACA,MAAA,KAAA,GAAA,CAAA,IAAA,EAAA,QAAA,CAAA;;AACA,UAAA,KAAA,IAAA,CAAA,CAAA,KAAA,OAAA,KAAA,IAAA,CAAA,CAAA,EAAA,CAAA,CAAA,KAAA,QAAA,EAAA;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,IAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,eAAA,IAAA,CAAA,CAAA,EAAA,CAAA,IAAA,KAAA,IAAA,CAAA,CAAA,EAAA,CAAA,EAAA,MAAA,CAAA,qBAAA,CAAA;AACA;AACA;;AACA,MAAA,KAAA,CAAA,OAAA,CAAA,KAAA,IAAA,EAAA,QAAA,EAAA,KAAA;AACA,KAxIA;AA2IA,IAAA,SA3IA,qBA2IA,GA3IA,EA2IA,GA3IA,EA2IA;AACA,UAAA,MAAA,GAAA;AACA,QAAA,IAAA,EAAA,KAAA,MAAA,CAAA,IAAA,GAAA,GAAA,GAAA,KAAA,MAAA,CAAA,IAAA,GAAA,GADA;AAEA,QAAA,IAAA,EAAA,MAFA;AAGA,QAAA,UAAA,EAAA,CAHA;AAIA,QAAA,MAAA,EAAA,KAJA;AAKA,QAAA,MAAA,EAAA,IALA;AAMA,QAAA,SAAA,EAAA;AACA,UAAA,QAAA,EAAA,EADA;AAEA,UAAA,KAAA,EAAA;AAFA,SANA;AAUA,QAAA,SAAA,EAAA;AACA,UAAA,KAAA,EAAA,CADA;AAEA,UAAA,WAAA,EAAA,wBAFA;AAGA,UAAA,UAAA,EAAA,EAHA;AAIA,UAAA,aAAA,EAAA;AAJA,SAVA;AAgBA,QAAA,SAAA,EAAA;AACA,UAAA,MAAA,EAAA;AACA,YAAA,KAAA,EAAA;AACA,cAAA,IAAA,EAAA,KADA;AACA;AACA,cAAA,QAAA,EAAA,KAFA;AAGA,cAAA,SAAA,EAAA,mBAAA,MAAA,EAAA;AACA,uBAAA,MAAA,CAAA,KAAA;AACA,eALA;AAMA,cAAA,IAAA,EAAA;AACA,gBAAA,MAAA,EAAA;AACA,kBAAA,KAAA,EAAA;AADA,iBADA;AAIA,gBAAA,MAAA,EAAA;AACA,kBAAA,KAAA,EAAA;AADA;AAJA,eANA;AAcA,cAAA,SAAA,EAAA;AACA,gBAAA,KAAA,EAAA;AADA;AAdA,aADA;AAmBA,YAAA,KAAA,EAAA,SAnBA;AAoBA,YAAA,KAAA,EAAA,CApBA;AAqBA,YAAA,SAAA,EAAA;AACA,cAAA,KAAA,EAAA,CADA;AAEA,cAAA,KAAA,EAAA;AAFA;AArBA;AADA,SAhBA;AA4CA,QAAA,IAAA,EAAA,KAAA;AA5CA,OAAA;AA8CA,WAAA,UAAA,CAAA,KAAA,CAAA,GAAA,GAAA,IAAA,IAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,IAAA,EAAA,GAAA,CAAA,EAAA,OAAA,KAAA,OAAA,EAAA;AACA,WAAA,UAAA,CAAA,KAAA,CAAA,GAAA,GAAA,IAAA,IAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,IAAA,EAAA,GAAA,CAAA,EAAA,OAAA,KAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AACA,WAAA,UAAA,CAAA,KAAA,CAAA,GAAA,GAAA,GAAA,KAAA,KAAA,MAAA,CAAA,QAAA,GAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,GAAA,GAAA,CAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,CAAA;AACA,WAAA,UAAA,CAAA,KAAA,CAAA,GAAA,GAAA,GAAA,KAAA,CAAA,KAAA,MAAA,CAAA,QAAA,GAAA,CAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,GAAA,GAAA,CAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,CAAA;AACA,WAAA,UAAA,CAAA,MAAA,GAAA,EAAA;AACA,WAAA,UAAA,CAAA,MAAA,CAAA,IAAA,CAAA,MAAA;AACA,WAAA,SAAA,CAAA,SAAA,CAAA,KAAA,UAAA,EAAA,IAAA;AACA,KAjMA;;AAqMA;AACA;AACA;AACA;AACA,IAAA,MAzMA,kBAyMA,MAzMA,EAyMA;AACA,UAAA,CAAA,MAAA,EAAA;AACA,aAAA,OAAA,CAAA,KAAA;AACA,aAAA,QAAA,CAAA,IAAA,CAAA,MAAA;AACA,aAAA,IAAA,GAAA,EAAA;AACA,aAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA;AACA;;AACA,UAAA,SAAA,GAAA,EAAA;AACA,UAAA,GAAA,GAAA,CAAA,KAAA,MAAA,CAAA,QAAA;AACA,UAAA,GAAA,GAAA,KAAA,MAAA,CAAA,QAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,MAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,YAAA,KAAA,GAAA,UAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA;AACA,YAAA,IAAA,GAAA,KAAA;;AACA,YAAA,KAAA,MAAA,CAAA,IAAA,KAAA,IAAA,EAAA;AACA,UAAA,KAAA,GAAA,KAAA,SAAA,CAAA,YAAA,GAAA,uBAAA,CAAA,UAAA,EACA,KAAA,MAAA,CAAA,OAAA,CAAA,UAAA,CAAA,KAAA,CAAA,EAAA,KAAA,MAAA,CAAA,IAAA,CADA,CAAA;AAEA,SAHA,MAGA,IAAA,KAAA,MAAA,CAAA,IAAA,KAAA,MAAA,EAAA;AACA,UAAA,KAAA,GAAA,KAAA,SAAA,CAAA,YAAA,GAAA,OAAA,CAAA,MAAA,EAAA,KAAA,MAAA,CAAA,OAAA,CAAA,UAAA,CAAA,KAAA,CAAA,EAAA,KAAA,MAAA,CAAA,IAAA,CAAA,CAAA;AACA,SAFA,MAEA,IAAA,KAAA,MAAA,CAAA,IAAA,KAAA,MAAA,EAAA;AACA,cAAA,QAAA,GAAA,KAAA,SAAA,CAAA,YAAA,GAAA,uBAAA,CAAA,UAAA,EACA,KAAA,MAAA,CAAA,OAAA,CAAA,UAAA,CAAA,KAAA,CAAA,EAAA,KAAA,MAAA,CAAA,IAAA,CADA,CAAA;AAEA,UAAA,KAAA,GAAA,QAAA,GAAA,KAAA,IAAA,CAAA,WAAA,GAAA,YAAA;AACA,SAJA,MAIA,IAAA,KAAA,MAAA,CAAA,IAAA,CAAA,OAAA,CAAA,IAAA,IAAA,CAAA,EAAA;AACA,UAAA,KAAA,GAAA,UAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA;AACA,SAFA,MAEA;AACA,UAAA,KAAA,GAAA,KAAA,MAAA,CAAA,OAAA,CAAA,UAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA,EAAA,KAAA,MAAA,CAAA,IAAA,CAAA;;AACA,cAAA,KAAA,GAAA,KAAA,MAAA,CAAA,IAAA,IAAA,KAAA,GAAA,KAAA,MAAA,CAAA,GAAA,EAAA;AACA,YAAA,SAAA,CAAA,IAAA,CAAA,CAAA,IAAA,IAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,EAAA,KAAA,QAAA,CAAA,GAAA,CAAA,KAAA,CAAA,CAAA;AACA,gBAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,KAAA;AACA,gBAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,KAAA;AACA;;AACA;AACA;;AAEA,QAAA,SAAA,CAAA,IAAA,CAAA,CAAA,IAAA,IAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,EAAA,KAAA,QAAA,CAAA,GAAA,CAAA,KAAA,CAAA,CAAA;AACA,YAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,KAAA;AACA,YAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,KAAA;AACA,OAtCA,CAuCA;AACA;;;AACA,WAAA,IAAA,GAAA,SAAA;AACA,WAAA,SAAA,CAAA,GAAA,EAAA,GAAA;AACA,WAAA,OAAA,CAAA,KAAA;AACA;AArPA,GApDA;AA2SA,EAAA,OA3SA,qBA2SA,CAEA;AA7SA,C","sourcesContent":["<template>\n  <el-dialog width=\"1000px\" title=\"历史数据\" :visible.sync=\"showDialog\" @close=\"handleClose\" @opened=\"handleOpen\">\n    <el-container>\n      <el-header>\n        <div>\n          <el-row :gutter=\"20\">\n            <el-col :span=\"16\">\n              <span style=\"color: #9fecff\">选择日期：</span>\n              <el-button type=\"primary\" icon=\"el-icon-caret-left\" style=\"width: 20px\" @click=\"getPre\"></el-button>\n              <el-date-picker\n                v-model=\"dateRange\"\n                type=\"daterange\"\n                align=\"right\"\n                unlink-panels\n                range-separator=\"至\"\n                start-placeholder=\"开始日期\"\n                end-placeholder=\"结束日期\"\n                format=\"yyyy-MM-dd\"\n                value-format=\"yyyy-MM-dd\"\n                :picker-options=\"pickerOptions\">\n              </el-date-picker>\n              <el-button type=\"primary\" icon=\"el-icon-caret-right\" style=\"width: 20px\" @click=\"getNext\"></el-button>\n            </el-col>\n            <el-col :span=\"4\">\n              <el-button type=\"warning\" round @click=\"queryData\">数据查询</el-button>\n            </el-col>\n            <el-col :span=\"4\">\n              <el-button type=\"primary\" round @click=\"exportData\">数据导出</el-button>\n            </el-col>\n          </el-row>\n        </div>\n      </el-header>\n      <div id=\"div-line\"></div>\n\n      <el-footer style=\"text-align: center\">\n        <el-button @click=\"showDialog = false\" style=\"width:150px; background-color: #c0d9d4\"\n                   icon=\"el-icon-switch-button\">关闭弹窗\n        </el-button>\n      </el-footer>\n    </el-container>\n  </el-dialog>\n</template>\n\n<script>\n  let excel = require('@/api/collection/excel');\n  export default {\n    name: \"record\",\n    data() {\n      return {\n        pickerOptions: {\n          shortcuts: [{\n            text: '最近一周',\n            onClick(picker) {\n              const end = new Date();\n              const start = new Date();\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n              picker.$emit('pick', [start, end]);\n            }\n          }, {\n            text: '最近一个月',\n            onClick(picker) {\n              const end = new Date();\n              const start = new Date();\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n              picker.$emit('pick', [start, end]);\n            }\n          }, {\n            text: '最近三个月',\n            onClick(picker) {\n              const end = new Date();\n              const start = new Date();\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n              picker.$emit('pick', [start, end]);\n            }\n          }]\n        },\n        dateRange: [new Date().format(\"yyyy-MM-dd\"), new Date().format(\"yyyy-MM-dd\")],\n        loading: '',\n        data: '',\n        showDialog: false,\n        lineChart: null,\n        lineOption: null\n      };\n    },\n    props: {\n      sensor: {\n        type: Object,\n        default: () => ({})\n      },\n      dialogVisible: {type: Boolean, default: false}\n    },\n    watch: {\n      // 监听 addOrUpdateVisible 改变\n      dialogVisible(oldVal, newVal) {\n        this.showDialog = this.dialogVisible\n      },\n    },\n    methods: {\n      // 弹出框关闭后触发\n      handleClose() {\n        // 子组件调用父组件方法，并传递参数\n        this.$emit('changeShow', 'false')\n      },\n      handleOpen() {\n        // 子组件调用父组件方法，并传递参数\n        this.refreshData();\n      },\n      getPre() {\n        let start = new Date(this.dateRange[0]);\n        let end = new Date(this.dateRange[1]);\n        let span = end.getTime() - start.getTime() + 24 * 3600 * 1000;\n        start.setTime(start.getTime() - span);\n        end.setTime(end.getTime() - span);\n        this.dateRange[0] = start.format('yyyy-MM-dd');\n        this.dateRange[1] = end.format('yyyy-MM-dd');\n        this.$set(this, \"dateRange\", [start.format('yyyy-MM-dd'), end.format('yyyy-MM-dd')]);\n        this.refreshData();\n      },\n      getNext() {\n        let start = new Date(this.dateRange[0]);\n        let end = new Date(this.dateRange[1]);\n        let span = end.getTime() - start.getTime() + 24 * 3600 * 1000;\n        start.setTime(start.getTime() + span);\n        end.setTime(end.getTime() + span);\n        this.dateRange[0] = start.format('yyyy-MM-dd');\n        this.dateRange[1] = end.format('yyyy-MM-dd');\n        this.$set(this, \"dateRange\", [start.format('yyyy-MM-dd'), end.format('yyyy-MM-dd')]);\n        this.refreshData();\n      },\n      refreshData() {\n        this.initChart();\n        this.loading = this.openLoading();\n        //开始获取数据\n        if (this.sensor.id) {\n          this.request.sendRecordRequest(this.sensor.url, this.common.SENSOR_RECORD_COMMOND,\n            this.sensor.id, this.dateRange[0], this.dateRange[1], this.handle);\n        } else {\n          this.data = [];\n          this.addSeries(10, -10);\n          this.loading.close();\n          this.$message.warning('没有数据');\n        }\n      },\n\n      queryData() {\n        this.refreshData();\n      },\n\n      initChart() {\n        this.lineChart = this.$echarts.init(document.getElementById('div-line'));\n        this.lineOption = {\n          title: {\n            text: this.sensor.name + '(' + this.sensor.unit + ')',\n            textStyle: {\n              color: '#eddee3',\n              fontStyle: '',\n            },\n          },\n\n          dataZoom: [{\n            show: true,\n            realtime: true,\n            start: 0.01,\n            end: 100\n          }],\n\n          grid: {\n            left: '5%',\n            right: '4%',\n            bottom: '13%',\n            show: false,\n            containLabel: true\n          },\n          xAxis: {\n            type: 'time',\n            axisLine: {\n              show: true,\n              onZero: false,\n              color: '#e4f3cd',\n            },\n            axisTick: {\n              show: false\n            },\n            axisLabel: {\n              show: true,\n              textStyle: {\n                color: '#e4f3cd'\n              }\n            },\n            z: 10\n          },\n          yAxis: {\n            axisLine: {\n              show: true,\n              lineStyle: {\n                color: '#8edfb9',\n              }\n            },\n            axisTick: {\n              show: true\n            },\n            axisLabel: {\n              show: true,\n              textStyle: {\n                color: '#e8e8e8'\n              }\n            },\n          },\n\n          tooltip: {\n            trigger: 'axis',\n            axisPointer: {\n              type: 'cross',\n              label: {\n                backgroundColor: '#6a7985'\n              }\n            }\n          },\n          series: []\n        };\n        this.lineChart.setOption(this.lineOption);\n      },\n\n      exportData() {\n        let title;\n        let lineName = this.sensor.name + '(' + this.sensor.unit + ')';\n        title = ['时间', lineName];\n        if (this.data[0] && typeof this.data[0][0] !== 'string') {\n          for (let i = 0; i < this.data.length; i++) {\n            this.data[i][0] = this.data[i][0].format('yyyy-MM-dd hh:mm:ss');\n          }\n        }\n        excel.convert(this.data, lineName, title);\n      },\n\n\n      addSeries(max, min) {\n        let series = {\n          name: this.sensor.name + '(' + this.sensor.unit + ')',\n          type: 'line',\n          symbolSize: 2,\n          symbol: 'dot',\n          smooth: true,\n          textStyle: {\n            fontSize: 15,\n            color: '#fff'\n          },\n          lineStyle: {\n            width: 3,\n            shadowColor: 'rgba(255,240,205,0.76)',\n            shadowBlur: 10,\n            shadowOffsetY: 8\n          },\n          itemStyle: {\n            normal: {\n              label: {\n                show: false,//显示圆点顶部的数字\n                position: 'top',\n                formatter: function (params) {\n                  return params.value;\n                },\n                rich: {\n                  color1: {\n                    color: '#f7ba0e'\n                  },\n                  color2: {\n                    color: '#42a1fe'\n                  }\n                },\n                textStyle: {\n                  color: '#496c71'\n                },\n              },\n              color: \"#488f10\",\n              width: 8,\n              lineStyle: {\n                width: 2,\n                color: '#b3d9c0'\n              }\n            },\n          },\n          data: this.data\n        };\n        this.lineOption.xAxis.min = new Date((this.dateRange[0]).replace(/-/g, '/')).getTime() - 1000 * 60;\n        this.lineOption.xAxis.max = new Date((this.dateRange[1]).replace(/-/g, '/')).getTime() + 1000 * 60 * 60 * 24;\n        this.lineOption.yAxis.min = (min === this.common.BOUNDARY) ? 4 : Math.round(min - (max - min) * 0.2 - 10);\n        this.lineOption.yAxis.max = (max === -this.common.BOUNDARY) ? -4 : Math.round(max + (max - min) * 0.2 + 10);\n        this.lineOption.series = [];\n        this.lineOption.series.push(series);\n        this.lineChart.setOption(this.lineOption, true);\n      },\n\n\n\n      /**\n       * 成功获取数据后的处理函数\n       * @param result 从服务器获取的数据\n       */\n      handle(result) {\n        if (!result) {\n          this.loading.close();\n          this.$message.info('没有数据');\n          this.data = [];\n          this.addSeries(1, -1);\n          return;\n        }\n        let resultArr = [];\n        let max = -this.common.BOUNDARY;\n        let min = this.common.BOUNDARY;\n        for (let i = 0; i < result.length; i++) {\n          let value = parseFloat(result[i].DataValue);\n          let flag = false;\n          if (this.sensor.name === '库容') {\n            value = this.reservoir.getRelations().getCapacityRelationShip('capacity',\n              this.common.correct(parseFloat(value), this.sensor.bias));\n          } else if (this.sensor.name === '水面面积') {\n            value = this.reservoir.getRelations().getArea('area', this.common.correct(parseFloat(value), this.sensor.bias));\n          } else if (this.sensor.name === '可用水量') {\n            let capacity = this.reservoir.getRelations().getCapacityRelationShip('capacity',\n              this.common.correct(parseFloat(value), this.sensor.bias));\n            value = capacity - this.base.getBaseInfo().deadCapacity\n          } else if (this.sensor.name.indexOf('振动') > 0) {\n            value = parseFloat(result[i].DataValue);\n          } else {\n            value = this.common.correct(parseFloat(result[i].DataValue), this.sensor.bias);\n            if (value < this.sensor.high && value > this.sensor.low) {\n              resultArr.push([new Date(result[i].RevTime), this.operator.fix(value)]);\n              if (min > value) min = value;\n              if (max < value) max = value;\n            }\n            continue;\n          }\n\n          resultArr.push([new Date(result[i].RevTime), this.operator.fix(value)]);\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n        //去重\n        //this.data = this.common.removeRepeat(resultArr, 'RevTime');\n        this.data = resultArr;\n        this.addSeries(max, min);\n        this.loading.close();\n      },\n    },\n    mounted() {\n\n    },\n\n\n  }\n</script>\n\n<style scoped>\n  body, html, .main-body {\n    height: 90%;\n  }\n\n  button {\n    margin: 0 10px;\n  }\n\n  ::v-deep .el-dialog {\n    width: 1100px;\n  }\n\n  ::v-deep .el-dialog__body {\n    background-color: #082752;\n  }\n\n  .el-range-editor--medium .el-range-input {\n    font-size: 14px;\n    background-color: #f4ffff;\n  }\n\n\n  #div-img > img {\n    width: 600px;\n  }\n\n  #div-line {\n    display: block;\n    height: 300px;\n    width: 900px;\n    margin: 10px auto;\n  }\n\n  ::v-deep .el-dialog__header {\n    background-color: #86987526;\n    font-size: 16pt;\n  }\n\n</style>\n"],"sourceRoot":"src/views/collection/common"}]}