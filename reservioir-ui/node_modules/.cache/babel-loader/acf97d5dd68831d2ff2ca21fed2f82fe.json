{"remainingRequest":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\src\\views\\subsystem.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\src\\views\\subsystem.vue","mtime":1640612301271},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711181250741},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":1711181252330},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711181250741},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1711181252689}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["subsystem.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class='app-container'>\n    <div id=\"container\">\n\n    </div>\n  </div>\n</template>\n\n<script>\n  import * as THREE from 'three';\n  import {OrbitControls} from 'three/examples/jsm/controls/OrbitControls.js';\n  import {Water} from 'three/examples/jsm/objects/Water.js';\n  import {Sky} from 'three/examples/jsm/objects/Sky.js';\n  import {TTFLoader} from 'three/examples/jsm/loaders/TTFLoader.js';\n  import {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader.js';\n  import {GPUComputationRenderer} from 'three/examples/jsm/misc/GPUComputationRenderer.js';\n\n  export default {\n    name: \"first\",\n    methods: {},\n    mounted() {\n      /* TEXTURE WIDTH FOR SIMULATION */\n      const WIDTH = 2;\n      const BIRDS = 4;\n\n      /* BAKE ANIMATION INTO TEXTURE and CREATE GEOMETRY FROM BASE MODEL */\n      const BirdGeometry = new THREE.BufferGeometry();\n      let textureAnimation, durationAnimation, birdMesh, materialShader, vertexPerBird;\n\n      function nextPowerOf2(n) {\n        return Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)));\n      }\n\n      Math.lerp = function (value1, value2, amount) {\n        amount = Math.max(Math.min(amount, 1), 0);\n        return value1 + (value2 - value1) * amount;\n      };\n\n      const gltfs = ['files/glbs/Parrot.glb', 'files/glbs/Flamingo.glb'];\n      const selectModel = Math.floor(Math.random() * gltfs.length);\n      new GLTFLoader().load(gltfs[selectModel], function (gltf) {\n        const animations = gltf.animations;\n        durationAnimation = Math.round(animations[0].duration * 60);\n        const birdGeo = gltf.scene.children[0].geometry;\n        const morphAttributes = birdGeo.morphAttributes.position;\n        const tHeight = nextPowerOf2(durationAnimation);\n        const tWidth = nextPowerOf2(birdGeo.getAttribute('position').count);\n        vertexPerBird = birdGeo.getAttribute('position').count;\n        const tData = new Float32Array(3 * tWidth * tHeight);\n\n        for (let i = 0; i < tWidth; i++) {\n          for (let j = 0; j < tHeight; j++) {\n            const offset = j * tWidth * 3;\n            const curMorph = Math.floor(j / durationAnimation * morphAttributes.length);\n            const nextMorph = (Math.floor(j / durationAnimation * morphAttributes.length) + 1) % morphAttributes.length;\n            const lerpAmount = j / durationAnimation * morphAttributes.length % 1;\n\n            if (j < durationAnimation) {\n              let d0, d1;\n              d0 = morphAttributes[curMorph].array[i * 3];\n              d1 = morphAttributes[nextMorph].array[i * 3];\n              if (d0 !== undefined && d1 !== undefined) tData[offset + i * 3] = Math.lerp(d0, d1, lerpAmount);\n              d0 = morphAttributes[curMorph].array[i * 3 + 1];\n              d1 = morphAttributes[nextMorph].array[i * 3 + 1];\n              if (d0 !== undefined && d1 !== undefined) tData[offset + i * 3 + 1] = Math.lerp(d0, d1, lerpAmount);\n              d0 = morphAttributes[curMorph].array[i * 3 + 2];\n              d1 = morphAttributes[nextMorph].array[i * 3 + 2];\n              if (d0 !== undefined && d1 !== undefined) tData[offset + i * 3 + 2] = Math.lerp(d0, d1, lerpAmount);\n            }\n          }\n        }\n\n        textureAnimation = new THREE.DataTexture(tData, tWidth, tHeight, THREE.RGBFormat, THREE.FloatType);\n        textureAnimation.needsUpdate = true;\n\n        const vertices = [], color = [], reference = [], seeds = [], indices = [];\n        const totalVertices = birdGeo.getAttribute('position').count * 3 * BIRDS;\n        for (let i = 0; i < totalVertices; i++) {\n          const bIndex = i % (birdGeo.getAttribute('position').count * 3);\n          vertices.push(birdGeo.getAttribute('position').array[bIndex]);\n          color.push(birdGeo.getAttribute('color').array[bIndex]);\n        }\n\n        let r = Math.random();\n        for (let i = 0; i < birdGeo.getAttribute('position').count * BIRDS; i++) {\n          const bIndex = i % (birdGeo.getAttribute('position').count);\n          const bird = Math.floor(i / birdGeo.getAttribute('position').count);\n          if (bIndex === 0) r = Math.random();\n          const j = ~~bird;\n          const x = (j % WIDTH) / WIDTH;\n          const y = ~~(j / WIDTH) / WIDTH;\n          reference.push(x, y, bIndex / tWidth, durationAnimation / tHeight);\n          seeds.push(bird, r, Math.random(), Math.random());\n        }\n\n        for (let i = 0; i < birdGeo.index.array.length * BIRDS; i++) {\n          const offset = Math.floor(i / birdGeo.index.array.length) * (birdGeo.getAttribute('position').count);\n          indices.push(birdGeo.index.array[i % birdGeo.index.array.length] + offset);\n        }\n\n        BirdGeometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(vertices), 3));\n        BirdGeometry.setAttribute('birdColor', new THREE.BufferAttribute(new Float32Array(color), 3));\n        BirdGeometry.setAttribute('color', new THREE.BufferAttribute(new Float32Array(color), 3));\n        BirdGeometry.setAttribute('reference', new THREE.BufferAttribute(new Float32Array(reference), 4));\n        BirdGeometry.setAttribute('seeds', new THREE.BufferAttribute(new Float32Array(seeds), 4));\n\n        BirdGeometry.setIndex(indices);\n\n        init();\n        animate();\n\n      });\n\n\n      let container, stats;\n      let camera, scene, renderer;\n      let mouseX = 0, mouseY = 0;\n\n      let windowHalfX = window.innerWidth / 2;\n      let windowHalfY = window.innerHeight / 2;\n\n      const BOUNDS = 800, BOUNDS_HALF = BOUNDS / 2;\n\n      let last = performance.now();\n\n      let gpuCompute;\n      let velocityVariable;\n      let positionVariable;\n      let positionUniforms;\n      let velocityUniforms;\n\n      let controls, water, sun;\n      let meshes;\n      let iniMeshes = function () {\n        meshes = [\n          {\n            name: 'mesh0',\n            pos: {x: -60, y: 0, z: 60},\n            url: '#',\n            img: require('@/assets/flash/monitor.png'),\n            rot: {x: 0.1, y: 0.2, z: 0.5}\n          },\n\n          {\n            name: 'mesh2',\n            pos: {x: -0, y: 0, z: 40},\n            url: '/reservoir',\n            img: require('@/assets/flash/manage.png'),\n            rot: {x: 0.3, y: 0.2, z: 0.3}\n          },\n\n          {\n            name: 'mesh4',\n            pos: {x: 60, y: 0, z: 40},\n            url: '#',\n            img: require('@/assets/flash/apprise.png'),\n            rot: {x: 0.5, y: 0.2, z: 0.1}\n          },\n        ];\n      }();\n\n\n      let group, textMesh1, textMesh2, textGeo, material;\n\n      let text = '滕州市数字水库监管平台';\n      const height = 20,\n        size = 70,\n        hover = 30,\n        curveSegments = 4,\n        bevelThickness = 2,\n        bevelSize = 1.5;\n\n      let font = null;\n      const mirror = true;\n\n\n      let inArea = false;\n      let currentIndex = null;\n\n\n      addTouch();\n\n      function addTouch() {\n        function onMouseMove(event) {\n          let intersect = getIntersect();\n          if (intersect) {\n            document.body.style.cursor = \"pointer\";\n            let mesh = meshes[intersect.object.index];\n            currentIndex = intersect.object.index;\n            mesh.rot.x = 0;\n            mesh.rot.z = 0;\n            mesh.rot.y = 0;\n            mesh.pos.y = 5;\n            inArea = true;\n            render();\n          } else {\n            if (inArea) {\n              inArea = false;\n              meshes[currentIndex].rot.x = (currentIndex + 1) * 0.1;\n              meshes[currentIndex].rot.y = 0.2;\n              meshes[currentIndex].rot.z = (meshes.length - currentIndex - 1) * 0.1;\n              meshes[currentIndex].pos.y = 0;\n              render();\n            }\n            document.body.style.cursor = \"default\";\n          }\n        }\n\n        function onMouseClick(event) {\n          let intersect = getIntersect();\n          if (intersect) {\n            window.location.href = findMesh(intersect.object.position.x).url;\n          }\n        }\n\n        function findMesh(x) {\n          for (let mesh of meshes) {\n            if (x === mesh.pos.x) {\n              return mesh;\n            }\n          }\n        }\n\n        function getIntersect() {\n          //声明射线和mouse变量\n          let raycaster = new THREE.Raycaster();\n          let mouse = new THREE.Vector2();\n\n          //通过鼠标点击的位置计算出射线所需要的点的位置，以屏幕中心为原点，值的范围为-1到1.\n          mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n          mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n          //根据在屏幕的二维位置以及相机的矩阵更新射线的位置\n          raycaster.setFromCamera(mouse, camera);\n\n          // 获取射线直线和所有模型相交的数组集合\n          let intersects = raycaster.intersectObjects(scene.children, true); //增加第二个参数，可以遍历子子孙孙对象\n          //判断当前数组是否为空,不为空则获取最近的的模型，将其颜色修改为红色\n          if (intersects.length > 2) {\n            for (let intersect of intersects) {\n              if (intersect.object instanceof THREE.Mesh && (intersect.object.index >= 0)) {\n                return intersect;\n              }\n            }\n          }\n        }\n\n        document.addEventListener(\"click\", onMouseClick, false);\n        document.addEventListener(\"mousemove\", onMouseMove, false);\n      }\n\n      function init() {\n        container = document.getElementById('container');\n\n        renderer = new THREE.WebGLRenderer();\n        renderer.setPixelRatio(window.devicePixelRatio);\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.toneMapping = THREE.ACESFilmicToneMapping;\n        container.appendChild(renderer.domElement);\n        //\n\n        scene = new THREE.Scene();\n\n        camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 20000);\n        camera.position.set(30, 30, 100);\n        //\n\n        sun = new THREE.Vector3();\n\n        // Water\n        const waterGeometry = new THREE.PlaneGeometry(10000, 10000);\n        water = new Water(\n          waterGeometry,\n          {\n            textureWidth: 512,\n            textureHeight: 512,\n            waterNormals: new THREE.TextureLoader().load(require('@/assets/flash/waternormals.jpg'), function (texture) {\n              texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n            }),\n            sunDirection: new THREE.Vector3(),\n            sunColor: 0xffffff,\n            waterColor: 0x001e0f,\n            distortionScale: 10,\n            fog: scene.fog !== undefined\n          }\n        );\n        water.rotation.x = -Math.PI / 2;\n        scene.add(water);\n\n        // Skybox\n        const sky = new Sky();\n        sky.scale.setScalar(10000);\n        scene.add(sky);\n\n        const skyUniforms = sky.material.uniforms;\n        skyUniforms['turbidity'].value = 10;\n        skyUniforms['rayleigh'].value = 9;\n        skyUniforms['mieCoefficient'].value = 0.005;\n        skyUniforms['mieDirectionalG'].value = 0.8;\n\n        const parameters = {\n          elevation: ((12 - Math.abs(new Date().getHours() + new Date().getMinutes() / 60 - 12)) * 40 / 12 - 20) * 2,\n          azimuth: (12 - new Date().getHours() - new Date().getMinutes() / 60) * 10 - 170\n        };\n\n        const pmremGenerator = new THREE.PMREMGenerator(renderer);\n\n        let updateSun = function () {\n          const phi = THREE.MathUtils.degToRad(90 - parameters.elevation);\n          const theta = THREE.MathUtils.degToRad(parameters.azimuth);\n\n          sun.setFromSphericalCoords(1, phi, theta);\n          sky.material.uniforms['sunPosition'].value.copy(sun);\n          water.material.uniforms['sunDirection'].value.copy(sun).normalize();\n          scene.environment = pmremGenerator.fromScene(sky).texture;\n        }();\n\n        const geometry = new THREE.BoxGeometry(20, 20, 20);\n\n        for (let i = 0; i < meshes.length; i++) {\n          const texture = new THREE.TextureLoader().load(meshes[i].img);\n          const material = new THREE.MeshStandardMaterial({map: texture});\n\n          let m = new THREE.Mesh(geometry, material);\n          m.index = i;\n          scene.add(m);\n          meshes[i].obj = m;\n        }\n\n        const geo = new THREE.BoxGeometry(30, 30, 30);\n        const tex = new THREE.TextureLoader().load(require('@/assets/logo/water.png'));\n        const mat = new THREE.MeshStandardMaterial({map: tex});\n        let iconMesh = new THREE.Mesh(geo, mat);\n        iconMesh.position.x = -800;\n        iconMesh.position.y = 88;\n        iconMesh.position.z = -500;\n        iconMesh.rotation.y = 7.24;\n        iconMesh.rotation.x = 9.5;\n        iconMesh.rotation.z = 9.4;\n        scene.add(iconMesh);   //版权问题，暂时不开启\n\n        controls = new OrbitControls(camera, renderer.domElement);\n        controls.maxPolarAngle = Math.PI * 0.495;\n        controls.target.set(0, 10, 0);\n        controls.minDistance = 50.0;\n        controls.maxDistance = 4800.0;\n        controls.update();\n\n        //\n        const dirLight = new THREE.DirectionalLight(0xffffff, 0.125);\n        dirLight.position.set(0, 0, 1).normalize();\n        scene.add(dirLight);\n\n        const pointLight = new THREE.PointLight(0xffffff, 1.5);\n        pointLight.position.set(0, 200, 90);\n        pointLight.color.setHSL(0.1, 1, 0.3);\n        scene.add(pointLight);\n\n        material = new THREE.MeshPhongMaterial({color: 0xffffff, flatShading: true});\n        //\n        group = new THREE.Group();\n        group.position.y = 100;\n\n        scene.add(group);\n\n        const loader = new TTFLoader();\n\n        loader.load(require('@/assets/flash/title.ttf'), function (json) {\n          font = new THREE.Font(json);\n          createText();\n        });\n\n\n        camera.updateMatrixWorld();\n\n        initComputeRenderer();\n        initBirds();\n        container.style.touchAction = 'none';\n        container.addEventListener('pointermove', onPointerMove);\n\n        window.addEventListener('resize', onWindowResize);\n      }\n\n      function initComputeRenderer() {\n        gpuCompute = new GPUComputationRenderer(WIDTH, WIDTH, renderer);\n\n        const dtPosition = gpuCompute.createTexture();\n        const dtVelocity = gpuCompute.createTexture();\n        fillPositionTexture(dtPosition);\n        fillVelocityTexture(dtVelocity);\n\n        velocityVariable = gpuCompute.addVariable(\"textureVelocity\",\n          'uniform float time;\\n' +\n          '\\t\\t\\tuniform float testing;\\n' +\n          '\\t\\t\\tuniform float delta; // about 0.016\\n' +\n          '\\t\\t\\tuniform float separationDistance; // 20\\n' +\n          '\\t\\t\\tuniform float alignmentDistance; // 40\\n' +\n          '\\t\\t\\tuniform float cohesionDistance; //\\n' +\n          '\\t\\t\\tuniform float freedomFactor;\\n' +\n          '\\t\\t\\tuniform vec3 predator;\\n' +\n          '\\n' +\n          '\\t\\t\\tconst float width = resolution.x;\\n' +\n          '\\t\\t\\tconst float height = resolution.y;\\n' +\n          '\\n' +\n          '\\t\\t\\tconst float PI = 3.141592653589793;\\n' +\n          '\\t\\t\\tconst float PI_2 = PI * 2.0;\\n' +\n          '\\t\\t\\t// const float VISION = PI * 0.55;\\n' +\n          '\\n' +\n          '\\t\\t\\tfloat zoneRadius = 40.0;\\n' +\n          '\\t\\t\\tfloat zoneRadiusSquared = 1600.0;\\n' +\n          '\\n' +\n          '\\t\\t\\tfloat separationThresh = 0.45;\\n' +\n          '\\t\\t\\tfloat alignmentThresh = 0.65;\\n' +\n          '\\n' +\n          '\\t\\t\\tconst float UPPER_BOUNDS = BOUNDS;\\n' +\n          '\\t\\t\\tconst float LOWER_BOUNDS = -UPPER_BOUNDS;\\n' +\n          '\\n' +\n          '\\t\\t\\tconst float SPEED_LIMIT = 9.0;\\n' +\n          '\\n' +\n          '\\t\\t\\tfloat rand( vec2 co ){\\n' +\n          '\\t\\t\\t\\treturn fract( sin( dot( co.xy, vec2(12.9898,78.233) ) ) * 43758.5453 );\\n' +\n          '\\t\\t\\t}\\n' +\n          '\\n' +\n          '\\t\\t\\tvoid main() {\\n' +\n          '\\n' +\n          '\\t\\t\\t\\tzoneRadius = separationDistance + alignmentDistance + cohesionDistance;\\n' +\n          '\\t\\t\\t\\tseparationThresh = separationDistance / zoneRadius;\\n' +\n          '\\t\\t\\t\\talignmentThresh = ( separationDistance + alignmentDistance ) / zoneRadius;\\n' +\n          '\\t\\t\\t\\tzoneRadiusSquared = zoneRadius * zoneRadius;\\n' +\n          '\\n' +\n          '\\n' +\n          '\\t\\t\\t\\tvec2 uv = gl_FragCoord.xy / resolution.xy;\\n' +\n          '\\t\\t\\t\\tvec3 birdPosition, birdVelocity;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\tvec3 selfPosition = texture2D( texturePosition, uv ).xyz;\\n' +\n          '\\t\\t\\t\\tvec3 selfVelocity = texture2D( textureVelocity, uv ).xyz;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\tfloat dist;\\n' +\n          '\\t\\t\\t\\tvec3 dir; // direction\\n' +\n          '\\t\\t\\t\\tfloat distSquared;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\tfloat separationSquared = separationDistance * separationDistance;\\n' +\n          '\\t\\t\\t\\tfloat cohesionSquared = cohesionDistance * cohesionDistance;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\tfloat f;\\n' +\n          '\\t\\t\\t\\tfloat percent;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\tvec3 velocity = selfVelocity;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\tfloat limit = SPEED_LIMIT;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\tdir = predator * UPPER_BOUNDS - selfPosition;\\n' +\n          '\\t\\t\\t\\tdir.z = 0.;\\n' +\n          '\\t\\t\\t\\t// dir.z *= 0.6;\\n' +\n          '\\t\\t\\t\\tdist = length( dir );\\n' +\n          '\\t\\t\\t\\tdistSquared = dist * dist;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\tfloat preyRadius = 150.0;\\n' +\n          '\\t\\t\\t\\tfloat preyRadiusSq = preyRadius * preyRadius;\\n' +\n          '\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t// move birds away from predator\\n' +\n          '\\t\\t\\t\\tif ( dist < preyRadius ) {\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t\\tf = ( distSquared / preyRadiusSq - 1.0 ) * delta * 100.;\\n' +\n          '\\t\\t\\t\\t\\tvelocity += normalize( dir ) * f;\\n' +\n          '\\t\\t\\t\\t\\tlimit += 5.0;\\n' +\n          '\\t\\t\\t\\t}\\n' +\n          '\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t// if (testing == 0.0) {}\\n' +\n          '\\t\\t\\t\\t// if ( rand( uv + time ) < freedomFactor ) {}\\n' +\n          '\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t// Attract flocks to the center\\n' +\n          '\\t\\t\\t\\tvec3 central = vec3( 0., 0., 0. );\\n' +\n          '\\t\\t\\t\\tdir = selfPosition - central;\\n' +\n          '\\t\\t\\t\\tdist = length( dir );\\n' +\n          '\\n' +\n          '\\t\\t\\t\\tdir.y *= 2.5;\\n' +\n          '\\t\\t\\t\\tvelocity -= normalize( dir ) * delta * 5.;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\tfor ( float y = 0.0; y < height; y++ ) {\\n' +\n          '\\t\\t\\t\\t\\tfor ( float x = 0.0; x < width; x++ ) {\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t\\t\\tvec2 ref = vec2( x + 0.5, y + 0.5 ) / resolution.xy;\\n' +\n          '\\t\\t\\t\\t\\t\\tbirdPosition = texture2D( texturePosition, ref ).xyz;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t\\t\\tdir = birdPosition - selfPosition;\\n' +\n          '\\t\\t\\t\\t\\t\\tdist = length( dir );\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t\\t\\tif ( dist < 0.0001 ) continue;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t\\t\\tdistSquared = dist * dist;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t\\t\\tif ( distSquared > zoneRadiusSquared ) continue;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t\\t\\tpercent = distSquared / zoneRadiusSquared;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t\\t\\tif ( percent < separationThresh ) { // low\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t\\t\\t\\t// Separation - Move apart for comfort\\n' +\n          '\\t\\t\\t\\t\\t\\t\\tf = ( separationThresh / percent - 1.0 ) * delta;\\n' +\n          '\\t\\t\\t\\t\\t\\t\\tvelocity -= normalize( dir ) * f;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t\\t\\t} else if ( percent < alignmentThresh ) { // high\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t\\t\\t\\t// Alignment - fly the same direction\\n' +\n          '\\t\\t\\t\\t\\t\\t\\tfloat threshDelta = alignmentThresh - separationThresh;\\n' +\n          '\\t\\t\\t\\t\\t\\t\\tfloat adjustedPercent = ( percent - separationThresh ) / threshDelta;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t\\t\\t\\tbirdVelocity = texture2D( textureVelocity, ref ).xyz;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t\\t\\t\\tf = ( 0.5 - cos( adjustedPercent * PI_2 ) * 0.5 + 0.5 ) * delta;\\n' +\n          '\\t\\t\\t\\t\\t\\t\\tvelocity += normalize( birdVelocity ) * f;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t\\t\\t} else {\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t\\t\\t\\t// Attraction / Cohesion - move closer\\n' +\n          '\\t\\t\\t\\t\\t\\t\\tfloat threshDelta = 1.0 - alignmentThresh;\\n' +\n          '\\t\\t\\t\\t\\t\\t\\tfloat adjustedPercent;\\n' +\n          '\\t\\t\\t\\t\\t\\t\\tif( threshDelta == 0. ) adjustedPercent = 1.;\\n' +\n          '\\t\\t\\t\\t\\t\\t\\telse adjustedPercent = ( percent - alignmentThresh ) / threshDelta;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t\\t\\t\\tf = ( 0.5 - ( cos( adjustedPercent * PI_2 ) * -0.5 + 0.5 ) ) * delta;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t\\t\\t\\tvelocity += normalize( dir ) * f;\\n' +\n          '\\t\\t\\t\\t\\t\\t}\\n' +\n          '\\t\\t\\t\\t\\t}\\n' +\n          '\\t\\t\\t\\t}\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t// this make tends to fly around than down or up\\n' +\n          '\\t\\t\\t\\t// if (velocity.y > 0.) velocity.y *= (1. - 0.2 * delta);\\n' +\n          '\\n' +\n          '\\t\\t\\t\\t// Speed Limits\\n' +\n          '\\t\\t\\t\\tif ( length( velocity ) > limit ) {\\n' +\n          '\\t\\t\\t\\t\\tvelocity = normalize( velocity ) * limit;\\n' +\n          '\\t\\t\\t\\t}\\n' +\n          '\\n' +\n          '\\t\\t\\t\\tgl_FragColor = vec4( velocity, 1.0 );\\n' +\n          '\\n' +\n          '\\t\\t\\t}\\n', dtVelocity);\n        positionVariable = gpuCompute.addVariable(\"texturePosition\",\n          'uniform float time;\\n' +\n          '\\t\\t\\tuniform float delta;\\n' +\n          '\\n' +\n          '\\t\\t\\tvoid main()\\t{\\n' +\n          '\\n' +\n          '\\t\\t\\t\\tvec2 uv = gl_FragCoord.xy / resolution.xy;\\n' +\n          '\\t\\t\\t\\tvec4 tmpPos = texture2D( texturePosition, uv );\\n' +\n          '\\t\\t\\t\\tvec3 position = tmpPos.xyz;\\n' +\n          '\\t\\t\\t\\tvec3 velocity = texture2D( textureVelocity, uv ).xyz;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\tfloat phase = tmpPos.w;\\n' +\n          '\\n' +\n          '\\t\\t\\t\\tphase = mod( ( phase + delta +\\n' +\n          '\\t\\t\\t\\t\\tlength( velocity.xz ) * delta * 3. +\\n' +\n          '\\t\\t\\t\\t\\tmax( velocity.y, 0.0 ) * delta * 6. ), 62.83 );\\n' +\n          '\\n' +\n          '\\t\\t\\t\\tgl_FragColor = vec4( position + velocity * delta * 15. , phase );\\n' +\n          '\\n' +\n          '\\t\\t\\t}'\n\n          , dtPosition);\n\n        gpuCompute.setVariableDependencies(velocityVariable, [positionVariable, velocityVariable]);\n        gpuCompute.setVariableDependencies(positionVariable, [positionVariable, velocityVariable]);\n\n        positionUniforms = positionVariable.material.uniforms;\n        velocityUniforms = velocityVariable.material.uniforms;\n\n        positionUniforms[\"time\"] = {value: 0.0};\n        positionUniforms[\"delta\"] = {value: 0.0};\n        velocityUniforms[\"time\"] = {value: 1.0};\n        velocityUniforms[\"delta\"] = {value: 0.0};\n        velocityUniforms[\"testing\"] = {value: 1.0};\n        velocityUniforms[\"separationDistance\"] = {value: 1.0};\n        velocityUniforms[\"alignmentDistance\"] = {value: 1.0};\n        velocityUniforms[\"cohesionDistance\"] = {value: 1.0};\n        velocityUniforms[\"freedomFactor\"] = {value: 1.0};\n        velocityUniforms[\"predator\"] = {value: new THREE.Vector3()};\n        velocityVariable.material.defines.BOUNDS = BOUNDS.toFixed(2);\n\n        velocityVariable.wrapS = THREE.RepeatWrapping;\n        velocityVariable.wrapT = THREE.RepeatWrapping;\n        positionVariable.wrapS = THREE.RepeatWrapping;\n        positionVariable.wrapT = THREE.RepeatWrapping;\n\n        const error = gpuCompute.init();\n\n        if (error !== null) {\n\n          console.error(error);\n\n        }\n\n      }\n\n      function initBirds() {\n        const geometry = BirdGeometry;\n        const m = new THREE.MeshStandardMaterial({\n          vertexColors: true,\n          flatShading: true,\n          roughness: 1,\n          metalness: 0\n        });\n\n        m.onBeforeCompile = (shader) => {\n          shader.uniforms.texturePosition = {value: null};\n          shader.uniforms.textureVelocity = {value: null};\n          shader.uniforms.textureAnimation = {value: textureAnimation};\n          shader.uniforms.time = {value: 1.0};\n          shader.uniforms.size = {value: 0.3};\n          shader.uniforms.delta = {value: 0.0};\n\n          let token = '#define STANDARD';\n\n          let insert = /* glsl */`\n\t\t\t\t\t\tattribute vec4 reference;\n\t\t\t\t\t\tattribute vec4 seeds;\n\t\t\t\t\t\tattribute vec3 birdColor;\n\t\t\t\t\t\tuniform sampler2D texturePosition;\n\t\t\t\t\t\tuniform sampler2D textureVelocity;\n\t\t\t\t\t\tuniform sampler2D textureAnimation;\n\t\t\t\t\t\tuniform float size;\n\t\t\t\t\t\tuniform float time;\n\t\t\t\t\t`;\n\n          shader.vertexShader = shader.vertexShader.replace(token, token + insert);\n\n          token = '#include <begin_vertex>';\n\n          insert = /* glsl */`\n\t\t\t\t\t\tvec4 tmpPos = texture2D( texturePosition, reference.xy );\n\n\t\t\t\t\t\tvec3 pos = tmpPos.xyz;\n\t\t\t\t\t\tvec3 velocity = normalize(texture2D( textureVelocity, reference.xy ).xyz);\n\t\t\t\t\t\tvec3 aniPos = texture2D( textureAnimation, vec2( reference.z, mod( time + ( seeds.x ) * ( ( 0.0004 + seeds.y / 10000.0) + normalize( velocity ) / 20000.0 ), reference.w ) ) ).xyz;\n\t\t\t\t\t\tvec3 newPosition = position;\n\n\t\t\t\t\t\tnewPosition = mat3( modelMatrix ) * ( newPosition + aniPos );\n\t\t\t\t\t\tnewPosition *= size + seeds.y * size * 0.2;\n\n\t\t\t\t\t\tvelocity.z *= -1.;\n\t\t\t\t\t\tfloat xz = length( velocity.xz );\n\t\t\t\t\t\tfloat xyz = 1.;\n\t\t\t\t\t\tfloat x = sqrt( 1. - velocity.y * velocity.y );\n\n\t\t\t\t\t\tfloat cosry = velocity.x / xz;\n\t\t\t\t\t\tfloat sinry = velocity.z / xz;\n\n\t\t\t\t\t\tfloat cosrz = x / xyz;\n\t\t\t\t\t\tfloat sinrz = velocity.y / xyz;\n\n\t\t\t\t\t\tmat3 maty =  mat3( cosry, 0, -sinry, 0    , 1, 0     , sinry, 0, cosry );\n\t\t\t\t\t\tmat3 matz =  mat3( cosrz , sinrz, 0, -sinrz, cosrz, 0, 0     , 0    , 1 );\n\n\t\t\t\t\t\tnewPosition =  maty * matz * newPosition;\n\t\t\t\t\t\tnewPosition += pos;\n\n\t\t\t\t\t\tvec3 transformed = vec3( newPosition );\n\t\t\t\t\t`;\n\n          shader.vertexShader = shader.vertexShader.replace(token, insert);\n          materialShader = shader;\n        };\n\n        birdMesh = new THREE.Mesh(geometry, m);\n        birdMesh.rotation.y = Math.PI / 2;\n        birdMesh.position.x = 1300;\n        birdMesh.position.z = -2400;\n        birdMesh.position.y = 300;\n\n        birdMesh.castShadow = true;\n        birdMesh.receiveShadow = true;\n        scene.add(birdMesh);\n      }\n\n      function fillPositionTexture(texture) {\n        const theArray = texture.image.data;\n        for (let k = 0, kl = theArray.length; k < kl; k += 4) {\n          const x = Math.random() * BOUNDS - BOUNDS_HALF;\n          const y = Math.random() * BOUNDS - BOUNDS_HALF;\n          const z = Math.random() * BOUNDS - BOUNDS_HALF;\n\n          theArray[k + 0] = x;\n          theArray[k + 1] = y;\n          theArray[k + 2] = z;\n          theArray[k + 3] = 1;\n        }\n      }\n\n      function fillVelocityTexture(texture) {\n        const theArray = texture.image.data;\n        for (let k = 0, kl = theArray.length; k < kl; k += 4) {\n          const x = Math.random() - 0.5;\n          const y = Math.random() - 0.5;\n          const z = Math.random() - 0.5;\n          theArray[k + 0] = x * 10;\n          theArray[k + 1] = y * 10;\n          theArray[k + 2] = z * 10;\n          theArray[k + 3] = 1;\n        }\n      }\n\n\n      function onPointerMove(event) {\n        if (event.isPrimary === false) return;\n        mouseX = event.clientX - windowHalfX;\n        mouseY = event.clientY - windowHalfY;\n      }\n\n      function createText() {\n        textGeo = new THREE.TextGeometry(text, {\n          font: font,\n          size: size,\n          height: height,\n          curveSegments: curveSegments,\n          bevelThickness: bevelThickness,\n          bevelSize: bevelSize,\n          bevelEnabled: true\n        });\n\n        textGeo.computeBoundingBox();\n        textGeo.computeVertexNormals();\n\n        const centerOffset = -0.5 * (textGeo.boundingBox.max.x - textGeo.boundingBox.min.x);\n\n        if (mirror) {\n          textMesh2 = new THREE.Mesh(textGeo, material);\n          textMesh2.position.x = centerOffset;\n          textMesh2.position.y = -hover;\n          textMesh2.position.z = height;\n          textMesh2.rotation.x = Math.PI;\n          textMesh2.rotation.y = Math.PI * 2;\n          group.add(textMesh2);\n        }\n      }\n\n      function onWindowResize() {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n      }\n\n      function animate() {\n        requestAnimationFrame(animate);\n        group.position.x = -227;\n        group.position.y = 18;\n        group.position.z = -600;\n        group.rotation.y = 6.0;\n        group.rotation.x = 600.02;\n        group.rotation.z = 219.9;\n        render();\n      }\n\n\n      let radius = 2700;\n      let theta = 8;\n\n\n      function render() {\n        const now = performance.now();\n        const time = now * 0.0005;\n        for (let mesh of meshes) {\n          move(time, mesh);\n        }\n        water.material.uniforms['time'].value += 1.0 / 60.0;\n\n        if (theta < 33.7) {\n          theta += 0.1;\n          radius -= 10;\n\n          camera.position.x = radius * Math.sin(THREE.MathUtils.degToRad(theta)) - 45;\n          camera.position.y = radius / 3 * Math.sin(THREE.MathUtils.degToRad(theta));\n          camera.position.z = radius * Math.cos(THREE.MathUtils.degToRad(theta));\n        }\n\n\n        //camera.lookAt(scene.position);\n\n        let delta = (now - last) / 1000;\n        if (delta > 1) delta = 1; // safety cap on large deltas\n        last = now;\n        positionUniforms[\"time\"].value = now;\n        positionUniforms[\"delta\"].value = delta;\n        velocityUniforms[\"time\"].value = now;\n        velocityUniforms[\"delta\"].value = delta;\n        if (materialShader) materialShader.uniforms[\"time\"].value = now / 1000;\n        if (materialShader) materialShader.uniforms[\"delta\"].value = delta;\n\n        velocityUniforms[\"predator\"].value.set(0.5 * mouseX / windowHalfX, -0.5 * mouseY / windowHalfY, 0);\n\n        mouseX = 10000;\n        mouseY = 10000;\n\n        gpuCompute.compute();\n        if (materialShader) materialShader.uniforms[\"texturePosition\"].value = gpuCompute.getCurrentRenderTarget(positionVariable).texture;\n        if (materialShader) materialShader.uniforms[\"textureVelocity\"].value = gpuCompute.getCurrentRenderTarget(velocityVariable).texture;\n\n\n        renderer.render(scene, camera);\n      }\n\n      function move(time, mesh) {\n        mesh.obj.position.y = Math.sin(time + mesh.pos.x) * 5 + mesh.pos.y;\n        mesh.obj.position.x = mesh.pos.x;\n        mesh.obj.position.z = mesh.pos.z;\n        mesh.obj.rotation.x = mesh.rot.x * time;\n        mesh.obj.rotation.z = mesh.rot.z * time;\n      }\n    }\n  }\n</script>\n\n<style scoped>\n  .app-container{\n    margin: 0;\n    padding: 0 !important;\n  }\n\n</style>\n"],"sourceRoot":"src/views"}]}