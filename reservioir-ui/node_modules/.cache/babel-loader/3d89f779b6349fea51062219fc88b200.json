{"remainingRequest":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\src\\App.vue","mtime":1701786842453},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711181250741},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":1711181252330},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711181250741},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1711181252689}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIik7CgovLwovLwovLwovLwovLwovLwp2YXIgX2RlZmF1bHQgPSB7CiAgbmFtZTogJ0FwcCcsCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIC8qKgogICAgICog5oiQ5Yqf6I635Y+W5pWw5o2u5ZCO55qE5aSE55CG5Ye95pWwCiAgICAgKiBAcGFyYW0gcmVzdWx0IOS7juacjeWKoeWZqOiOt+WPlueahOaVsOaNrgogICAgICovCiAgICB2YXIgcmVxdWVzdCA9IHJlcXVpcmUoJ0AvYXBpL2NvbGxlY3Rpb24vcmVxdWVzdCcpOwoKICAgIHZhciBjb21tb24gPSByZXF1aXJlKCdAL2FwaS9jb2xsZWN0aW9uL2NvbW1vbicpOwoKICAgIHZhciByZXNlcnZvaXIgPSByZXF1aXJlKCdAL2FwaS9jb2xsZWN0aW9uLycgKyBjb21tb24uQ1VSUkVOVF9SRVNFUlZPSVIgKyAnL3Jlc2Vydm9pcicpOwoKICAgIHZhciBzZW5zb3JMaXN0ID0gcmVxdWlyZSgnQC9hcGkvY29sbGVjdGlvbi8nICsgY29tbW9uLkNVUlJFTlRfUkVTRVJWT0lSICsgJy9zZW5zb3JMaXN0Jyk7CgogICAgdmFyIG9wZXJhdG9yID0gcmVxdWlyZSgnQC9hcGkvY29sbGVjdGlvbi9vcGVyYXRvcicpOwoKICAgIHZhciBzZW5kUmVxdWVzdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgLy/lkajmnJ/lj5HpgIHmlbDmja7or7fmsYIKICAgICAgcmVzZXJ2b2lyLnNlbmRJbmZvKCk7CiAgICAgIHNldEludGVydmFsKHJlc2Vydm9pci5zZW5kSW5mbywgY29tbW9uLlRJTUVfU1BBTik7CiAgICB9KCk7CgogICAgd2luZG93LmRvU3VjY2VzcyA9IGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgaWYgKCFyZXN1bHQpIHJldHVybjsKICAgICAgdmFyIHNlbnNvcnMgPSBjb21tb24ubG9hZFNlbnNvcnMoKTsKCiAgICAgIGlmICghc2Vuc29ycykgewogICAgICAgIHNlbnNvcnMgPSBzZW5zb3JMaXN0LmNyZWF0ZVNlbnNvcnMoKTsKICAgICAgfQoKICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiAyICYmIHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV0uU2Vuc29ySUQgPT09IHJlc3VsdFswXS5TZW5zb3JJRCkgewogICAgICAgIC8v6ZW/5pWI5oOF5Ya15aSE55CG77yM5q2k5pe26I635Y+W55qE5piv5LiA5Liq5bCP5pe255qE5Y6G5Y+y5pWw5o2uCiAgICAgICAgdmFyIHNlbnNvciA9IG9wZXJhdG9yLmdldFNlbnNvcihzZW5zb3JzLCAnaWQnLCByZXN1bHRbMF0uU2Vuc29ySUQpOwogICAgICAgIHZhciBuZXdBcnIgPSBbXTsKCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIHZhciB2YWx1ZSA9IHBhcnNlRmxvYXQocmVzdWx0W2ldLkRhdGFWYWx1ZSk7CgogICAgICAgICAgaWYgKHZhbHVlID4gc2Vuc29yLmxvdyAmJiB2YWx1ZSA8IHNlbnNvci5oaWdoICYmIGkgPiAwICYmIHJlc3VsdFtpXS5SZXZUaW1lICE9PSByZXN1bHRbaSAtIDFdLlJldlRpbWUpIHsKICAgICAgICAgICAgbmV3QXJyLnB1c2gocmVzdWx0W2ldKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhciBpc0RhbSA9IHNlbnNvciAmJiBzZW5zb3IucGFydC5pbmRleE9mKCdkYW0nKSA+PSAwOwogICAgICAgIHZhciBpc0dhdGUgPSBzZW5zb3IgJiYgc2Vuc29yLnBhcnQuaW5kZXhPZignZ2F0ZScpID49IDA7CiAgICAgICAgdmFyIGlzTGV2ZWwgPSBzZW5zb3IubmFtZSA9PT0gJ+awtOS9jSc7CgogICAgICAgIGlmIChpc0RhbSB8fCBpc0dhdGUpIHsKICAgICAgICAgIHZhciBmaXJzdCwgbGFzdDsKCiAgICAgICAgICBpZiAobmV3QXJyLmxlbmd0aCA8IDIpIHsKICAgICAgICAgICAgZmlyc3QgPSAwOwogICAgICAgICAgICBsYXN0ID0gMDsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZpcnN0ID0gbmV3QXJyW25ld0Fyci5sZW5ndGggLSAxXS5EYXRhVmFsdWU7CiAgICAgICAgICAgIGxhc3QgPSBuZXdBcnJbMF0uRGF0YVZhbHVlOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IE1hdGguYWJzKGZpcnN0IC0gbGFzdCk7CiAgICAgICAgICB2YXIgc2VuID0gb3BlcmF0b3IuZ2V0U2Vuc29yKHNlbnNvcnMsICd0YWcnLCBpc0RhbSA/ICdkYW0tYWNjdW11bGF0ZS1kb3duLXNwZWVkJyA6ICdnYXRlLWFjY3VtdWxhdGUtZG93bi1zcGVlZCcpOwoKICAgICAgICAgIGlmIChzZW4gJiYgbmV3VmFsdWUgPiBzZW4udmFsdWUpIHsKICAgICAgICAgICAgb3BlcmF0b3IuZ2V0U2Vuc29yKHNlbnNvcnMsICd0YWcnLCBpc0RhbSA/ICdkYW0tYWNjdW11bGF0ZS1kb3duLXNwZWVkJyA6ICdnYXRlLWFjY3VtdWxhdGUtZG93bi1zcGVlZCcpLnZhbHVlID0gb3BlcmF0b3IuZml4KG5ld1ZhbHVlLCBzZW4ucHJlY2lzaW9uKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKGlzTGV2ZWwpIHsKICAgICAgICAgIHZhciBzdW0gPSAwOwogICAgICAgICAgdmFyIHRpbWUgPSAwOwogICAgICAgICAgbmV3QXJyID0gbmV3QXJyLnNsaWNlKG5ld0Fyci5sZW5ndGggLSAyMSA8IDAgPyAwIDogbmV3QXJyLmxlbmd0aCAtIDIxLCBuZXdBcnIubGVuZ3RoKTsKCiAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbmV3QXJyLmxlbmd0aDsgX2krKykgewogICAgICAgICAgICBpZiAoKG5ldyBEYXRlKG5ld0FycltuZXdBcnIubGVuZ3RoIC0gMV0uUmV2VGltZSkgLSBuZXcgRGF0ZShuZXdBcnJbX2ldLlJldlRpbWUpKSAvIDYwIC8gNjAgLyAxMDAwIDw9IDIpIHsKICAgICAgICAgICAgICBzdW0gKz0gbmV3QXJyW19pXS5EYXRhVmFsdWU7CiAgICAgICAgICAgICAgdGltZSsrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgc2Vuc29yLnNldFZhbHVlKHN1bSAvIHRpbWUpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICAvL+ato+W4uOaDheWGtQogICAgICAgIHZhciBicm9rZW4gPSBmYWxzZTsKCiAgICAgICAgZm9yICh2YXIgX2kyIGluIHNlbnNvcnMpIHsKICAgICAgICAgIGZvciAodmFyIGogaW4gcmVzdWx0KSB7CiAgICAgICAgICAgIGlmIChzZW5zb3JzW19pMl0ubmFtZSA9PT0gJ+awtOS9jScgJiYgc2Vuc29yc1tfaTJdLnNtb290aCkgY29udGludWU7CgogICAgICAgICAgICBpZiAoc2Vuc29yc1tfaTJdLmlkID09PSByZXN1bHRbal0uU2Vuc29ySUQgJiYgcmVzdWx0W2pdLkRhdGFWYWx1ZSA8IGNvbW1vbi5CT1VOREFSWSAvIDIgJiYgcmVzdWx0W2pdLkRhdGFWYWx1ZSAhPT0gY29tbW9uLklOVkFMSUQpIHsKICAgICAgICAgICAgICBpZiAoc2Vuc29yc1tfaTJdLmlkID09PSAnTUhTS1NZUDExMDAxJykgewogICAgICAgICAgICAgICAgc2Vuc29yc1tfaTJdLnNldFZhbHVlKHJlc3VsdFtqXS5EYXRhVmFsdWUpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgc2Vuc29yc1tfaTJdLnNldFZhbHVlKHJlc3VsdFtqXS5EYXRhVmFsdWUpOwoKICAgICAgICAgICAgICBzZW5zb3JzW19pMl0uc2V0VGltZShyZXN1bHRbal0uUmV2VGltZSk7IC8v5Yik5pat6Ziy5riX6YCP6Iac5piv5ZCm5o2f5Z2PCgoKICAgICAgICAgICAgICBpZiAoc2Vuc29yc1tfaTJdLmludmFsaWQpIHsKICAgICAgICAgICAgICAgIGlmIChzZW5zb3JzW19pMl0udmFsdWUgPiBzZW5zb3JzW19pMl0ubWluKSB7CiAgICAgICAgICAgICAgICAgIGJyb2tlbiA9IHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYnJva2VuJywgYnJva2VuKTsKICAgICAgfQoKICAgICAgY29tbW9uLnJlZnJlc2hTZW5zb3JzKHNlbnNvcnMpOwogICAgfTsKCiAgICByZXR1cm4ge307CiAgfQp9OwpleHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDs="},{"version":3,"sources":["App.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"app\">\n    <router-view/>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'App',\n    data() {\n      /**\n       * 成功获取数据后的处理函数\n       * @param result 从服务器获取的数据\n       */\n      const request = require('@/api/collection/request');\n      const common = require('@/api/collection/common');\n      const reservoir = require('@/api/collection/' + common.CURRENT_RESERVOIR + '/reservoir');\n      const sensorList = require('@/api/collection/' + common.CURRENT_RESERVOIR + '/sensorList');\n      const operator = require('@/api/collection/operator');\n\n\n      let sendRequest = function () {                     //周期发送数据请求\n        reservoir.sendInfo();\n        setInterval(reservoir.sendInfo, common.TIME_SPAN);\n      }();\n\n      window.doSuccess = function (result) {\n        if (!result) return;\n        let sensors = common.loadSensors();\n        if (!sensors) {\n          sensors = sensorList.createSensors();\n        }\n        if (result.length > 2 && result[result.length - 1].SensorID === result[0].SensorID) {   //长效情况处理，此时获取的是一个小时的历史数据\n          let sensor = operator.getSensor(sensors, 'id', result[0].SensorID);\n          let newArr = [];\n          for (let i = 0; i < result.length; i++) {\n            let value = parseFloat(result[i].DataValue);\n            if (value > sensor.low && value < sensor.high && (i > 0 && result[i].RevTime !== result[i - 1].RevTime)) {\n              newArr.push(result[i]);\n            }\n          }\n          let isDam = sensor && sensor.part.indexOf('dam') >= 0;\n          let isGate = sensor && sensor.part.indexOf('gate') >= 0;\n          let isLevel = sensor.name === '水位';\n          if (isDam || isGate) {\n            let first, last;\n\n            if (newArr.length < 2) {\n              first = 0;\n              last = 0;\n            } else {\n              first = newArr[newArr.length - 1].DataValue;\n              last = newArr[0].DataValue;\n            }\n            let newValue = Math.abs(first - last);\n\n            let sen = operator.getSensor(sensors, 'tag', isDam ? 'dam-accumulate-down-speed' : 'gate-accumulate-down-speed');\n            if (sen && newValue > sen.value) {\n              operator.getSensor(sensors, 'tag', isDam ? 'dam-accumulate-down-speed' :\n                'gate-accumulate-down-speed').value = operator.fix(newValue, sen.precision);\n            }\n          } else if (isLevel) {\n            let sum = 0;\n            let time = 0;\n            newArr = newArr.slice(newArr.length - 21 < 0 ? 0 : newArr.length - 21, newArr.length);\n            for (let i = 0; i < newArr.length; i++) {\n              if ((new Date(newArr[newArr.length - 1].RevTime) -\n                new Date(newArr[i].RevTime)) / 60 / 60 / 1000 <= 2) {\n                sum += newArr[i].DataValue;\n                time++;\n              }\n            }\n            sensor.setValue(sum / time);\n          }\n        } else {   //正常情况\n          let broken = false;\n          for (let i in sensors) {\n            for (let j in result) {\n              if (sensors[i].name === '水位' && sensors[i].smooth) continue;\n              if (sensors[i].id === result[j].SensorID && result[j].DataValue < common.BOUNDARY/2 && result[j].DataValue !== common.INVALID) {\n                if (sensors[i].id === 'MHSKSYP11001'){\n                  sensors[i].setValue(result[j].DataValue);\n                }\n                sensors[i].setValue(result[j].DataValue);\n                sensors[i].setTime(result[j].RevTime);\n\n                //判断防渗透膜是否损坏\n                if (sensors[i].invalid) {\n                  if (sensors[i].value > sensors[i].min) {\n                    broken = true;\n                  }\n                }\n              }\n            }\n          }\n          localStorage.setItem('broken', broken);\n        }\n        common.refreshSensors(sensors);\n\n      };\n\n      return {};\n    }\n  }\n</script>\n"],"sourceRoot":"src"}]}