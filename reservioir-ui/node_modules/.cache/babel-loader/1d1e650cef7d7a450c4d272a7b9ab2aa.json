{"remainingRequest":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\@jiaminghi\\data-view\\lib\\components\\scrollBoard\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\@jiaminghi\\data-view\\lib\\components\\scrollBoard\\src\\main.vue","mtime":1711181257466},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711181250741},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":1711181252330},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711181250741},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1711181252689}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKCJEOi9HcmFkdWF0aW9uUHJvamVjdC9maW5hbC9yZXNlcnZpb2lyL3Jlc2VydmlvaXItdWkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0IikuZGVmYXVsdDsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwOwoKcmVxdWlyZSgicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsbC5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qcyIpOwoKdmFyIF9hc3luY1RvR2VuZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiRDovR3JhZHVhdGlvblByb2plY3QvZmluYWwvcmVzZXJ2aW9pci9yZXNlcnZpb2lyLXVpL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IiKSk7Cgp2YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIkQ6L0dyYWR1YXRpb25Qcm9qZWN0L2ZpbmFsL3Jlc2VydmlvaXIvcmVzZXJ2aW9pci11aS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyIikpOwoKdmFyIF90b0NvbnN1bWFibGVBcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIkQ6L0dyYWR1YXRpb25Qcm9qZWN0L2ZpbmFsL3Jlc2VydmlvaXIvcmVzZXJ2aW9pci11aS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheSIpKTsKCnZhciBfYXV0b1Jlc2l6ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi4vLi4vLi4vbWl4aW4vYXV0b1Jlc2l6ZSIpKTsKCnZhciBfaW5kZXggPSByZXF1aXJlKCJAamlhbWluZ2hpL2NoYXJ0cy9saWIvdXRpbC9pbmRleCIpOwoKdmFyIF91dGlsID0gcmVxdWlyZSgiQGppYW1pbmdoaS9jLXJlbmRlci9saWIvcGx1Z2luL3V0aWwiKTsKCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCnZhciBfZGVmYXVsdDIgPSB7CiAgbmFtZTogJ0R2U2Nyb2xsQm9hcmQnLAogIG1peGluczogW19hdXRvUmVzaXplLmRlZmF1bHRdLAogIHByb3BzOiB7CiAgICBjb25maWc6IHsKICAgICAgdHlwZTogT2JqZWN0LAogICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4ge307CiAgICAgIH0KICAgIH0KICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICByZWY6ICdzY3JvbGwtYm9hcmQnLAogICAgICBkZWZhdWx0Q29uZmlnOiB7CiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIEJvYXJkIGhlYWRlcgogICAgICAgICAqIEB0eXBlIHtBcnJheTxTdHJpbmc+fQogICAgICAgICAqIEBkZWZhdWx0IGhlYWRlciA9IFtdCiAgICAgICAgICogQGV4YW1wbGUgaGVhZGVyID0gWydjb2x1bW4xJywgJ2NvbHVtbjInLCAnY29sdW1uMyddCiAgICAgICAgICovCiAgICAgICAgaGVhZGVyOiBbXSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIEJvYXJkIGRhdGEKICAgICAgICAgKiBAdHlwZSB7QXJyYXk8QXJyYXk+fQogICAgICAgICAqIEBkZWZhdWx0IGRhdGEgPSBbXQogICAgICAgICAqLwogICAgICAgIGRhdGE6IFtdLAoKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gUm93IG51bQogICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9CiAgICAgICAgICogQGRlZmF1bHQgcm93TnVtID0gNQogICAgICAgICAqLwogICAgICAgIHJvd051bTogNSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIEhlYWRlciBiYWNrZ3JvdW5kIGNvbG9yCiAgICAgICAgICogQHR5cGUge1N0cmluZ30KICAgICAgICAgKiBAZGVmYXVsdCBoZWFkZXJCR0MgPSAnIzAwQkFGRicKICAgICAgICAgKi8KICAgICAgICBoZWFkZXJCR0M6ICcjMDBCQUZGJywKCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIE9kZCByb3cgYmFja2dyb3VuZCBjb2xvcgogICAgICAgICAqIEB0eXBlIHtTdHJpbmd9CiAgICAgICAgICogQGRlZmF1bHQgb2RkUm93QkdDID0gJyMwMDNCNTEnCiAgICAgICAgICovCiAgICAgICAgb2RkUm93QkdDOiAnIzAwM0I1MScsCgogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBFdmVuIHJvdyBiYWNrZ3JvdW5kIGNvbG9yCiAgICAgICAgICogQHR5cGUge1N0cmluZ30KICAgICAgICAgKiBAZGVmYXVsdCBldmVuUm93QkdDID0gJyMwMDNCNTEnCiAgICAgICAgICovCiAgICAgICAgZXZlblJvd0JHQzogJyMwQTI3MzInLAoKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2Nyb2xsIHdhaXQgdGltZQogICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9CiAgICAgICAgICogQGRlZmF1bHQgd2FpdFRpbWUgPSAyMDAwCiAgICAgICAgICovCiAgICAgICAgd2FpdFRpbWU6IDIwMDAsCgogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBIZWFkZXIgaGVpZ2h0CiAgICAgICAgICogQHR5cGUge051bWJlcn0KICAgICAgICAgKiBAZGVmYXVsdCBoZWFkZXJIZWlnaHQgPSAzNQogICAgICAgICAqLwogICAgICAgIGhlYWRlckhlaWdodDogMzUsCgogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBDb2x1bW4gd2lkdGgKICAgICAgICAgKiBAdHlwZSB7QXJyYXk8TnVtYmVyPn0KICAgICAgICAgKiBAZGVmYXVsdCBjb2x1bW5XaWR0aCA9IFtdCiAgICAgICAgICovCiAgICAgICAgY29sdW1uV2lkdGg6IFtdLAoKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ29sdW1uIGFsaWduCiAgICAgICAgICogQHR5cGUge0FycmF5PFN0cmluZz59CiAgICAgICAgICogQGRlZmF1bHQgYWxpZ24gPSBbXQogICAgICAgICAqIEBleGFtcGxlIGFsaWduID0gWydsZWZ0JywgJ2NlbnRlcicsICdyaWdodCddCiAgICAgICAgICovCiAgICAgICAgYWxpZ246IFtdLAoKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2hvdyBpbmRleAogICAgICAgICAqIEB0eXBlIHtCb29sZWFufQogICAgICAgICAqIEBkZWZhdWx0IGluZGV4ID0gZmFsc2UKICAgICAgICAgKi8KICAgICAgICBpbmRleDogZmFsc2UsCgogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBpbmRleCBIZWFkZXIKICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICAgICAqIEBkZWZhdWx0IGluZGV4SGVhZGVyID0gJyMnCiAgICAgICAgICovCiAgICAgICAgaW5kZXhIZWFkZXI6ICcjJywKCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIENhcm91c2VsIHR5cGUKICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICAgICAqIEBkZWZhdWx0IGNhcm91c2VsID0gJ3NpbmdsZScKICAgICAgICAgKiBAZXhhbXBsZSBjYXJvdXNlbCA9ICdzaW5nbGUnIHwgJ3BhZ2UnCiAgICAgICAgICovCiAgICAgICAgY2Fyb3VzZWw6ICdzaW5nbGUnLAoKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gUGF1c2Ugc2Nyb2xsIHdoZW4gbW91c2UgaG92ZXJlZAogICAgICAgICAqIEB0eXBlIHtCb29sZWFufQogICAgICAgICAqIEBkZWZhdWx0IGhvdmVyUGF1c2UgPSB0cnVlCiAgICAgICAgICogQGV4YW1wbGUgaG92ZXJQYXVzZSA9IHRydWUgfCBmYWxzZQogICAgICAgICAqLwogICAgICAgIGhvdmVyUGF1c2U6IHRydWUKICAgICAgfSwKICAgICAgbWVyZ2VkQ29uZmlnOiBudWxsLAogICAgICBoZWFkZXI6IFtdLAogICAgICByb3dzRGF0YTogW10sCiAgICAgIHJvd3M6IFtdLAogICAgICB3aWR0aHM6IFtdLAogICAgICBoZWlnaHRzOiBbXSwKICAgICAgYXZnSGVpZ2h0OiAwLAogICAgICBhbGlnbnM6IFtdLAogICAgICBhbmltYXRpb25JbmRleDogMCwKICAgICAgYW5pbWF0aW9uSGFuZGxlcjogJycsCiAgICAgIHVwZGF0ZXI6IDAsCiAgICAgIG5lZWRDYWxjOiBmYWxzZQogICAgfTsKICB9LAogIHdhdGNoOiB7CiAgICBjb25maWc6IGZ1bmN0aW9uIGNvbmZpZygpIHsKICAgICAgdmFyIHN0b3BBbmltYXRpb24gPSB0aGlzLnN0b3BBbmltYXRpb24sCiAgICAgICAgICBjYWxjRGF0YSA9IHRoaXMuY2FsY0RhdGE7CiAgICAgIHN0b3BBbmltYXRpb24oKTsKICAgICAgdGhpcy5hbmltYXRpb25JbmRleCA9IDA7CiAgICAgIGNhbGNEYXRhKCk7CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBoYW5kbGVIb3ZlcjogZnVuY3Rpb24gaGFuZGxlSG92ZXIoZW50ZXIsIHJpLCBjaSwgcm93LCBjZWlsKSB7CiAgICAgIHZhciBtZXJnZWRDb25maWcgPSB0aGlzLm1lcmdlZENvbmZpZywKICAgICAgICAgIGVtaXRFdmVudCA9IHRoaXMuZW1pdEV2ZW50LAogICAgICAgICAgc3RvcEFuaW1hdGlvbiA9IHRoaXMuc3RvcEFuaW1hdGlvbiwKICAgICAgICAgIGFuaW1hdGlvbiA9IHRoaXMuYW5pbWF0aW9uOwogICAgICBpZiAoZW50ZXIpIGVtaXRFdmVudCgnbW91c2VvdmVyJywgcmksIGNpLCByb3csIGNlaWwpOwogICAgICBpZiAoIW1lcmdlZENvbmZpZy5ob3ZlclBhdXNlKSByZXR1cm47CgogICAgICBpZiAoZW50ZXIpIHsKICAgICAgICBzdG9wQW5pbWF0aW9uKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYW5pbWF0aW9uKHRydWUpOwogICAgICB9CiAgICB9LAogICAgYWZ0ZXJBdXRvUmVzaXplTWl4aW5Jbml0OiBmdW5jdGlvbiBhZnRlckF1dG9SZXNpemVNaXhpbkluaXQoKSB7CiAgICAgIHZhciBjYWxjRGF0YSA9IHRoaXMuY2FsY0RhdGE7CiAgICAgIGNhbGNEYXRhKCk7CiAgICB9LAogICAgb25SZXNpemU6IGZ1bmN0aW9uIG9uUmVzaXplKCkgewogICAgICB2YXIgbWVyZ2VkQ29uZmlnID0gdGhpcy5tZXJnZWRDb25maWcsCiAgICAgICAgICBjYWxjV2lkdGhzID0gdGhpcy5jYWxjV2lkdGhzLAogICAgICAgICAgY2FsY0hlaWdodHMgPSB0aGlzLmNhbGNIZWlnaHRzOwogICAgICBpZiAoIW1lcmdlZENvbmZpZykgcmV0dXJuOwogICAgICBjYWxjV2lkdGhzKCk7CiAgICAgIGNhbGNIZWlnaHRzKCk7CiAgICB9LAogICAgY2FsY0RhdGE6IGZ1bmN0aW9uIGNhbGNEYXRhKCkgewogICAgICB2YXIgbWVyZ2VDb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnLAogICAgICAgICAgY2FsY0hlYWRlckRhdGEgPSB0aGlzLmNhbGNIZWFkZXJEYXRhLAogICAgICAgICAgY2FsY1Jvd3NEYXRhID0gdGhpcy5jYWxjUm93c0RhdGE7CiAgICAgIG1lcmdlQ29uZmlnKCk7CiAgICAgIGNhbGNIZWFkZXJEYXRhKCk7CiAgICAgIGNhbGNSb3dzRGF0YSgpOwogICAgICB2YXIgY2FsY1dpZHRocyA9IHRoaXMuY2FsY1dpZHRocywKICAgICAgICAgIGNhbGNIZWlnaHRzID0gdGhpcy5jYWxjSGVpZ2h0cywKICAgICAgICAgIGNhbGNBbGlnbnMgPSB0aGlzLmNhbGNBbGlnbnM7CiAgICAgIGNhbGNXaWR0aHMoKTsKICAgICAgY2FsY0hlaWdodHMoKTsKICAgICAgY2FsY0FsaWducygpOwogICAgICB2YXIgYW5pbWF0aW9uID0gdGhpcy5hbmltYXRpb247CiAgICAgIGFuaW1hdGlvbih0cnVlKTsKICAgIH0sCiAgICBtZXJnZUNvbmZpZzogZnVuY3Rpb24gbWVyZ2VDb25maWcoKSB7CiAgICAgIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZywKICAgICAgICAgIGRlZmF1bHRDb25maWcgPSB0aGlzLmRlZmF1bHRDb25maWc7CiAgICAgIHRoaXMubWVyZ2VkQ29uZmlnID0gKDAsIF9pbmRleC5kZWVwTWVyZ2UpKCgwLCBfdXRpbC5kZWVwQ2xvbmUpKGRlZmF1bHRDb25maWcsIHRydWUpLCBjb25maWcgfHwge30pOwogICAgfSwKICAgIGNhbGNIZWFkZXJEYXRhOiBmdW5jdGlvbiBjYWxjSGVhZGVyRGF0YSgpIHsKICAgICAgdmFyIF90aGlzJG1lcmdlZENvbmZpZyA9IHRoaXMubWVyZ2VkQ29uZmlnLAogICAgICAgICAgaGVhZGVyID0gX3RoaXMkbWVyZ2VkQ29uZmlnLmhlYWRlciwKICAgICAgICAgIGluZGV4ID0gX3RoaXMkbWVyZ2VkQ29uZmlnLmluZGV4LAogICAgICAgICAgaW5kZXhIZWFkZXIgPSBfdGhpcyRtZXJnZWRDb25maWcuaW5kZXhIZWFkZXI7CgogICAgICBpZiAoIWhlYWRlci5sZW5ndGgpIHsKICAgICAgICB0aGlzLmhlYWRlciA9IFtdOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgaGVhZGVyID0gKDAsIF90b0NvbnN1bWFibGVBcnJheTIuZGVmYXVsdCkoaGVhZGVyKTsKICAgICAgaWYgKGluZGV4KSBoZWFkZXIudW5zaGlmdChpbmRleEhlYWRlcik7CiAgICAgIHRoaXMuaGVhZGVyID0gaGVhZGVyOwogICAgfSwKICAgIGNhbGNSb3dzRGF0YTogZnVuY3Rpb24gY2FsY1Jvd3NEYXRhKCkgewogICAgICB2YXIgX3RoaXMkbWVyZ2VkQ29uZmlnMiA9IHRoaXMubWVyZ2VkQ29uZmlnLAogICAgICAgICAgZGF0YSA9IF90aGlzJG1lcmdlZENvbmZpZzIuZGF0YSwKICAgICAgICAgIGluZGV4ID0gX3RoaXMkbWVyZ2VkQ29uZmlnMi5pbmRleCwKICAgICAgICAgIGhlYWRlckJHQyA9IF90aGlzJG1lcmdlZENvbmZpZzIuaGVhZGVyQkdDLAogICAgICAgICAgcm93TnVtID0gX3RoaXMkbWVyZ2VkQ29uZmlnMi5yb3dOdW07CgogICAgICBpZiAoaW5kZXgpIHsKICAgICAgICBkYXRhID0gZGF0YS5tYXAoZnVuY3Rpb24gKHJvdywgaSkgewogICAgICAgICAgcm93ID0gKDAsIF90b0NvbnN1bWFibGVBcnJheTIuZGVmYXVsdCkocm93KTsKICAgICAgICAgIHZhciBpbmRleFRhZyA9ICI8c3BhbiBjbGFzcz1cImluZGV4XCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiAiLmNvbmNhdChoZWFkZXJCR0MsICI7XCI+IikuY29uY2F0KGkgKyAxLCAiPC9zcGFuPiIpOwogICAgICAgICAgcm93LnVuc2hpZnQoaW5kZXhUYWcpOwogICAgICAgICAgcmV0dXJuIHJvdzsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgZGF0YSA9IGRhdGEubWFwKGZ1bmN0aW9uIChjZWlscywgaSkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBjZWlsczogY2VpbHMsCiAgICAgICAgICByb3dJbmRleDogaQogICAgICAgIH07CiAgICAgIH0pOwogICAgICB2YXIgcm93TGVuZ3RoID0gZGF0YS5sZW5ndGg7CgogICAgICBpZiAocm93TGVuZ3RoID4gcm93TnVtICYmIHJvd0xlbmd0aCA8IDIgKiByb3dOdW0pIHsKICAgICAgICBkYXRhID0gW10uY29uY2F0KCgwLCBfdG9Db25zdW1hYmxlQXJyYXkyLmRlZmF1bHQpKGRhdGEpLCAoMCwgX3RvQ29uc3VtYWJsZUFycmF5Mi5kZWZhdWx0KShkYXRhKSk7CiAgICAgIH0KCiAgICAgIGRhdGEgPSBkYXRhLm1hcChmdW5jdGlvbiAoZCwgaSkgewogICAgICAgIHJldHVybiAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHt9LCBkKSwge30sIHsKICAgICAgICAgIHNjcm9sbDogaQogICAgICAgIH0pOwogICAgICB9KTsKICAgICAgdGhpcy5yb3dzRGF0YSA9IGRhdGE7CiAgICAgIHRoaXMucm93cyA9IGRhdGE7CiAgICB9LAogICAgY2FsY1dpZHRoczogZnVuY3Rpb24gY2FsY1dpZHRocygpIHsKICAgICAgdmFyIHdpZHRoID0gdGhpcy53aWR0aCwKICAgICAgICAgIG1lcmdlZENvbmZpZyA9IHRoaXMubWVyZ2VkQ29uZmlnLAogICAgICAgICAgcm93c0RhdGEgPSB0aGlzLnJvd3NEYXRhOwogICAgICB2YXIgY29sdW1uV2lkdGggPSBtZXJnZWRDb25maWcuY29sdW1uV2lkdGgsCiAgICAgICAgICBoZWFkZXIgPSBtZXJnZWRDb25maWcuaGVhZGVyOwogICAgICB2YXIgdXNlZFdpZHRoID0gY29sdW1uV2lkdGgucmVkdWNlKGZ1bmN0aW9uIChhbGwsIHcpIHsKICAgICAgICByZXR1cm4gYWxsICsgdzsKICAgICAgfSwgMCk7CiAgICAgIHZhciBjb2x1bW5OdW0gPSAwOwoKICAgICAgaWYgKHJvd3NEYXRhWzBdKSB7CiAgICAgICAgY29sdW1uTnVtID0gcm93c0RhdGFbMF0uY2VpbHMubGVuZ3RoOwogICAgICB9IGVsc2UgaWYgKGhlYWRlci5sZW5ndGgpIHsKICAgICAgICBjb2x1bW5OdW0gPSBoZWFkZXIubGVuZ3RoOwogICAgICB9CgogICAgICB2YXIgYXZnV2lkdGggPSAod2lkdGggLSB1c2VkV2lkdGgpIC8gKGNvbHVtbk51bSAtIGNvbHVtbldpZHRoLmxlbmd0aCk7CiAgICAgIHZhciB3aWR0aHMgPSBuZXcgQXJyYXkoY29sdW1uTnVtKS5maWxsKGF2Z1dpZHRoKTsKICAgICAgdGhpcy53aWR0aHMgPSAoMCwgX2luZGV4LmRlZXBNZXJnZSkod2lkdGhzLCBjb2x1bW5XaWR0aCk7CiAgICB9LAogICAgY2FsY0hlaWdodHM6IGZ1bmN0aW9uIGNhbGNIZWlnaHRzKCkgewogICAgICB2YXIgb25yZXNpemUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlOwogICAgICB2YXIgaGVpZ2h0ID0gdGhpcy5oZWlnaHQsCiAgICAgICAgICBtZXJnZWRDb25maWcgPSB0aGlzLm1lcmdlZENvbmZpZywKICAgICAgICAgIGhlYWRlciA9IHRoaXMuaGVhZGVyOwogICAgICB2YXIgaGVhZGVySGVpZ2h0ID0gbWVyZ2VkQ29uZmlnLmhlYWRlckhlaWdodCwKICAgICAgICAgIHJvd051bSA9IG1lcmdlZENvbmZpZy5yb3dOdW0sCiAgICAgICAgICBkYXRhID0gbWVyZ2VkQ29uZmlnLmRhdGE7CiAgICAgIHZhciBhbGxIZWlnaHQgPSBoZWlnaHQ7CiAgICAgIGlmIChoZWFkZXIubGVuZ3RoKSBhbGxIZWlnaHQgLT0gaGVhZGVySGVpZ2h0OwogICAgICB2YXIgYXZnSGVpZ2h0ID0gYWxsSGVpZ2h0IC8gcm93TnVtOwogICAgICB0aGlzLmF2Z0hlaWdodCA9IGF2Z0hlaWdodDsKICAgICAgaWYgKCFvbnJlc2l6ZSkgdGhpcy5oZWlnaHRzID0gbmV3IEFycmF5KGRhdGEubGVuZ3RoKS5maWxsKGF2Z0hlaWdodCk7CiAgICB9LAogICAgY2FsY0FsaWduczogZnVuY3Rpb24gY2FsY0FsaWducygpIHsKICAgICAgdmFyIGhlYWRlciA9IHRoaXMuaGVhZGVyLAogICAgICAgICAgbWVyZ2VkQ29uZmlnID0gdGhpcy5tZXJnZWRDb25maWc7CiAgICAgIHZhciBjb2x1bW5OdW0gPSBoZWFkZXIubGVuZ3RoOwogICAgICB2YXIgYWxpZ25zID0gbmV3IEFycmF5KGNvbHVtbk51bSkuZmlsbCgnbGVmdCcpOwogICAgICB2YXIgYWxpZ24gPSBtZXJnZWRDb25maWcuYWxpZ247CiAgICAgIHRoaXMuYWxpZ25zID0gKDAsIF9pbmRleC5kZWVwTWVyZ2UpKGFsaWducywgYWxpZ24pOwogICAgfSwKICAgIGFuaW1hdGlvbjogZnVuY3Rpb24gYW5pbWF0aW9uKCkgewogICAgICB2YXIgX2FyZ3VtZW50cyA9IGFyZ3VtZW50cywKICAgICAgICAgIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiAoMCwgX2FzeW5jVG9HZW5lcmF0b3IyLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgX3RoaXMkaGVpZ2h0czsKCiAgICAgICAgdmFyIHN0YXJ0LCBuZWVkQ2FsYywgY2FsY0hlaWdodHMsIGNhbGNSb3dzRGF0YSwgYXZnSGVpZ2h0LCBhbmltYXRpb25JbmRleCwgbWVyZ2VkQ29uZmlnLCByb3dzRGF0YSwgYW5pbWF0aW9uLCB1cGRhdGVyLCB3YWl0VGltZSwgY2Fyb3VzZWwsIHJvd051bSwgcm93TGVuZ3RoLCBhbmltYXRpb25OdW0sIHJvd3MsIGJhY2s7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgc3RhcnQgPSBfYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgX2FyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3VtZW50c1swXSA6IGZhbHNlOwogICAgICAgICAgICAgICAgbmVlZENhbGMgPSBfdGhpcy5uZWVkQ2FsYywgY2FsY0hlaWdodHMgPSBfdGhpcy5jYWxjSGVpZ2h0cywgY2FsY1Jvd3NEYXRhID0gX3RoaXMuY2FsY1Jvd3NEYXRhOwoKICAgICAgICAgICAgICAgIGlmIChuZWVkQ2FsYykgewogICAgICAgICAgICAgICAgICBjYWxjUm93c0RhdGEoKTsKICAgICAgICAgICAgICAgICAgY2FsY0hlaWdodHMoKTsKICAgICAgICAgICAgICAgICAgX3RoaXMubmVlZENhbGMgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBhdmdIZWlnaHQgPSBfdGhpcy5hdmdIZWlnaHQsIGFuaW1hdGlvbkluZGV4ID0gX3RoaXMuYW5pbWF0aW9uSW5kZXgsIG1lcmdlZENvbmZpZyA9IF90aGlzLm1lcmdlZENvbmZpZywgcm93c0RhdGEgPSBfdGhpcy5yb3dzRGF0YSwgYW5pbWF0aW9uID0gX3RoaXMuYW5pbWF0aW9uLCB1cGRhdGVyID0gX3RoaXMudXBkYXRlcjsKICAgICAgICAgICAgICAgIHdhaXRUaW1lID0gbWVyZ2VkQ29uZmlnLndhaXRUaW1lLCBjYXJvdXNlbCA9IG1lcmdlZENvbmZpZy5jYXJvdXNlbCwgcm93TnVtID0gbWVyZ2VkQ29uZmlnLnJvd051bTsKICAgICAgICAgICAgICAgIHJvd0xlbmd0aCA9IHJvd3NEYXRhLmxlbmd0aDsKCiAgICAgICAgICAgICAgICBpZiAoIShyb3dOdW0gPj0gcm93TGVuZ3RoKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIGlmICghc3RhcnQpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQocmVzb2x2ZSwgd2FpdFRpbWUpOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBpZiAoISh1cGRhdGVyICE9PSBfdGhpcy51cGRhdGVyKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgYW5pbWF0aW9uTnVtID0gY2Fyb3VzZWwgPT09ICdzaW5nbGUnID8gMSA6IHJvd051bTsKICAgICAgICAgICAgICAgIHJvd3MgPSByb3dzRGF0YS5zbGljZShhbmltYXRpb25JbmRleCk7CiAgICAgICAgICAgICAgICByb3dzLnB1c2guYXBwbHkocm93cywgKDAsIF90b0NvbnN1bWFibGVBcnJheTIuZGVmYXVsdCkocm93c0RhdGEuc2xpY2UoMCwgYW5pbWF0aW9uSW5kZXgpKSk7CiAgICAgICAgICAgICAgICBfdGhpcy5yb3dzID0gcm93cy5zbGljZSgwLCBjYXJvdXNlbCA9PT0gJ3BhZ2UnID8gcm93TnVtICogMiA6IHJvd051bSArIDEpOwogICAgICAgICAgICAgICAgX3RoaXMuaGVpZ2h0cyA9IG5ldyBBcnJheShyb3dMZW5ndGgpLmZpbGwoYXZnSGVpZ2h0KTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMDsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChyZXNvbHZlLCAzMDApOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjA6CiAgICAgICAgICAgICAgICBpZiAoISh1cGRhdGVyICE9PSBfdGhpcy51cGRhdGVyKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgKF90aGlzJGhlaWdodHMgPSBfdGhpcy5oZWlnaHRzKS5zcGxpY2UuYXBwbHkoX3RoaXMkaGVpZ2h0cywgWzAsIGFuaW1hdGlvbk51bV0uY29uY2F0KCgwLCBfdG9Db25zdW1hYmxlQXJyYXkyLmRlZmF1bHQpKG5ldyBBcnJheShhbmltYXRpb25OdW0pLmZpbGwoMCkpKSk7CgogICAgICAgICAgICAgICAgYW5pbWF0aW9uSW5kZXggKz0gYW5pbWF0aW9uTnVtOwogICAgICAgICAgICAgICAgYmFjayA9IGFuaW1hdGlvbkluZGV4IC0gcm93TGVuZ3RoOwogICAgICAgICAgICAgICAgaWYgKGJhY2sgPj0gMCkgYW5pbWF0aW9uSW5kZXggPSBiYWNrOwogICAgICAgICAgICAgICAgX3RoaXMuYW5pbWF0aW9uSW5kZXggPSBhbmltYXRpb25JbmRleDsKICAgICAgICAgICAgICAgIF90aGlzLmFuaW1hdGlvbkhhbmRsZXIgPSBzZXRUaW1lb3V0KGFuaW1hdGlvbiwgd2FpdFRpbWUgLSAzMDApOwoKICAgICAgICAgICAgICBjYXNlIDI4OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIHN0b3BBbmltYXRpb246IGZ1bmN0aW9uIHN0b3BBbmltYXRpb24oKSB7CiAgICAgIHZhciBhbmltYXRpb25IYW5kbGVyID0gdGhpcy5hbmltYXRpb25IYW5kbGVyLAogICAgICAgICAgdXBkYXRlciA9IHRoaXMudXBkYXRlcjsKICAgICAgdGhpcy51cGRhdGVyID0gKHVwZGF0ZXIgKyAxKSAlIDk5OTk5OTsKICAgICAgaWYgKCFhbmltYXRpb25IYW5kbGVyKSByZXR1cm47CiAgICAgIGNsZWFyVGltZW91dChhbmltYXRpb25IYW5kbGVyKTsKICAgIH0sCiAgICBlbWl0RXZlbnQ6IGZ1bmN0aW9uIGVtaXRFdmVudCh0eXBlLCByaSwgY2ksIHJvdywgY2VpbCkgewogICAgICB2YXIgY2VpbHMgPSByb3cuY2VpbHMsCiAgICAgICAgICByb3dJbmRleCA9IHJvdy5yb3dJbmRleDsKICAgICAgdGhpcy4kZW1pdCh0eXBlLCB7CiAgICAgICAgcm93OiBjZWlscywKICAgICAgICBjZWlsOiBjZWlsLAogICAgICAgIHJvd0luZGV4OiByb3dJbmRleCwKICAgICAgICBjb2x1bW5JbmRleDogY2kKICAgICAgfSk7CiAgICB9LAogICAgdXBkYXRlUm93czogZnVuY3Rpb24gdXBkYXRlUm93cyhyb3dzLCBhbmltYXRpb25JbmRleCkgewogICAgICB2YXIgbWVyZ2VkQ29uZmlnID0gdGhpcy5tZXJnZWRDb25maWcsCiAgICAgICAgICBhbmltYXRpb25IYW5kbGVyID0gdGhpcy5hbmltYXRpb25IYW5kbGVyLAogICAgICAgICAgYW5pbWF0aW9uID0gdGhpcy5hbmltYXRpb247CiAgICAgIHRoaXMubWVyZ2VkQ29uZmlnID0gKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKCgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwgbWVyZ2VkQ29uZmlnKSwge30sIHsKICAgICAgICBkYXRhOiAoMCwgX3RvQ29uc3VtYWJsZUFycmF5Mi5kZWZhdWx0KShyb3dzKQogICAgICB9KTsKICAgICAgdGhpcy5uZWVkQ2FsYyA9IHRydWU7CiAgICAgIGlmICh0eXBlb2YgYW5pbWF0aW9uSW5kZXggPT09ICdudW1iZXInKSB0aGlzLmFuaW1hdGlvbkluZGV4ID0gYW5pbWF0aW9uSW5kZXg7CiAgICAgIGlmICghYW5pbWF0aW9uSGFuZGxlcikgYW5pbWF0aW9uKHRydWUpOwogICAgfQogIH0sCiAgZGVzdHJveWVkOiBmdW5jdGlvbiBkZXN0cm95ZWQoKSB7CiAgICB2YXIgc3RvcEFuaW1hdGlvbiA9IHRoaXMuc3RvcEFuaW1hdGlvbjsKICAgIHN0b3BBbmltYXRpb24oKTsKICB9Cn07CmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0Mjs="},{"version":3,"sources":["main.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"dv-scroll-board\" :ref=\"ref\">\n    <div class=\"header\" v-if=\"header.length && mergedConfig\" :style=\"`background-color: ${mergedConfig.headerBGC};`\">\n      <div\n        class=\"header-item\"\n        v-for=\"(headerItem, i) in header\"\n        :key=\"`${headerItem}${i}`\"\n        :style=\"`\n          height: ${mergedConfig.headerHeight}px;\n          line-height: ${mergedConfig.headerHeight}px;\n          width: ${widths[i]}px;\n        `\"\n        :align=\"aligns[i]\"\n        v-html=\"headerItem\"\n      />\n    </div>\n\n    <div\n      v-if=\"mergedConfig\"\n      class=\"rows\"\n      :style=\"`height: ${height - (header.length ? mergedConfig.headerHeight : 0)}px;`\"\n    >\n      <div\n        class=\"row-item\"\n        v-for=\"(row, ri) in rows\"\n        :key=\"`${row.toString()}${row.scroll}`\"\n        :style=\"`\n          height: ${heights[ri]}px;\n          line-height: ${heights[ri]}px;\n          background-color: ${mergedConfig[row.rowIndex % 2 === 0 ? 'evenRowBGC' : 'oddRowBGC']};\n        `\"\n      >\n        <div\n          class=\"ceil\"\n          v-for=\"(ceil, ci) in row.ceils\"\n          :key=\"`${ceil}${ri}${ci}`\"\n          :style=\"`width: ${widths[ci]}px;`\"\n          :align=\"aligns[ci]\"\n          v-html=\"ceil\"\n          @click=\"emitEvent('click', ri, ci, row, ceil)\"\n          @mouseenter=\"handleHover(true, ri, ci, row, ceil)\"\n          @mouseleave=\"handleHover(false)\"\n        />\n\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvScrollBoard',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      ref: 'scroll-board',\n\n      defaultConfig: {\n        /**\n         * @description Board header\n         * @type {Array<String>}\n         * @default header = []\n         * @example header = ['column1', 'column2', 'column3']\n         */\n        header: [],\n        /**\n         * @description Board data\n         * @type {Array<Array>}\n         * @default data = []\n         */\n        data: [],\n        /**\n         * @description Row num\n         * @type {Number}\n         * @default rowNum = 5\n         */\n        rowNum: 5,\n        /**\n         * @description Header background color\n         * @type {String}\n         * @default headerBGC = '#00BAFF'\n         */\n        headerBGC: '#00BAFF',\n        /**\n         * @description Odd row background color\n         * @type {String}\n         * @default oddRowBGC = '#003B51'\n         */\n        oddRowBGC: '#003B51',\n        /**\n         * @description Even row background color\n         * @type {String}\n         * @default evenRowBGC = '#003B51'\n         */\n        evenRowBGC: '#0A2732',\n        /**\n         * @description Scroll wait time\n         * @type {Number}\n         * @default waitTime = 2000\n         */\n        waitTime: 2000,\n        /**\n         * @description Header height\n         * @type {Number}\n         * @default headerHeight = 35\n         */\n        headerHeight: 35,\n        /**\n         * @description Column width\n         * @type {Array<Number>}\n         * @default columnWidth = []\n         */\n        columnWidth: [],\n        /**\n         * @description Column align\n         * @type {Array<String>}\n         * @default align = []\n         * @example align = ['left', 'center', 'right']\n         */\n        align: [],\n        /**\n         * @description Show index\n         * @type {Boolean}\n         * @default index = false\n         */\n        index: false,\n        /**\n         * @description index Header\n         * @type {String}\n         * @default indexHeader = '#'\n         */\n        indexHeader: '#',\n        /**\n         * @description Carousel type\n         * @type {String}\n         * @default carousel = 'single'\n         * @example carousel = 'single' | 'page'\n         */\n        carousel: 'single',\n        /**\n         * @description Pause scroll when mouse hovered\n         * @type {Boolean}\n         * @default hoverPause = true\n         * @example hoverPause = true | false\n         */\n        hoverPause: true\n      },\n\n      mergedConfig: null,\n\n      header: [],\n\n      rowsData: [],\n\n      rows: [],\n\n      widths: [],\n\n      heights: [],\n\n      avgHeight: 0,\n\n      aligns: [],\n\n      animationIndex: 0,\n\n      animationHandler: '',\n\n      updater: 0,\n\n      needCalc: false\n    }\n  },\n  watch: {\n    config () {\n      const { stopAnimation, calcData } = this\n\n      stopAnimation()\n\n      this.animationIndex = 0\n\n      calcData()\n    }\n  },\n  methods: {\n    handleHover(enter, ri, ci, row, ceil){\n      const { mergedConfig, emitEvent, stopAnimation, animation } = this\n\n      if (enter) emitEvent('mouseover', ri, ci, row, ceil)\n      if (!mergedConfig.hoverPause) return\n\n      if (enter) {\n        stopAnimation()\n      } else {\n        animation(true)\n      }\n    },\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { mergedConfig, calcWidths, calcHeights } = this\n\n      if (!mergedConfig) return\n\n      calcWidths()\n\n      calcHeights()\n    },\n    calcData () {\n      const { mergeConfig, calcHeaderData, calcRowsData } = this\n\n      mergeConfig()\n\n      calcHeaderData()\n\n      calcRowsData()\n\n      const { calcWidths, calcHeights, calcAligns } = this\n\n      calcWidths()\n\n      calcHeights()\n\n      calcAligns()\n\n      const { animation } = this\n\n      animation(true)\n    },\n    mergeConfig () {\n      let { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    calcHeaderData () {\n      let { header, index, indexHeader} = this.mergedConfig\n\n      if (!header.length) {\n        this.header = []\n\n        return\n      }\n\n      header = [...header]\n\n      if (index) header.unshift(indexHeader)\n\n      this.header = header\n    },\n    calcRowsData () {\n      let { data, index, headerBGC, rowNum } = this.mergedConfig\n\n      if (index) {\n        data = data.map((row, i) => {\n          row = [...row]\n\n          const indexTag = `<span class=\"index\" style=\"background-color: ${headerBGC};\">${i + 1}</span>`\n\n          row.unshift(indexTag)\n\n          return row\n        })\n      }\n\n      data = data.map((ceils, i) => ({ ceils, rowIndex: i }))\n\n      const rowLength = data.length\n\n      if (rowLength > rowNum && rowLength < 2 * rowNum) {\n        data = [...data, ...data]\n      }\n\n      data = data.map((d, i) => ({ ...d, scroll: i }))\n\n      this.rowsData = data\n      this.rows = data\n    },\n    calcWidths () {\n      const { width, mergedConfig, rowsData } = this\n\n      const { columnWidth, header } = mergedConfig\n\n      const usedWidth = columnWidth.reduce((all, w) => all + w, 0)\n\n      let columnNum = 0\n      if (rowsData[0]) {\n        columnNum = rowsData[0].ceils.length\n      } else if (header.length) {\n        columnNum = header.length\n      }\n\n      const avgWidth = (width - usedWidth) / (columnNum - columnWidth.length)\n\n      const widths = new Array(columnNum).fill(avgWidth)\n\n      this.widths = deepMerge(widths, columnWidth)\n    },\n    calcHeights (onresize = false) {\n      const { height, mergedConfig, header } = this\n\n      const { headerHeight, rowNum, data } = mergedConfig\n\n      let allHeight = height\n\n      if (header.length) allHeight -= headerHeight\n\n      const avgHeight = allHeight / rowNum\n\n      this.avgHeight = avgHeight\n\n      if (!onresize) this.heights = new Array(data.length).fill(avgHeight)\n    },\n    calcAligns () {\n      const { header, mergedConfig } = this\n\n      const columnNum = header.length\n\n      let aligns = new Array(columnNum).fill('left')\n\n      const { align } = mergedConfig\n\n      this.aligns = deepMerge(aligns, align)\n    },\n    async animation (start = false) {\n      const { needCalc, calcHeights, calcRowsData } = this\n\n      if (needCalc) {\n        calcRowsData()\n        calcHeights()\n        this.needCalc = false\n      }\n\n      let { avgHeight, animationIndex, mergedConfig, rowsData, animation, updater } = this\n\n      const { waitTime, carousel, rowNum } = mergedConfig\n\n      const rowLength = rowsData.length\n\n      if (rowNum >= rowLength) return\n\n      if (start) {\n        await new Promise(resolve => setTimeout(resolve, waitTime))\n        if (updater !== this.updater) return\n      }\n\n      const animationNum = carousel === 'single' ? 1 : rowNum\n\n      let rows = rowsData.slice(animationIndex)\n      rows.push(...rowsData.slice(0, animationIndex))\n\n      this.rows = rows.slice(0, carousel === 'page' ? rowNum * 2 : rowNum + 1)\n      this.heights = new Array(rowLength).fill(avgHeight)\n\n      await new Promise(resolve => setTimeout(resolve, 300))\n      if (updater !== this.updater) return\n\n      this.heights.splice(0, animationNum, ...new Array(animationNum).fill(0))\n\n      animationIndex += animationNum\n\n      const back = animationIndex - rowLength\n      if (back >= 0) animationIndex = back\n\n      this.animationIndex = animationIndex\n      this.animationHandler = setTimeout(animation, waitTime - 300)\n    },\n    stopAnimation () {\n      const { animationHandler, updater } = this\n\n      this.updater = (updater + 1) % 999999\n\n      if (!animationHandler) return\n\n      clearTimeout(animationHandler)\n    },\n    emitEvent (type, ri, ci, row, ceil) {\n      const { ceils, rowIndex } = row\n\n      this.$emit(type, {\n        row: ceils,\n        ceil,\n        rowIndex,\n        columnIndex: ci\n      })\n    },\n    updateRows(rows, animationIndex) {\n      const { mergedConfig, animationHandler, animation } = this\n\n      this.mergedConfig = {\n        ...mergedConfig,\n        data: [...rows]\n      }\n\n      this.needCalc = true\n\n      if (typeof animationIndex === 'number') this.animationIndex = animationIndex\n      if (!animationHandler) animation(true)\n    }\n  },\n  destroyed () {\n    const { stopAnimation } = this\n\n    stopAnimation()\n  }\n}\n</script>"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/scrollBoard/src"}]}