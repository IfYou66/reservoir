{"remainingRequest":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\src\\views\\collection\\common\\record.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\src\\views\\collection\\common\\record.vue","mtime":1655822906139},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711181250741},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":1711181252330},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711181250741},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1711181252689}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["record.vue"],"names":[],"mappingsfile":"record.vue","sourceRoot":"src/views/collection/common","sourcesContent":["<template>\n  <el-dialog width=\"1000px\" title=\"历史数据\" :visible.sync=\"showDialog\" @close=\"handleClose\" @opened=\"handleOpen\">\n    <el-container>\n      <el-header>\n        <div>\n          <el-row :gutter=\"20\">\n            <el-col :span=\"16\">\n              <span style=\"color: #9fecff\">选择日期：</span>\n              <el-button type=\"primary\" icon=\"el-icon-caret-left\" style=\"width: 20px\" @click=\"getPre\"></el-button>\n              <el-date-picker\n                v-model=\"dateRange\"\n                type=\"daterange\"\n                align=\"right\"\n                unlink-panels\n                range-separator=\"至\"\n                start-placeholder=\"开始日期\"\n                end-placeholder=\"结束日期\"\n                format=\"yyyy-MM-dd\"\n                value-format=\"yyyy-MM-dd\"\n                :picker-options=\"pickerOptions\">\n              </el-date-picker>\n              <el-button type=\"primary\" icon=\"el-icon-caret-right\" style=\"width: 20px\" @click=\"getNext\"></el-button>\n            </el-col>\n            <el-col :span=\"4\">\n              <el-button type=\"warning\" round @click=\"queryData\">数据查询</el-button>\n            </el-col>\n            <el-col :span=\"4\">\n              <el-button type=\"primary\" round @click=\"exportData\">数据导出</el-button>\n            </el-col>\n          </el-row>\n        </div>\n      </el-header>\n      <div id=\"div-line\"></div>\n\n      <el-footer style=\"text-align: center\">\n        <el-button @click=\"showDialog = false\" style=\"width:150px; background-color: #c0d9d4\"\n                   icon=\"el-icon-switch-button\">关闭弹窗\n        </el-button>\n      </el-footer>\n    </el-container>\n  </el-dialog>\n</template>\n\n<script>\n  let excel = require('@/api/collection/excel');\n  export default {\n    name: \"record\",\n    data() {\n      return {\n        pickerOptions: {\n          shortcuts: [{\n            text: '最近一周',\n            onClick(picker) {\n              const end = new Date();\n              const start = new Date();\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n              picker.$emit('pick', [start, end]);\n            }\n          }, {\n            text: '最近一个月',\n            onClick(picker) {\n              const end = new Date();\n              const start = new Date();\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n              picker.$emit('pick', [start, end]);\n            }\n          }, {\n            text: '最近三个月',\n            onClick(picker) {\n              const end = new Date();\n              const start = new Date();\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n              picker.$emit('pick', [start, end]);\n            }\n          }]\n        },\n        dateRange: [new Date().format(\"yyyy-MM-dd\"), new Date().format(\"yyyy-MM-dd\")],\n        loading: '',\n        data: '',\n        showDialog: false,\n        lineChart: null,\n        lineOption: null\n      };\n    },\n    props: {\n      sensor: {\n        type: Object,\n        default: () => ({})\n      },\n      dialogVisible: {type: Boolean, default: false}\n    },\n    watch: {\n      // 监听 addOrUpdateVisible 改变\n      dialogVisible(oldVal, newVal) {\n        this.showDialog = this.dialogVisible\n      },\n    },\n    methods: {\n      // 弹出框关闭后触发\n      handleClose() {\n        // 子组件调用父组件方法，并传递参数\n        this.$emit('changeShow', 'false')\n      },\n      handleOpen() {\n        // 子组件调用父组件方法，并传递参数\n        this.refreshData();\n      },\n      getPre() {\n        let start = new Date(this.dateRange[0]);\n        let end = new Date(this.dateRange[1]);\n        let span = end.getTime() - start.getTime() + 24 * 3600 * 1000;\n        start.setTime(start.getTime() - span);\n        end.setTime(end.getTime() - span);\n        this.dateRange[0] = start.format('yyyy-MM-dd');\n        this.dateRange[1] = end.format('yyyy-MM-dd');\n        this.$set(this, \"dateRange\", [start.format('yyyy-MM-dd'), end.format('yyyy-MM-dd')]);\n        this.refreshData();\n      },\n      getNext() {\n        let start = new Date(this.dateRange[0]);\n        let end = new Date(this.dateRange[1]);\n        let span = end.getTime() - start.getTime() + 24 * 3600 * 1000;\n        start.setTime(start.getTime() + span);\n        end.setTime(end.getTime() + span);\n        this.dateRange[0] = start.format('yyyy-MM-dd');\n        this.dateRange[1] = end.format('yyyy-MM-dd');\n        this.$set(this, \"dateRange\", [start.format('yyyy-MM-dd'), end.format('yyyy-MM-dd')]);\n        this.refreshData();\n      },\n      refreshData() {\n        this.initChart();\n        this.loading = this.openLoading();\n        //开始获取数据\n        if (this.sensor.id) {\n          this.request.sendRecordRequest(this.sensor.url, this.common.SENSOR_RECORD_COMMOND,\n            this.sensor.id, this.dateRange[0], this.dateRange[1], this.handle);\n        } else {\n          this.data = [];\n          this.addSeries(10, -10);\n          this.loading.close();\n          this.$message.warning('没有数据');\n        }\n      },\n\n      queryData() {\n        this.refreshData();\n      },\n\n      initChart() {\n        this.lineChart = this.$echarts.init(document.getElementById('div-line'));\n        this.lineOption = {\n          title: {\n            text: this.sensor.name + '(' + this.sensor.unit + ')',\n            textStyle: {\n              color: '#eddee3',\n              fontStyle: '',\n            },\n          },\n\n          dataZoom: [{\n            show: true,\n            realtime: true,\n            start: 0.01,\n            end: 100\n          }],\n\n          grid: {\n            left: '5%',\n            right: '4%',\n            bottom: '13%',\n            show: false,\n            containLabel: true\n          },\n          xAxis: {\n            type: 'time',\n            axisLine: {\n              show: true,\n              onZero: false,\n              color: '#e4f3cd',\n            },\n            axisTick: {\n              show: false\n            },\n            axisLabel: {\n              show: true,\n              textStyle: {\n                color: '#e4f3cd'\n              }\n            },\n            z: 10\n          },\n          yAxis: {\n            axisLine: {\n              show: true,\n              lineStyle: {\n                color: '#8edfb9',\n              }\n            },\n            axisTick: {\n              show: true\n            },\n            axisLabel: {\n              show: true,\n              textStyle: {\n                color: '#e8e8e8'\n              }\n            },\n          },\n\n          tooltip: {\n            trigger: 'axis',\n            axisPointer: {\n              type: 'cross',\n              label: {\n                backgroundColor: '#6a7985'\n              }\n            }\n          },\n          series: []\n        };\n        this.lineChart.setOption(this.lineOption);\n      },\n\n      exportData() {\n        let title;\n        let lineName = this.sensor.name + '(' + this.sensor.unit + ')';\n        title = ['时间', lineName];\n        if (this.data[0] && typeof this.data[0][0] !== 'string') {\n          for (let i = 0; i < this.data.length; i++) {\n            this.data[i][0] = this.data[i][0].format('yyyy-MM-dd hh:mm:ss');\n          }\n        }\n        excel.convert(this.data, lineName, title);\n      },\n\n\n      addSeries(max, min) {\n        let series = {\n          name: this.sensor.name + '(' + this.sensor.unit + ')',\n          type: 'line',\n          symbolSize: 2,\n          symbol: 'dot',\n          smooth: true,\n          textStyle: {\n            fontSize: 15,\n            color: '#fff'\n          },\n          lineStyle: {\n            width: 3,\n            shadowColor: 'rgba(255,240,205,0.76)',\n            shadowBlur: 10,\n            shadowOffsetY: 8\n          },\n          itemStyle: {\n            normal: {\n              label: {\n                show: false,//显示圆点顶部的数字\n                position: 'top',\n                formatter: function (params) {\n                  return params.value;\n                },\n                rich: {\n                  color1: {\n                    color: '#f7ba0e'\n                  },\n                  color2: {\n                    color: '#42a1fe'\n                  }\n                },\n                textStyle: {\n                  color: '#496c71'\n                },\n              },\n              color: \"#488f10\",\n              width: 8,\n              lineStyle: {\n                width: 2,\n                color: '#b3d9c0'\n              }\n            },\n          },\n          data: this.data\n        };\n        this.lineOption.xAxis.min = new Date((this.dateRange[0]).replace(/-/g, '/')).getTime() - 1000 * 60;\n        this.lineOption.xAxis.max = new Date((this.dateRange[1]).replace(/-/g, '/')).getTime() + 1000 * 60 * 60 * 24;\n        this.lineOption.yAxis.min = (min === this.common.BOUNDARY) ? 4 : Math.round(min - (max - min) * 0.2 - 10);\n        this.lineOption.yAxis.max = (max === -this.common.BOUNDARY) ? -4 : Math.round(max + (max - min) * 0.2 + 10);\n        this.lineOption.series = [];\n        this.lineOption.series.push(series);\n        this.lineChart.setOption(this.lineOption, true);\n      },\n\n\n\n      /**\n       * 成功获取数据后的处理函数\n       * @param result 从服务器获取的数据\n       */\n      handle(result) {\n        if (!result) {\n          this.loading.close();\n          this.$message.info('没有数据');\n          this.data = [];\n          this.addSeries(1, -1);\n          return;\n        }\n        let resultArr = [];\n        let max = -this.common.BOUNDARY;\n        let min = this.common.BOUNDARY;\n        for (let i = 0; i < result.length; i++) {\n          let value = parseFloat(result[i].DataValue);\n          let flag = false;\n          if (this.sensor.name === '库容') {\n            value = this.reservoir.getRelations().getCapacityRelationShip('capacity',\n              this.common.correct(parseFloat(value), this.sensor.bias));\n          } else if (this.sensor.name === '水面面积') {\n            value = this.reservoir.getRelations().getArea('area', this.common.correct(parseFloat(value), this.sensor.bias));\n          } else if (this.sensor.name === '可用水量') {\n            let capacity = this.reservoir.getRelations().getCapacityRelationShip('capacity',\n              this.common.correct(parseFloat(value), this.sensor.bias));\n            value = capacity - this.base.getBaseInfo().deadCapacity\n          } else if (this.sensor.name.indexOf('振动') > 0) {\n            value = parseFloat(result[i].DataValue);\n          } else {\n            value = this.common.correct(parseFloat(result[i].DataValue), this.sensor.bias);\n            if (value < this.sensor.high && value > this.sensor.low) {\n              resultArr.push([new Date(result[i].RevTime), this.operator.fix(value)]);\n              if (min > value) min = value;\n              if (max < value) max = value;\n            }\n            continue;\n          }\n\n          resultArr.push([new Date(result[i].RevTime), this.operator.fix(value)]);\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n        //去重\n        //this.data = this.common.removeRepeat(resultArr, 'RevTime');\n        this.data = resultArr;\n        this.addSeries(max, min);\n        this.loading.close();\n      },\n    },\n    mounted() {\n\n    },\n\n\n  }\n</script>\n\n<style scoped>\n  body, html, .main-body {\n    height: 90%;\n  }\n\n  button {\n    margin: 0 10px;\n  }\n\n  ::v-deep .el-dialog {\n    width: 1100px;\n  }\n\n  ::v-deep .el-dialog__body {\n    background-color: #082752;\n  }\n\n  .el-range-editor--medium .el-range-input {\n    font-size: 14px;\n    background-color: #f4ffff;\n  }\n\n\n  #div-img > img {\n    width: 600px;\n  }\n\n  #div-line {\n    display: block;\n    height: 300px;\n    width: 900px;\n    margin: 10px auto;\n  }\n\n  ::v-deep .el-dialog__header {\n    background-color: #86987526;\n    font-size: 16pt;\n  }\n\n</style>\n"]}]}