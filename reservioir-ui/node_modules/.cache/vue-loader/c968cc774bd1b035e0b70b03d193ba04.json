{"remainingRequest":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\src\\views\\collection\\safe\\gate\\gateDeclination.vue?vue&type=style&index=0&id=63ee4622&scoped=true&lang=css&","dependencies":[{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\src\\views\\collection\\safe\\gate\\gateDeclination.vue","mtime":1640571458995},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\css-loader\\dist\\cjs.js","mtime":1711181251489},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1711181253421},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\postcss-loader\\src\\index.js","mtime":1711181252308},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711181250741},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1711181252689}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5hcHAtY29udGFpbmVyIHsKICBtYXJnaW46IDA7CiAgYmFja2dyb3VuZDogdXJsKCIuLi8uLi8uLi8uLi9hc3NldHMvaW1hZ2VzL2JnLnBuZyIpIHJlcGVhdC15OwogIGNvbG9yOiAjZGZlNmVjOwogIGhlaWdodDogMTAwdmg7Cn0KCjo6di1kZWVwIC53LWxhYmVsIHsKICBmb250LXNpemU6IDI0cHg7CiAgZm9udC1mYW1pbHk6IOalt+S9kywgc2VyaWY7CiAgY29sb3I6ICNlY2VlYmM7Cn0KCjo6di1kZWVwIC5lbC1yYWRpb19fbGFiZWwgewogIGZvbnQtc2l6ZTogMjRweDsKICBmb250LWZhbWlseTog5qW35L2TLCBzZXJpZjsKICBjb2xvcjogI2VjZWViYzsKfQoKOjp2LWRlZXAgLmVsLXJhZGlvX19pbnB1dCB7CiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOwp9Cg=="},{"version":3,"sources":["gateDeclination.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2XA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"gateDeclination.vue","sourceRoot":"src/views/collection/safe/gate","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <record :sensor=\"sensor\" :dialogVisible=\"dialogVisible\" @changeShow=\"showHistory\"></record>\n    <dv-border-box9 style=\"padding: 10px; height: 80vh\">\n      <el-row>\n        <el-col :span=\"6\">\n          <dv-decoration3 style=\"width: 320px;height: 30px\"></dv-decoration3>\n        </el-col>\n        <el-col :span=\"10\">\n          <label class=\"w-label\">参数选择：</label>\n          <el-radio-group v-model=\"paraIndex\">\n            <el-radio :label=\"i\" v-bind:key=\"item\" v-for=\"(item,i) in paras\" @change=\"select(paraIndex)\">{{item}}\n            </el-radio>\n          </el-radio-group>\n        </el-col>\n        <el-col :span=\"8\">\n          <div id=\"lb-time\" class=\"layui-inline\">\n            <label class=\"w-label\" for=\"newest-time\">最新监测时间：<span\n              id=\"newest-time\">{{newestTime}}</span></label>\n          </div>\n        </el-col>\n      </el-row>\n      <el-row>\n        <div id=\"div-main\">\n          <div id=\"div-img\" style=\"width:100%;height:500px;margin-left: 10%;margin-top: 50px;\"></div>\n        </div>\n      </el-row>\n    </dv-border-box9>\n  </div>\n</template>\n\n<script>\n\n  import record from '@/views/collection/common/record'\n  import zrender from 'zrender'\n  import ImageShape from 'zrender/src/graphic/Image';\n  import PolygonShape from 'zrender/src/graphic/shape/Polygon';\n  import Text from 'zrender/src/graphic/Text';\n  import Circle from 'zrender/src/graphic/shape/Circle';\n  import LinearGradient from 'zrender/src/graphic/LinearGradient';\n  import ShapeLine from \"zrender/src/graphic/shape/Polyline\";\n\n  export default {\n    name: \"realtime\",\n    components: {record},\n    data() {\n      let paras = this.operator.getAttrArray(this.common.getData('gateDeclination'), 'name');\n      return {\n        transform: this.reservoir.getGate().getDeclinationSafe(),\n        paras: paras,\n        paraIndex: 1,\n        sensor: null,\n        dialogVisible: false,\n        newestTime: '2016-08-01 10:00:00',\n\n        zr: null,\n        images: [],\n        shapeGs: [],\n        shapes: [],\n      }\n    },\n    methods: {\n      select(paraIndex) {\n        this.paraIndex = paraIndex;\n        this.updateSensors();\n      },\n      showRecord(sen) {\n        this.sensor = sen;\n        this.dialogVisible = true;\n      },\n      // 监听 子组件弹窗关闭后触发，有子组件调用\n      showHistory(data) {\n        this.dialogVisible = data !== 'false';\n      },\n      /**\n       * 创建多边形\n       * @param points 多个点\n       * @param order\n       * @returns {PolygonShape}\n       */\n      createShapePolygon(sensor) {\n        let that = this;\n        return new PolygonShape({\n          style: {\n            fill: 'rgba(20, 200, 200, 0.6)',\n            lineWidth: 2\n          },\n          draggable: false,\n          shape: {\n            points: this.operator.createBackgroundRect(sensor.pos[0], sensor.pos[1], 100, 50),\n          },\n          states: {\n            normal: {\n              transition: '* 500 0 Linear'\n            },\n            hover: {\n              shape: {\n                points: [[0, 0], [1000, 0], [1000, 600], [0, 600]]\n              }\n            }\n          },\n          // 图形元素上绑定事件\n          onclick: function () {\n            that.lineShow(sensor);\n          }\n        });\n      },\n      /**\n       * 创建一个圆形\n       * @param color 颜色\n       * @param radius 半径\n       * @param order 次序\n       * @returns {Circle}\n       */\n      createCircleShape(color, radius, order) {\n        let position = this.findSensor(order).pos;\n        let x = position[0] + 10;\n        let y = position[1] + 30;\n\n        let gradient = new LinearGradient();\n        gradient.addColorStop(0, color);\n        gradient.addColorStop(1, color);\n        let shape = new Circle({\n          position: [x, y],\n          scale: [1, 1],\n          shape: {\n            cx: 0,\n            cy: 0,\n            r: 7\n          },\n          style: {\n            fill: gradient,\n            lineWidth: 5\n          }\n        });\n\n        shape.animateShape(true).when(1000, {r: radius}).start();\n        return shape;\n      },\n      /**\n       * 创建图像文本内容\n       * @param text 文本内容\n       * @param order 次序\n       * @returns {zrender/graphic/Text|Text|Text}\n       */\n      createShapeText(text, order) {\n        let that = this;\n        let position = this.findSensor(order).pos;\n        let x = position[0] + 25;\n        let y = position[1] + 5;\n\n        return new Text({\n          style: {\n            text: text,\n            x: x,\n            y: y,\n            textFont: 'bold 16px Arial',\n            color: '#fff000',\n            strokeColor: '#0ff000'\n          },\n          draggable: false,\n          onclick: function () {\n            that.lineShow(that.findSensor(order));\n          }\n        });\n      },\n\n      /**\n       * 创建图片形状\n       * @param imageName 图片名称\n       * @param posX 横坐标\n       * @param posY 纵坐标\n       * @param width 宽度\n       * @param height 高度\n       * @param text 文本\n       * @param order 次序\n       * @returns {ImageShape}\n       */\n      createImageShape(imageName, posX, posY, width, height, text, order) {\n        let that = this;\n        let position = this.findSensor(order).pos;\n        let x = position[0];\n        let y = position[1] + 20;\n        return new ImageShape({\n          position: [x, y],\n          scale: [1, 1],\n          style: {\n            x: 0,\n            y: 0,\n            image: require(`@/assets/images/common/` + imageName),\n            width: 20,\n            height: 20,\n            sx: posX,\n            sy: posY,\n            sWidth: width,\n            sHeight: height,\n            text: text,\n            hoverable: true,\n            textAlign: 'start',\n            textPosition: 'right',\n            textFont: 'bold 16px Arial'\n          },\n          draggable: false,\n          // 图形元素上绑定事件\n          onclick: function () {\n            that.lineShow(that.findSensor(order));\n          }\n        });\n      },\n\n      /**\n       * 创建形状线条\n       * @param order 次序\n       * @returns {ShapeLine}\n       */\n      createShapeLine(order) {\n        let that = this;\n        return new ShapeLine({\n          position: this.findSensor(order).pos,\n          style: {\n            stroke: \"rgba(0, 0, 200, 0.8)\",\n            lineWidth: 2\n          },\n          shape: {\n            points: [[10, 0], [10, 20], [10, 10], [0, 10], [20, 10]]\n          },\n          // 图形元素上绑定事件\n          onclick: function () {\n            that.lineShow(that.findSensor(order));\n          }\n        });\n      },\n      /**\n       * 显示历史数据\n       * */\n      lineShow(sensor) {\n        if (sensor && !sensor.invalid) {\n          if (sensor.name === '沉降' && sensor.type === 0) {   //处理沉降中的基准点，让它不显示曲线\n            sensor.url = '';\n          }\n          this.showRecord(sensor);\n        }\n      },\n      setData(sensor) {\n        let posX = 0;\n        let posY = 0;\n        let img;\n        let txtTem;\n        let shapeInfo;\n        let sensors = this.common.getData('gateDeclination');\n        if (sensor.name === '电压') {                                 //电压没有正负，单独处理\n          for (let i = 0; i < sensors.length; i++) {\n            if (sensor.id === sensors[i].id) {\n              img = 'horizontal.png';\n              this.zr.remove(this.shapeGs[i]);\n              this.zr.add(this.shapes[i]);\n              this.zr.remove(this.images[i]);\n              txtTem = sensor.name + \":\" + (value).toFixed(1) + sensor.unit;\n              this.images[i] = this.createImageShape(img, posX,\n                posY, 100, 100, txtTem, i);\n              this.zr.add(this.images[i]);\n            }\n          }\n        } else if (sensor.name === '液面') {                          //液面距离\n          shapeInfo = this.setValue(150, 0, 320, 260, sensor);\n          this.switchImage(shapeInfo, sensor);\n        } else {                                                      //沉降位移的处理\n          shapeInfo = this.setValue(310, 135, 140, 270, sensor);\n          this.switchImage(shapeInfo, sensor);\n        }\n      },\n      /**\n       * 成功获取数据后的处理函数\n       */\n      updateSensors() {\n        let sens = this.common.getData('gateDeclination');\n        let newestTime = sens[0].time;\n        for (let i = 0; i < sens.length; i++) {\n          if (sens[i].time > newestTime) {\n            newestTime = sens[i].time;\n          }\n          let sensorID = sens[i].id;\n          let sensor = this.operator.findArrayItemByAttrValue(sens, 'id', sensorID);\n\n          if (sensor && this.paras[this.paraIndex] === sensor.name) {\n            this.setData(sensor);\n          }\n        }\n        this.newestTime = new Date(newestTime).format(\"yyyy-MM-dd hh:mm:ss\");\n      },\n      /**\n       * 设置数据\n       * @param posX1\n       * @param posY1\n       * @param posX2\n       * @param posY2\n       * @param sensor 传感器数据\n       * */\n      setValue(posX1, posY1, posX2, posY2, sensor) {\n        let posX, posY, img, txtTem;\n        if (sensor.value > 0) {\n          posX = posX1;\n          posY = posY1;\n          img = 'orientation.png';\n          this.zr.remove(this.shapeGs[sensor.type]);\n          this.zr.add(this.shapes[sensor.type]);\n        } else if (sensor.value < 0) {\n          posX = posX2;\n          posY = posY2;\n          img = 'orientation.png';\n          this.zr.remove(this.shapes[sensor.type]);\n          this.zr.add(this.shapeGs[sensor.type]);\n        } else {\n          img = 'horizontal.png';\n        }\n        txtTem = this.operator.getPointText(sensor);\n        return {'posX': posX, 'posY': posY, 'img': img, 'txtTem': txtTem};\n      },\n      /**\n       * 查找传感器数据\n       *\n       * */\n      findSensor(order) {\n        let sensors = this.common.getData('gateDeclination');\n        let name = this.paras[this.paraIndex];\n        return this.operator.getSensor(this.operator.getSensors(sensors, 'type', order), 'name', name, true);\n      },\n      /**\n       * 切换图片\n       * @param shapeInfo 图像参数\n       * @param sensor 传感器数据\n       * */\n      switchImage(shapeInfo, sensor) {\n        this.zr.remove(this.images[sensor.type]);\n        this.images[sensor.type] = this.createImageShape(shapeInfo.img, shapeInfo.posX,\n          shapeInfo.posY, 100, 100, shapeInfo.txtTem, sensor.type);\n        this.zr.add(this.images[sensor.type]);\n      },\n    },\n    mounted() {\n      this.zr = zrender.init(document.getElementById(\"div-img\"));\n      let image = new ImageShape({\n        scale: [1.1, 1],\n        style: {\n          x: -80,\n          y: 0,\n          image: require(`../../../../assets/images/${this.common.CURRENT_RESERVOIR}/gateDisplacement.jpg`),\n          width: 1000,\n          height: 600\n        },\n        draggable: false\n      });\n      this.zr.add(image);\n\n      let sens = this.operator.getSensors(this.common.getData('gateDeclination'), 'name', 'x倾斜');\n      for (let i = 0; i < sens.length; i++) {\n        this.zr.add(this.createShapePolygon(sens[i]));\n        this.shapes.push(this.createCircleShape('#0000ff', sens[i].size, i));\n        this.shapeGs.push(this.createCircleShape('#0ff000', sens[i].size, i));\n\n        this.zr.add(this.createShapeText(sens[i].title, i));\n        image = this.createImageShape(sens[i].image, '', '', 100, 100, sens[i].text, i);\n        this.images.push(image);\n        this.zr.add(image);\n        this.zr.add(this.createShapeLine(i));\n      }\n\n      this.updateSensors();\n      let that = this;\n      setInterval(function () {\n        that.updateSensors();\n      }, this.common.TIME_SPAN);\n    }\n  }\n\n\n</script>\n\n<style scoped>\n  .app-container {\n    margin: 0;\n    background: url(\"../../../../assets/images/bg.png\") repeat-y;\n    color: #dfe6ec;\n    height: 100vh;\n  }\n\n  ::v-deep .w-label {\n    font-size: 24px;\n    font-family: 楷体, serif;\n    color: #eceebc;\n  }\n\n  ::v-deep .el-radio__label {\n    font-size: 24px;\n    font-family: 楷体, serif;\n    color: #eceebc;\n  }\n\n  ::v-deep .el-radio__input {\n    vertical-align: baseline;\n  }\n</style>\n"]}]}