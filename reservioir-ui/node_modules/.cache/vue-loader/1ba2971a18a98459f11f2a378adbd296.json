{"remainingRequest":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\src\\views\\flash.vue?vue&type=style&index=0&id=d0bbc374&scoped=true&lang=css&","dependencies":[{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\src\\views\\flash.vue","mtime":1641618436939},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\css-loader\\dist\\cjs.js","mtime":1711181251489},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1711181253421},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\postcss-loader\\src\\index.js","mtime":1711181252308},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1711181250741},{"path":"D:\\GraduationProject\\final\\reservioir\\reservioir-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1711181252689}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5hcHAtY29udGFpbmVyIHsKICBtYXJnaW46IDJweCAwcHg7CgogIHBhZGRpbmc6IDBweDsKICBiYWNrZ3JvdW5kOiAjMDAwMDAwCn0KCkAtd2Via2l0LWtleWZyYW1lcyBzY2FsZURyYXcgewogIDAlIHsKICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTsKICB9CiAgMjUlIHsKICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLjUpOwogIH0KICA1MCUgewogICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEuOCk7CiAgfQogIDc1JSB7CiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMi4yKTsKICB9Cn0KCiNtYWluTWFwLCAjaW1nRGl2IHsKICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBzY2FsZURyYXc7CiAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluLW91dDsKICAtd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlOwogIC13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOiA0MHM7CiAgLXdlYmtpdC1hbmltYXRpb24tZGlyZWN0aW9uOiBhbHRlcm5hdGU7Cn0KCmJvZHkgewogIHBhZGRpbmc6IDA7Cn0KCmltZyB7CiAgbWFyZ2luOiAwOwp9CgojZmlyc3QgewogIGRpc3BsYXk6IGJsb2NrOwp9CgppZnJhbWUgewogIGRpc3BsYXk6IG5vbmU7Cn0K"},{"version":3,"sources":["flash.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkaA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"flash.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class='app-container'>\n    <div id='first'>\n      <canvas id=\"digitalRain\" style=\"height: 100%;width:100%;\">\n      </canvas>\n\n      <div id=\"mainMap\"\n           style=\"position: absolute; z-index: 10; left:10%; top:10%; height:50%;width: 50%;padding:10px;background:#0c0d0f00\">\n      </div>\n\n      <div id=\"imgDiv\"\n           style=\"position: absolute; z-index: 10; left:30%; top:500px; width: 600px;padding:10px;background:#ffffff00\">\n        <img :src=\"require(`@/assets/images/title.jpg`)\" alt=\"\" style=\"width: 120%;height: 120%;\">\n      </div>\n    </div>\n\n  </div>\n</template>\n\n<script>\n  export default {\n    name: \"first\",\n    methods: {\n      jump() {\n\n        const TIME_COUNT = 20;\n        if (!this.timer) {\n          this.count = TIME_COUNT;\n          this.show = false;\n          this.timer = setInterval(() => {\n            if (this.count > 0 && this.count <= TIME_COUNT) {\n              this.count--;\n            } else {\n              this.show = true;\n              clearInterval(this.timer);\n              this.timer = null;\n              //跳转的页面写在此处\n              this.stopMusic();\n              this.$router.push({path: this.redirect || \"/login\"})\n            }\n          }, 1000)\n        }\n      },\n\n      jumpNow() {\n        this.$router.push({path: this.redirect || \"/login\"});\n        clearInterval(this.timer);\n        this.timer = null;\n      },\n\n      getEcharts() {\n        // 基于准备好的dom，初始化echarts实例\n        const json = require('@/api/flash/tz.json')\n        const reservoirs = require('@/api/flash/reservoirs.json')\n        this.$echarts.registerMap('滕州', json);\n        var chart = this.$echarts.init(document.getElementById('mainMap'));\n\n        var series = [];//地图展现数据\n        //24个省市经度纬度\n        var geoCoordMap = function () {\n          let list = reservoirs.list;\n          let obj = {};\n          for (let i = 0; i < list.length; i++) {\n            obj[list[i].label] = [list[i].lon, list[i].lat, list[i].type];\n          }\n          return obj;\n        }();\n\n        var fromdata = '滕州市';//默认飞线原点\n        //初始化飞线数据\n        var XAData = function () {\n          let list = reservoirs.list;\n          let obj = [];\n          for (let i = 0; i < list.length; i++) {\n            let item = [{name: list[i].label}, {name: '滕州市', value: 95}];\n            obj.push(item);\n          }\n          return obj;\n        }();\n\n        var convertData1 = function (data) {\n          let res = [];\n          for (let i = 0; i < data.length; i++) {\n            let dataItem = data[i];\n            let fromCoord = geoCoordMap[dataItem[0].name];\n            let toCoord = geoCoordMap[dataItem[1].name];\n            if (fromCoord && toCoord) {\n              res.push({\n                fromName: dataItem[0].name, toName: dataItem[1].name, coords: [fromCoord, toCoord]\n              });\n            }\n          }\n          return res;\n        };\n\n        [[fromdata, XAData]].forEach(function (item, i) {\n          series.push(\n            {\n              type: 'effectScatter',\n              coordinateSystem: 'geo',\n              zlevel: 15,\n              symbolSize: 8,\n              rippleEffect: {\n                period: 8, brushType: 'stroke', scale: 4\n              },\n              itemStyle: {\n                color: '#ff9815',\n                opacity: 1\n              },\n              data:\n                function () {\n                  let list = reservoirs.list;\n                  let obj = [];\n                  for (let i = 0; i < list.length; i++) {\n                    if (list[i].type === 1) {\n                      let item = [list[i].lon, list[i].lat, list[i].label];\n                      obj.push(item);\n                    }\n                  }\n                  return obj;\n                }(),\n            },\n            {\n              type: 'effectScatter',\n              coordinateSystem: 'geo',\n              zlevel: 15,\n              symbolSize: 4,\n              rippleEffect: {\n                period: 8, brushType: 'stroke', scale: 4\n              },\n              itemStyle: {\n                color: '#ff524d',\n                opacity: 1\n              },\n              data:\n                function () {\n                  let list = reservoirs.list;\n                  let obj = [];\n                  for (let i = 0; i < list.length; i++) {\n                    if (list[i].type === 2) {\n                      let item = [list[i].lon, list[i].lat, list[i].label];\n                      obj.push(item);\n                    }\n                  }\n                  return obj;\n                }(),\n            },\n            {\n              type: 'effectScatter',\n              coordinateSystem: 'geo',\n              zlevel: 15,\n              symbolSize: 4,\n              rippleEffect: {\n                period: 8, brushType: 'stroke', scale: 4\n              },\n              itemStyle: {\n                color: '#1bff28',\n                opacity: 1\n              },\n              data:\n                function () {\n                  let list = reservoirs.list;\n                  let obj = [];\n                  for (let i = 0; i < list.length; i++) {\n                    if (list[i].type === 3) {\n                      let item = [list[i].lon, list[i].lat, list[i].label];\n                      obj.push(item);\n                    }\n                  }\n                  return obj;\n                }(),\n            },\n            {\n              type: 'effectScatter',\n              coordinateSystem: 'geo',\n              zlevel: 15,\n              symbolSize: 12,\n              rippleEffect: {\n                period: 6, brushType: 'stroke', scale: 8\n              },\n              itemStyle: {\n                color: '#FF5722',\n                opacity: 1\n              },\n              data: item[1].map(function (dataItem) {\n                return {\n                  name: dataItem[1].name,\n                  value: geoCoordMap[dataItem[1].name].concat([dataItem[1].name]),\n                  tooltip: {\n                    formatter: dataItem[1].name\n                  }\n                };\n              }),\n            },\n            {\n              type: 'lines',\n              coordinateSystem: 'geo',\n              zlevel: 15,\n\n              effect: {\n                show: true, period: 5, trailLength: 0, symbol: 'arrow', color: '#01AAED', symbolSize: 8,\n              },\n              lineStyle: {\n                normal: {width: 1.2, opacity: 0.6, curveness: 0.2, color: '#FFB800'}\n              },\n              data: convertData1(item[1])\n            }\n          )\n        });\n\n        let option = {\n\n          color: ['#fc5353', '#f4fc6c', '#e68b55', '#9a68ff', '#ff60c5'],\n\n          tooltip: {\n            backgroundColor: \"rgba(255,255,255,0.8)\", //设置背景图片 rgba格式\n            color: \"black\",\n            borderWidth: \"1\",\n            borderColor: \"gray\",\n            textStyle: {\n              color: \"#059bbd\"\n            },\n            trigger: 'item',\n            formatter: function (params) {\n              if (params.value) {\n                return params.data[2];\n              } else {\n                return params.label;\n              }\n            }\n          },\n          legend: {\n            orient: 'horizontal',\n            left: '27%',\n            top: '5%',\n            data: ['高线'],\n            textStyle: {\n              color: '#ffffff'\n            },\n            icon: 'circle'\n          },\n          geo: {\n            map: '滕州',\n            zlevel: 10,\n            layoutCenter: ['48%', '50%'],\n            roam: true,\n            show: true,\n            layoutSize: \"80%\",\n            zoom: 1.08,\n            label: {\n              normal: {\n                show: true,//地图上的省份名称是否显示\n                textStyle: {\n                  fontSize: 12,\n                  color: '#43D0D6'\n                }\n              },\n              emphasis: {\n                show: true\n              }\n            },\n            itemStyle: {\n              normal: {\n                color: '#062031',\n                borderWidth: 1.1,\n                borderColor: '#43D0D6'\n              },\n              emphasis: {\n                areaColor: '#43D0D6'\n              }\n            }\n          },\n          series: series\n        };\n        chart.setOption(option);\n        chart.on('click', function (params) {\n\n        });\n      },\n\n\n      playMusic() {\n        // 为了防止第二次创建\n        let playState = true\n\n        function testAutoPlay() {\n          // 返回一个promise以告诉调用者检测结果\n          return new Promise(resolve => {\n            if (playState) {\n              let audio;\n              let audios = document.getElementsByTagName('audio');\n              if (audios.length > 0) {\n                audio = audios[0];\n              } else {\n                audio = document.createElement('audio');\n              }\n              audio.src = \"flash.mp3\";\n              //循环播放，如果不需要可注释\n              audio.loop = \"loop\"\n              document.body.appendChild(audio);\n              let autoplay = true;\n              // play返回的是一个promise\n              audio.play().then(() => {\n                // 支持自动播放\n                autoplay = true;\n                console.log(\"正常播放\")\n              }).catch(err => {\n                // 不支持自动播放\n                console.log(\"不支持播放\")\n                autoplay = false;\n              }).finally((e) => {\n                resolve(autoplay);\n              });\n              playState = false\n            } else {\n              resolve(false)\n            }\n\n          });\n        }\n\n        let audioInfo = {\n          autoplay: false,\n          testAutoPlay() {\n            return testAutoPlay()\n          },\n          // 监听页面的点击事件，一旦点过了就能autoplay了\n          setAutoPlayWhenClick() {\n            function setAutoPlay() {\n              // 设置自动播放为true\n              audioInfo.autoplay = true;\n              document.removeEventListener('click', setAutoPlay);\n              document.removeEventListener('touchend', setAutoPlay);\n            }\n\n            document.addEventListener('click', setAutoPlay);\n            document.addEventListener('touchend', setAutoPlay);\n          },\n          init() {\n            // 检测是否能自动播放\n            audioInfo.testAutoPlay().then(autoplay => {\n              if (!audioInfo.autoplay) {\n                audioInfo.autoplay = autoplay;\n              }\n            });\n            // 用户点击交互之后，设置成能自动播放\n            audioInfo.setAutoPlayWhenClick();\n          }\n        };\n        // PC端\n        document.addEventListener('click', () => {\n          audioInfo.init();\n        });\n      },\n\n      stopMusic() {\n        let audios = document.getElementsByTagName('audio');\n        if (audios.length > 0) {\n          audios[0].src = '';\n          audios[0].pause();\n        }\n      }\n    },\n    mounted() {\n      this.getEcharts();\n      this.jump();\n\n      this.playMusic();\n\n      let that = this;\n      document.addEventListener('dblclick', function () {\n        that.$router.push({path: that.redirect || \"/login\"});\n        that.stopMusic();\n      });\n\n      let drCav = document.getElementById(\"digitalRain\");\n\n      /*将画布大小设置为窗口文档显示区大小*/\n      let width = window.innerWidth;\n      let height = window.innerHeight;\n      drCav.width = width;\n      drCav.height = height;\n\n      let fontsize = 16;                          //数字字体大小\n      let columns = Math.ceil(width / fontsize);  //列数（向上取整）\n      let dropLine = [];\n      for (let i = 0; i < columns; i++) {\n        dropLine[i] = 0;\n      }\n\n      /*Run*/\n      if (drCav.getContext) {\n        let ctx = drCav.getContext(\"2d\");\n        let timer = setInterval(function () {\n          ctx.fillStyle = \"rgba(0,0,0,0.07)\";   //设置透明度，逐渐覆盖之前的数字\n          ctx.fillRect(0, 0, width, height);       //填充画布\n\n          ctx.fillStyle = \"#06643b\";\n          ctx.font = fontsize + \"px Simsun\";\n          for (let i = 0; i < columns; i++) {\n            let figure = Math.floor(Math.random() * 10);  //生成0~9的伪随机数\n\n            /*绘制数字(核心部分)*/\n            ctx.fillText(figure, i * fontsize, dropLine[i] * fontsize);\n            if (dropLine[i] * fontsize > height || Math.random() > 0.98) {\n              dropLine[i] = 0;\n            }\n            dropLine[i]++;\n          }\n          width++;\n        }, 60);\n      }\n\n    }\n  }\n</script>\n\n<style scoped>\n  .app-container {\n    margin: 2px 0px;\n\n    padding: 0px;\n    background: #000000\n  }\n\n  @-webkit-keyframes scaleDraw {\n    0% {\n      -webkit-transform: scale(1);\n    }\n    25% {\n      -webkit-transform: scale(1.5);\n    }\n    50% {\n      -webkit-transform: scale(1.8);\n    }\n    75% {\n      -webkit-transform: scale(2.2);\n    }\n  }\n\n  #mainMap, #imgDiv {\n    -webkit-animation-name: scaleDraw;\n    -webkit-animation-timing-function: ease-in-out;\n    -webkit-animation-iteration-count: infinite;\n    -webkit-animation-duration: 40s;\n    -webkit-animation-direction: alternate;\n  }\n\n  body {\n    padding: 0;\n  }\n\n  img {\n    margin: 0;\n  }\n\n  #first {\n    display: block;\n  }\n\n  iframe {\n    display: none;\n  }\n</style>\n"]}]}