<template>
  <div class="app-container">
    <el-row :gutter="20">
      <dv-border-box13 style="padding:15px; height: 70px">
        <el-col :span="4">
          <label class="layui-form-label">选择单元:</label>
          <el-select style="width: 110px" v-model="unit" placeholder="请选择" @change="selectUnit(unit)">
            <el-option
              v-for="item in units"
              :label="item.label"
              :value="item.value">
            </el-option>
          </el-select>
        </el-col>
        <el-col :span="4">
          <label style="vertical-align: bottom" class="layui-form-label">流域面积:</label>
          <label class="layui-form-label value" id="area">{{area}}</label>
        </el-col>
        <el-col :span="4">
          <label class="layui-form-label">干流坡度:</label>
          <label class="layui-form-label  value" id="slope">{{slope}}</label>
        </el-col>
        <el-col :span="4">
          <label class="layui-form-label">选择数据:</label>
          <el-select style="width: 110px" v-model="type" placeholder="请选择" @change="select(type)">
            <el-option
              v-for="item in options"
              :key="item.value"
              :label="item.label"
              :value="item.value">
            </el-option>
          </el-select>
        </el-col>
        <el-col :span="8">
          <el-button type="primary" @click="computeSingle" icon="el-icon-edit">单独计算</el-button>
          <el-button type="warning" @click="computeTogether" icon="el-icon-edit-outline">汇总计算</el-button>
          <el-button type="danger"><a target="_blank"
                                      :href="this.picName">查看计算原理</a></el-button>
        </el-col>
      </dv-border-box13>
    </el-row>
    <el-row :gutter="20">
      <dv-border-box13 style="padding:15px; height: 350px">
        <div class="layui-card-body">
          <el-tabs v-model="activeName" @tab-click="renewRains">
            <el-tab-pane label="历史降雨" name="history">
              <div class="chart" id="history"></div>
            </el-tab-pane>
            <el-tab-pane label="今天降雨预测" name="today">
              <div class="chart" id="today"></div>
            </el-tab-pane>
            <el-tab-pane label="明天降雨预测" name="tomorrow">
              <div class="chart" id="tomorrow"></div>
            </el-tab-pane>
            <el-tab-pane label="后天降雨预测" name="the-day-after-tomorrow">
              <div class="chart" id="the-day-after-tomorrow"></div>
            </el-tab-pane>
            <el-tab-pane label="大后天降雨预测" name="three-days-from-now">
              <div class="chart" id="three-days-from-now"></div>
            </el-tab-pane>
          </el-tabs>
        </div>
      </dv-border-box13>
    </el-row>
    <el-row :gutter="20">
      <dv-border-box13 style="padding:15px; height: 70px">
        <el-col :span="4">
          <label class="layui-form-label">预测洪水总量:</label>
          <label class="layui-form-label value" id="floodVolume">{{floodVolume}}</label>
        </el-col>
        <el-col :span="4">
          <label class="layui-form-label">预测泄洪总量:</label>
          <label class="layui-form-label value" id="dischargeVolume">{{dischargeVolume}}</label>
        </el-col>
        <el-col :span="4">
          <label class="layui-form-label">洪峰发生时间:</label>
          <label class="layui-form-label  value" id="peakTime">{{peakTime}}</label>
        </el-col>
        <el-col :span="4">
          <label class="layui-form-label">是否超过标准:</label>
          <label class="layui-form-label value" id="passStandard">{{passStandard}}</label>
        </el-col>
        <el-col :span="4">
          <label class="layui-form-label">建议泄洪时间:</label>
          <label class="layui-form-label  value" id="dischargeTime"></label>
        </el-col>
        <el-col :span="4">
          <label class="layui-form-label">建议闸门开度:</label>
          <label class="layui-form-label  value" id="gateOpening"></label>
        </el-col>
      </dv-border-box13>
    </el-row>
    <el-row :gutter="20">
      <dv-border-box13 style="padding:15px; height: 350px">
        <div class="layui-card-body" style="height: 320px;overflow: hidden;">
          <div id="flood-line" style="width: 100%;height: 320px;"></div>
        </div>
      </dv-border-box13>
    </el-row>
  </div>
</template>

<script>
  let flood = require('@/api/collection/flood');
  export default {
    name: "realtime",
    data() {
      return {
        debug: true,
        loading: null,
        activeName: 'history',
        picName: "/files/" + this.common.CURRENT_RESERVOIR + "/floodTheory.pdf",
        dataType: 'analog',
        options: [{
          value: 'analog',
          label: '模拟数据'
        }, {
          value: 'real',
          label: '真实数据'
        }],
        units: [{
          value: 'baizhangya',
          label: '百丈崖'
        }, {
          value: 'yuejin',
          label: '跃进'
        }, {
          value: 'qujian',
          label: '区间'
        }],
        type: 'analog',
        chartRain: null,
        floodVolume: '',
        dischargeVolume: '',
        peakTime: '',
        passStandard: '',
        unit: 'baizhangya',
        area: '24.5平方千米',
        slope: '0.015',
        chartFloodLine: null,
      }
    },
    methods: {
      async select(type) {
        this.type = type;
        if (this.type === 'analog') {
          this.debug = true;
          flood.updateRandomDailyRains();
          flood.updateRandomHourlyRains();
          this.renewRains();
        } else {
          this.debug = false;
          this.loading = this.openLoading();
          let that = this;
          await flood.updateDailyRains();
          await flood.updateHourlyRains();
          that.renewRains();
          that.loading.close();
        }
      },
      selectUnit(unit) {
        this.unit = unit;
        if (this.chartFloodLine)
          this.displayFloodLine(this.unit);
        this.renewRains();
      },
      //获取系列设置
      getOption(objArray) {
        return {
          title: {},
          tooltip: {
            trigger: "axis"
          },
          xAxis: [{
            type: "category",
            name: '时间',
            boundaryGap: 3,
            data: Object.keys(objArray),
            axisLine: {
              show: true,
              onZero: false,
              lineStyle: {
                color: '#eceebc'
              }
            },
            axisLabel: {
              formatter: '{value} ',
              textStyle: {
                color: '#eceebc'
              }
            },
          }],
          yAxis: [{
            type: "value",
            name: '雨量（mm/h)',
            axisLine: {
              show: true,
              onZero: false,
              lineStyle: {
                color: '#93eea8'
              }
            },
            axisLabel: {
              formatter: '{value} ',
              textStyle: {
                color: '#93eea8'
              }
            },
          }],
          series: [{
            name: "mm",
            type: "bar",
            smooth: !0,
            barWidth: 20,
            //设置柱状图渐变颜色
            itemStyle: {
              normal: {
                color: new this.$echarts.graphic.LinearGradient(
                  0, 0, 1, 0,   // 0,0,1,0表示从左向右    0,0,0,1表示从右向左
                  [
                    {offset: 1, color: '#83bff6'},
                    {offset: 0, color: '#188df0'}
                  ]
                )
              }
            },
            data: Object.values(objArray)
          }]
        };
      },
      //显示降水曲线
      showRains(tag, rains) {
        let that = this;
        setTimeout(
          function () {
            that.chartRain = that.$echarts.init(document.getElementById(tag));
            that.chartRain.setOption(that.getOption(rains), true);
          }, 0
        );

      },
      //显示洪水线
      displayFloodLine(unitName) {
        this.chartFloodLine = this.$echarts.init(document.getElementById('flood-line'));
        let floodArr = flood.getFloodLine(unitName);
        let option = {
          title: {
            lineStyle: {
              color: '#eceebc'
            },
            textStyle: {
              color: '#eceebc'
            }
          },
          tooltip: {
            trigger: "axis"
          },
          xAxis: [{
            type: "category",
            show: true,
            name: '时间（h）',
            boundaryGap: !1,
            axisLine: {
              show: true,
              onZero: false,
              lineStyle: {
                color: '#eceebc'
              }
            },
            axisLabel: {
              formatter: '{value} ',
              textStyle: {
                color: '#eceebc'
              }
            },
            data: Object.keys(floodArr),
          }],
          yAxis: [{
            type: "value",
            name: '水位（mm）',
            axisLine: {
              show: true,
              onZero: false,
              lineStyle: {
                color: '#93eea8'
              }
            },
            axisLabel: {
              formatter: '{value} ',
              textStyle: {
                color: '#93eea8'
              }
            }
          }],
          series: [{
            name: "水位",
            type: "line",
            smooth: !0,
            itemStyle: {
              normal: {
                areaStyle: {
                  type: 'default',
                },
              }
            },
            markArea: {
              silent: true,
              data: [
                [{
                  name: '已发生洪水',
                  label: {
                    show: true,
                    color: 'black',
                    fontStyle: 'oblique',
                    fontSize: 20,
                  },
                  xAxis: this.datetime.getDayStr(0, false),
                  itemStyle: {
                    size: '20px',
                    color: 'rgba(218,235,221,0.46)'
                  },
                }, {
                  xAxis: this.datetime.getDayStr(1, false),
                }],
                [{
                  name: '预报洪水',
                  xAxis: this.datetime.getDayStr(1, false),
                  itemStyle: {
                    color: 'rgba(153,236,116,0.8)'
                  },
                  label: {
                    show: true,
                    color: 'black',
                    fontStyle: 'oblique',
                    fontSize: 20,
                  },
                }, {
                  xAxis: this.datetime.getDayStr(3, true),
                }],
              ]
            },
            data: Object.values(floodArr)
          }]
        };
        this.chartFloodLine.setOption(option);
      },
      /**
       * 更新降雨数据
       */
      renewRains() {
        switch (this.activeName) {
          case 'history':
            this.showRains(this.activeName, flood.getDaysRainFall(this.unit));
            break;
          case 'today':
            this.showRains('today', flood.getHoursRainFall(this.unit, this.common.DAY.TODAY));
            break;
          case 'tomorrow':
            this.showRains('tomorrow', flood.getHoursRainFall(this.unit, this.common.DAY.TOMORROW));
            break;
          case 'the-day-after-tomorrow':
            this.showRains('the-day-after-tomorrow', flood.getHoursRainFall(this.unit, this.common.DAY.THE_DAY_AFTER_TOMORROW));
            break;
          case 'three-days-from-now':
            this.showRains('three-days-from-now', flood.getHoursRainFall(this.unit, this.common.DAY.THREE_DAYS_FROM_NOW));
            break;
          default:
            break;
        }
      },
      computeSingle() {
        flood.computeFloodLinesForAll();
        this.displayFloodLine(this.unit);
      },
      computeTogether() {
        flood.computeFloodLinesForAll();
        this.displayFloodLine();
        let volume = flood.computeFloodVolume();
        let dv = flood.computeDischargeVolume(volume, parseFloat(this.operator.getWaterLevel()), this.reservoir.getUnits()[0].name);
        this.floodVolume = Math.round(volume) + "万方";
        this.dischargeVolume = Math.round(dv) + "万方";
        this.peakTime = flood.computePeakTime();
        this.passStandard = flood.passStandard(dv) ? "超过" : "未超过";
      }
    },
    mounted() {
      /******************************************************************
       * 数据请求
       * *****************************************************************/
      if (!this.debug) {
        this.loading = this.openLoading();
      }
      this.computeSingle();
      let that = this;
      setTimeout(function () {
        if (!that.debug) {
          flood.updateDailyRains();
          flood.updateHourlyRains();
          that.loading.close();
        } else {
          flood.updateRandomDailyRains();
          flood.updateRandomHourlyRains();
        }
        that.chartRain = that.$echarts.init(document.getElementById('history'));
        that.chartRain.setOption(that.getOption(flood.getDaysRainFall(that.unit)));
      }, 3);
    }
  }


</script>

<style scoped>
  .chart {
    height: 300px;
    margin-top: 20px;
  }

  .app-container {
    margin: 0;
    background: url("../../../assets/images/bg.png") repeat-y;
    color: #dfe6ec;
    height: 130vh;
  }

  .value {
    font-family: "Microsoft YaHei", 楷体, "MicrosoftJhengHei", 华文细黑, STHeiti, MingLiu, serif;
    font-size: 1.0rem;
    text-align: left;
    color: #1c6ca1;
    font-weight: bold;
    width: 190px;
  }

  .layui-card, .layui-card-body {
    height: 100%;
  }

  ::v-deep .el-col {
    line-height: 40px;
  }

  .layui-form-label {
    width: 100px;
  }

  .layui-inline {
    margin-bottom: 0;
  }

  .chart {
    margin-top: 0;
  }

  ::v-deep .el-tabs__item {
    width: 150px !important;
    color: #dadf9d
  }

  ::v-deep .is-active{
    color:#00aaff;
  }
</style>
