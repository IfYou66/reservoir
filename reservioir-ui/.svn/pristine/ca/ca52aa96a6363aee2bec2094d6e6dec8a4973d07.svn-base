<template>
  <div class="app-container home">
    <dv-border-box7 style="height: 50px; padding: 10px; width: 99.8%">
      <div class="el-row">
        <div class="el-col-md-8">
          <div class="el-card__body time-info">
            实时时间：<span id="newest-time">{{newestTime}}</span>
          </div>
        </div>
        <div class="el-col-md-12">
          <div class="el-card-body hint-info">
            <img alt="" src="../../../assets/images/common/safe.png"/>&nbsp;表示正常&emsp;
            <img alt="" src="../../../assets/images/common/warning.png"/>&nbsp;表示超限&emsp;
            <img alt="" src="../../../assets/images/common/danger.png"/>&nbsp;表示危险
          </div>
        </div>
        <div class="el-col-md-4">
          <dv-decoration1 style="width: 120px; height: 40px"></dv-decoration1>
        </div>
      </div>
    </dv-border-box7>

    <dv-border-box2 style="padding: 10px 30px; width: 99.8%">
      <div v-for="item in sensors" v-bind:key="item.tag">
        <fieldset v-if='operator.exists(item,sensors,`section`,item.section)' class="el-elem-field el-field-title"
                  style="margin-top: 10px;">
          <legend>{{item.section.split('-')[0]}}</legend>
        </fieldset>
        <el-row class="row" :gutter="10">
          <el-col :span="8" class="cell">
            <div class="grid-content bg-purple">
              <img :src="require(`../../../assets/images/common/${item.image}.gif`)" alt=""/>
              <span class="info" :id="item.tag">{{item.name}}:{{Math.abs(item.value)===common.BOUNDARY?'--':item.value}}{{item.unit}}</span>
            </div>
          </el-col>
          <el-col :span="8" class="cell">
            <div class="grid-content bg-purple">
              <img :src="require(`../../../assets/images/common/${item.image}.gif`)" alt=""/>
              <span class="info" :id="item.tag">{{item.limit}}:{{operator.generateScopeStr(item.max, item.min)}}{{item.unit}}</span>
            </div>
          </el-col>
          <el-col :span="8" class="cell">
            <div class="grid-content bg-purple">
              <img :id="item.tag +'-state-img'"
                   :src="require(`../../../assets/images/common/${item.icon?item.icon:'safe'}.png`)" alt="">
              <span :id="item.tag+'-state-span'" class="info state-info" :class="item.css">
                实时状态:{{item.state?item.state:(Math.abs(item.value) === common.BOUNDARY? '--':'正常')}}</span>
            </div>
          </el-col>
        </el-row>
      </div>
    </dv-border-box2>
  </div>
</template>

<script>
  export default {
    name: "realtime",
    data() {
      let sensors = this.common.getData('realtime');
      return {
        sensors: sensors,
        newestTime: '--',
        tunnel: this.reservoir.getTunnel().getControlAnalysis(),
        gate: this.reservoir.getGate().getBuildingAnalysis(),
        dam: this.reservoir.getDam(),
        that:this,
      };
    },

    methods: {

      /**
       * 计算渗透坡降J
       * */
      computeSlopeDown() {
        let sensor = this.operator.findArrayItemByAttrValue(this.sensors, 'tag', 'seepage-slope');
        if (!sensor) return;
        if (!this.reservoir.getRelations().getSlopeDown) return;
        sensor.value = this.reservoir.getRelations().getSlopeDown(this.operator.getWaterLevel());
      },

      /**
       * 计算最大值
       * @param tagName 标签名称
       * @param part 页面名
       * @param name 数据名称
       * */
      computeMax(tagName, part, name) {
        let sensor = this.operator.findArrayItemByAttrValue(this.sensors, 'tag', tagName);
        if (!sensor) return;
        let maxSensors = this.operator.getSensors(this.operator.getSensors(this.common.loadSensors(), 'part', part), 'name', name);
        if (!maxSensors.length) return;
        let maxValue = -this.common.BOUNDARY;
        for (let i = 0; i < maxSensors.length; i++) {
          if (maxSensors[i].value === null) continue;
          if (maxValue < Math.abs(maxSensors[i].value) && Math.abs(maxSensors[i].value) < 10 && maxSensors[i].value !== this.common.BOUNDARY) {
            maxValue = Math.abs(maxSensors[i].value)
          }
        }
        sensor.value = maxValue;
      },

      /**
       * 计算最大倾斜角度
       * @param tagName 标签名称
       * */
      computeMaxInclination(tagName) {
        let maxX = -this.common.BOUNDARY, maxY = -this.common.BOUNDARY;
        let sensor = this.operator.findArrayItemByAttrValue(this.sensors, 'tag', tagName);
        if (!sensor) return;
        let maxSensors = this.operator.getSensors(this.common.loadSensors(), 'name', 'x倾斜');
        for (let i = 0; i < maxSensors.length; i++) {
          if (maxX < Math.abs(maxSensors[i].value) && maxSensors[i].value !== -100 && maxSensors[i].value !== this.common.BOUNDARY) {
            maxX = Math.abs(maxSensors[i].value);
          }
        }
        maxSensors = this.operator.getSensors(this.common.loadSensors(), 'name', 'y倾斜');
        for (let i = 0; i < maxSensors.length; i++) {
          if (maxY < Math.abs(maxSensors[i].value) && maxSensors[i].value !== -100 && maxSensors[i].value !== this.common.BOUNDARY) {
            maxY = Math.abs(maxSensors[i].value);
          }
        }
        let x = this.operator.getDisplayText(maxX);
        let y = this.operator.getDisplayText(maxY);
        sensor.value = {x, y};
      },

      computeStabilityCoefficient(that,sensors, ) {
        let gate = this.reservoir.getGate().getBuildingAnalysis();
        if (gate) {
          let stabilityCoefficient = this.operator.findArrayItemByAttrValue(sensors, 'tag', 'stability-coefficient');
          if (stabilityCoefficient) {
            stabilityCoefficient.value = Number(gate.computeOpenK());
          }
        }
      },

      computeShaftFactor(that,sensors) {
        let tunnel = that.reservoir.getTunnel().getControlAnalysis();
        if (tunnel) {
          let shaftFactor = that.operator.findArrayItemByAttrValue(sensors, 'tag', 'shaft-factor');
          if (shaftFactor) {
            shaftFactor.value = Number(tunnel.computeK());
          }
        }
      },

      computeStabilityArgument(that,sensors) {
        let dam = that.reservoir.getDam();
        if (dam) {
          let stabilityArgument = that.operator.findArrayItemByAttrValue(sensors, 'tag', 'stability-argument');
          if (stabilityArgument && dam.getStableAnalysis().stablePara) {
            stabilityArgument.value = Number(dam.getStableAnalysis().stablePara);
          }
        }
      },

      /**
       * 更新所有有效point的数值
       */
      updateSensors(that) {
        that.sensors = that.common.getData('realtime');
        that.computeStabilityCoefficient(that,that.sensors);
        that.computeShaftFactor(that, that.sensors);
        that.computeStabilityArgument(that, that.sensors);
        that.computeMax('dam-accumulate-down', 'damTransform', '沉降');
        that.computeMax('gate-accumulate-down', 'gateDisplacement', '沉降');
        that.computeMax('pipe-vibration-severity', 'pipe', '方向');
        that.computeMax('well-vibration-severity', 'well', '方向');
        that.computeMax('gate-vibration-severity', 'gateDisplacement', '方向');
        that.computeSlopeDown();

        that.computeMaxInclination('pier-inclination');

        let newestTime = that.sensors[0].time;
        for (let i in that.sensors) {
          let sensor = that.sensors[i];
          if (sensor.time > newestTime) {
            newestTime = sensor.time;
          }
          let tag = document.getElementById(sensor.tag);

          if (that.operator.isValid(sensor.value) && (typeof sensor.value === 'number') && tag && Math.abs(sensor.value) !== that.common.BOUNDARY) {
            that.operator.blinkTag(tag);
            that.validateScope(sensor);
          }
          if (that.operator.isValid(sensor.value) && (typeof sensor.value === 'object') && tag) {
            if (that.operator.isValid(sensor.value.x) && (Math.abs(sensor.value.x) !== that.common.BOUNDARY ||
              Math.abs(sensor.value.y) !== that.common.BOUNDARY)) {
              that.operator.blinkTag(tag);
              that.validateScope(sensor);
            }
          }
        }
        this.newestTime = new Date(newestTime).format("yyyy-MM-dd hh:mm:ss");
      },

      /**
       * 验证值是否在范围内，不在范围内就会闪烁
       * @param sensor 待验证传感器
       */
      validateScope(sensor) {
        let value = sensor.value;
        let low = sensor.min;
        let high = sensor.max;
        let tag = sensor.tag;

        if (low === '' && high === '') {
          return
        } else if (low && !low.x) {
          low = low !== "" ? parseFloat(low) : -this.common.BOUNDARY;
          high = high !== "" ? parseFloat(high) : this.common.BOUNDARY;
        }
        if (sensor.name === '水位') {
          if ((this.datetime.isFloodDate() && value > this.base.getBaseInfo().floodWaterLevel)
            || (!this.datetime.isFloodDate() && value > this.base.getBaseInfo().headWaterLevel)) {
            this.showWarning(sensor);
          }
          if (value > this.base.getBaseInfo().checkWaterLevel) {
            this.showDanger(sensor);
          }
        }
        this.showInfo(value, high, low, sensor);
      },

      showInfo(value, high, low, sensor) {
        if (typeof value === 'number') {
          if (value === this.common.BOUNDARY) {
            return;
          }
          if (value <= high && value >= low) {
            this.showNormal(sensor)
          } else {
            this.showWarning(sensor);
          }
        } else {
          if (Math.abs(value.x) === this.common.BOUNDARY || Math.abs(value.y) === this.common.BOUNDARY) {
            return;
          }
          if (value.x <= high && value.x >= low || value.y <= high && value.y >= low) {
            this.showNormal(sensor)
          } else if (img.src === "../../../assets/images/common/safe.png") {
            this.showWarning(sensor);
          }
        }
      },


      /**
       * 显示超限信息
       * @param sensor
       */
      showWarning(sensor) {
        sensor.state = '超限';
        sensor.icon = "warning";
        sensor.css = 'warning';
      },

      /**
       * 显示危险信息
       * @param sensor
       */
      showDanger(sensor) {
        sensor.state = '危险';
        sensor.icon = "danger";
        sensor.css = 'danger';
      },

      /**
       * 显示正常信息
       * @param sensor
       */
      showNormal(sensor) {
        sensor.state = '正常';
        sensor.icon = "safe";
        sensor.css = 'safe';
      }
    },
    created() {

    },
    updated() {

    },
    beforeMount() {
    },

    mounted() {
      /******************************************************************
       * 开始数据处理部分
       * *****************************************************************/
      let that = this;
      that.updateSensors(that);
      setInterval(function () {
        that.updateSensors(that);
      }, this.common.TIME_SPAN);
    }
  }


</script>

<style scoped>
  ::v-deep img {
    border-radius: 50%;
    width: 24px;
    height: 24px;
  }

  ::v-deep .border-box-content > div > .el-row {
    margin-top: 10px;
  }

  .app-container, .row, .info {
    color: #d9d9d9;
  }


  .hint-info img {
    vertical-align: bottom;
    width: 30px;
    height: 30px;
  }


  ::v-deep .info {
    font-family: 华文楷体, serif;
    font-size: 18pt;
    color: #e4f3cd;
    vertical-align: top;
  }

  ::v-deep .el-elem-field legend {
    font-size: 16pt;
  }

  ::v-deep .time-info, .hint-info {
    font-size: 1.2rem;
  }

  ::v-deep .time-info {
    padding-top: 10px;
  }

  ::v-deep .state-info {
    color: green;
  }

  .home {
    margin: 0;
    background-image: url("../../../assets/images/bg.png");
    background-size: 100%;
  }

  ::v-deep .section {
    background-color: #7bc2ee5c;
  }

  ::v-deep .section:nth-child(odd) > .row > .cell > div {
    background-color: rgba(184, 224, 207, 0.27);
  }

  ::v-deep .section:nth-child(even) > .row > .cell > div {
    background-color: rgba(187, 215, 217, 0.26);
  }

  ::v-deep .el-card__body {
    padding: 3px 10px;
  }

  ::v-deep .cell {
    border-radius: 4px;
  }

  ::v-deep fieldset {
    border-left: none;
    border-top: 1px solid #584ae7;
    border-right: none;
    border-bottom: none;
    margin-top: 30px;
  }

  @keyframes fade {
    from {
      opacity: 1.0;
    }
    50% {
      opacity: 0.4;
    }
    to {
      opacity: 1.0;
    }
  }

  @-webkit-keyframes fade {
    from {
      opacity: 1.0;
    }
    50% {
      opacity: 0.4;
    }
    to {
      opacity: 1.0;
    }
  }

  ::v-deep .normal {
    color: darkgreen;
  }

  ::v-deep .warning {
    color: #ff8e3e;
    animation: fade 1600ms infinite;
    -webkit-animation: fade 1600ms infinite;
  }

  ::v-deep .danger {
    color: #ff3048;
    animation: fade 600ms infinite;
    -webkit-animation: fade 600ms infinite;
  }

</style>
