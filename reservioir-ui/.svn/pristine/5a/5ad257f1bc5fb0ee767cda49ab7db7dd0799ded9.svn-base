<template>
  <div class='app-container' @click="jumpNow">
    <div id='first'>
      <canvas id="digitalRain" style="height: 100%;width:100%;">
      </canvas>

      <div id="mainMap"
           style="position: absolute; z-index: 10; left:10%; top:10%; height:60%;width: 60%;padding:10px;background:#0c0d0f00">
      </div>

      <div id="imgDiv"
           style="position: absolute; z-index: 10; left:60%; top:300px; width: 500px;padding:10px;background:#ffffff00">
<!--        <img :src="require(`@/assets/flash/water.png`)" alt="" style="width: 60%">-->
      </div>
    </div>

  </div>
</template>

<script>
  var shangdong = require('@/api/flash/shandong.js')
  export default {
    name: "first",
    methods: {
      jump() {
        const TIME_COUNT = 15;
        if (!this.timer) {
          this.count = TIME_COUNT;
          this.show = false;
          this.timer = setInterval(() => {
            if (this.count > 0 && this.count <= TIME_COUNT) {
              this.count--;
            } else {
              this.show = true;
              clearInterval(this.timer);
              this.timer = null;
              //跳转的页面写在此处
              this.$router.push({path: this.redirect || "/subsystem"})
            }
          }, 1000)
        }
      },

      jumpNow() {
        this.$router.push({path: this.redirect || "/subsystem"});
        clearInterval(this.timer);
        this.timer = null;
      },


      getEcharts() {
        // 基于准备好的dom，初始化echarts实例
        var chart = this.$echarts.init(document.getElementById('mainMap'));

        var series = [];//地图展现数据
        //24个省市经度纬度
        var geoCoordMap = {
          '上海': [121.4648, 31.2891],
          '东莞': [113.8953, 22.901],
          '东营': [118.7073, 37.5513],
          '中山': [113.4229, 22.478],
          '临汾': [111.4783, 36.1615],
          '临沂': [118.3118, 35.2936],
          '丹东': [124.541, 40.4242],
          '丽水': [119.5642, 28.1854],
          '乌鲁木齐': [87.9236, 43.5883],
          '佛山': [112.8955, 23.1097],
          '保定': [115.0488, 39.0948],
          '兰州': [103.5901, 36.3043],
          '包头': [110.3467, 41.4899],
          '北京': [116.4551, 40.2539],
          '北海': [109.314, 21.6211],
          '南京': [118.8062, 31.9208],
          '南宁': [108.479, 23.1152],
          '南昌': [116.0046, 28.6633],
          '南通': [121.1023, 32.1625],
          '厦门': [118.1689, 24.6478],
          '台州': [121.1353, 28.6688],
          '合肥': [117.29, 32.0581],
          '呼和浩特': [111.4124, 40.4901],
          '咸阳': [108.4131, 34.8706],
          '哈尔滨': [127.9688, 45.368],
          '唐山': [118.4766, 39.6826],
          '嘉兴': [120.9155, 30.6354],
          '大同': [113.7854, 39.8035],
          '大连': [122.2229, 39.4409],
          '天津': [117.4219, 39.4189],
          '太原': [112.3352, 37.9413],
          '威海': [121.9482, 37.1393],
          '宁波': [121.5967, 29.6466],
          '宝鸡': [107.1826, 34.3433],
          '宿迁': [118.5535, 33.7775],
          '常州': [119.4543, 31.5582],
          '广州': [113.5107, 23.2196],
          '廊坊': [116.521, 39.0509],
          '延安': [109.1052, 36.4252],
          '张家口': [115.1477, 40.8527],
          '徐州': [117.5208, 34.3268],
          '德州': [116.6858, 37.2107],
          '惠州': [114.6204, 23.1647],
          '成都': [103.9526, 30.7617],
          '扬州': [119.4653, 32.8162],
          '承德': [117.5757, 41.4075],
          '拉萨': [91.1865, 30.1465],
          '无锡': [120.3442, 31.5527],
          '日照': [119.2786, 35.5023],
          '昆明': [102.9199, 25.4663],
          '杭州': [119.5313, 29.8773],
          '枣庄': [117.323, 34.8926],
          '柳州': [109.3799, 24.9774],
          '株洲': [113.5327, 27.0319],
          '武汉': [114.3896, 30.6628],
          '汕头': [117.1692, 23.3405],
          '江门': [112.6318, 22.1484],
          '沈阳': [123.1238, 42.1216],
          '沧州': [116.8286, 38.2104],
          '河源': [114.917, 23.9722],
          '泉州': [118.3228, 25.1147],
          '泰安': [117.0264, 36.0516],
          '泰州': [120.0586, 32.5525],
          '济南': [117.1582, 36.8701],
          '济宁': [116.8286, 35.3375],
          '海口': [110.3893, 19.8516],
          '淄博': [118.0371, 36.6064],
          '淮安': [118.927, 33.4039],
          '深圳': [114.5435, 22.5439],
          '清远': [112.9175, 24.3292],
          '温州': [120.498, 27.8119],
          '渭南': [109.7864, 35.0299],
          '湖州': [119.8608, 30.7782],
          '湘潭': [112.5439, 27.7075],
          '滨州': [117.8174, 37.4963],
          '潍坊': [119.0918, 36.524],
          '烟台': [120.7397, 37.5128],
          '玉溪': [101.9312, 23.8898],
          '珠海': [113.7305, 22.1155],
          '盐城': [120.2234, 33.5577],
          '盘锦': [121.9482, 41.0449],
          '石家庄': [114.4995, 38.1006],
          '福州': [119.4543, 25.9222],
          '秦皇岛': [119.2126, 40.0232],
          '绍兴': [120.564, 29.7565],
          '聊城': [115.9167, 36.4032],
          '肇庆': [112.1265, 23.5822],
          '舟山': [122.2559, 30.2234],
          '苏州': [120.6519, 31.3989],
          '莱芜': [117.6526, 36.2714],
          '菏泽': [115.6201, 35.2057],
          '营口': [122.4316, 40.4297],
          '葫芦岛': [120.1575, 40.578],
          '衡水': [115.8838, 37.7161],
          '衢州': [118.6853, 28.8666],
          '西宁': [101.4038, 36.8207],
          '西安': [109.1162, 34.2004],
          '贵阳': [106.6992, 26.7682],
          '连云港': [119.1248, 34.552],
          '邢台': [114.8071, 37.2821],
          '邯郸': [114.4775, 36.535],
          '郑州': [113.4668, 34.6234],
          '鄂尔多斯': [108.9734, 39.2487],
          '重庆': [107.7539, 30.1904],
          '金华': [120.0037, 29.1028],
          '铜川': [109.0393, 35.1947],
          '银川': [106.3586, 38.1775],
          '镇江': [119.4763, 31.9702],
          '长春': [125.8154, 44.2584],
          '长沙': [113.0823, 28.2568],
          '长治': [112.8625, 36.4746],
          '阳泉': [113.4778, 38.0951],
          '青岛': [120.4651, 36.3373],
          '韶关': [113.7964, 24.7028]
        };
        var fromdata = '济南';//默认飞线原点
        //初始化飞线数据
        var XAData = [
          [{name: '青岛'}, {name: '济南', value: 95}],
          [{name: '济宁'}, {name: '济南', value: 90}],
          [{name: '泰安'}, {name: '济南', value: 80}],
          [{name: '聊城'}, {name: '济南', value: 70}],
          [{name: '日照'}, {name: '济南', value: 60}],
          [{name: '潍坊'}, {name: '济南', value: 50}],
          [{name: '烟台'}, {name: '济南', value: 40}],
          [{name: '东营'}, {name: '济南', value: 30}],
          [{name: '枣庄'}, {name: '济南', value: 20}],
          [{name: '淄博'}, {name: '济南', value: 10}]
        ];

        var convertData1 = function (data) {
          let res = [];
          for (let i = 0; i < data.length; i++) {
            let dataItem = data[i];
            let fromCoord = geoCoordMap[dataItem[0].name];
            let toCoord = geoCoordMap[dataItem[1].name];
            if (fromCoord && toCoord) {
              res.push({
                fromName: dataItem[0].name, toName: dataItem[1].name, coords: [fromCoord, toCoord]
              });
            }
          }
          return res;
        };

        var convertData2 = function (data) {
          let res = [];
          for (var i = 0; i < data.length; i++) {
            var geoCoord = geoCoordMap[data[i].name];
            if (geoCoord) {
              res.push({
                name: data[i].name,
                value: geoCoord.concat(data[i].value)
              });
            }
          }
          return res;
        };


        var resultdatas = [];
        for (var item of []) {
          var obj = {
            name: item.city,
            value: '<br/>'
          };
          for (var data of item.datas) {
            obj.value += data.tradname + " 价格" + data.price + " " + (!isNaN(data.rise) ? (Number(data.rise) == 0 ? '--' : (Number(data.rise) > 0 ? "<span style='color:red'>涨跌" + data.rise + "</span>" : "<span style='color:green'>涨跌" + data.rise + "</span>")) : '--') + '<br/>';
          }
          resultdatas.push(obj);
        }
        [[fromdata, XAData]].forEach(function (item, i) {
          series.push({
              name: '西安',
              type: 'scatter',
              zlevel: 20,
              color: '#f00',
              coordinateSystem: 'geo',
              symbolSize: 10,
              itemStyle: {
                normal: {color: '#f00'}
              },
              data: convertData2(resultdatas)
            },
            {
              type: 'lines',
              zlevel: 15,
              effect: {
                show: true, period: 4, trailLength: 0, symbol: 'arrow', symbolSize: 7,
              },
              lineStyle: {
                normal: {width: 1.2, opacity: 0.6, curveness: 0.2, color: '#F19000'}
              },
              data: convertData1(item[1])
            },
            //出发点
            {
              type: 'effectScatter',
              coordinateSystem: 'geo',
              zlevel: 15,
              rippleEffect: {
                period: 4, brushType: 'stroke', scale: 4
              },
              symbol: 'circle',
              symbolSize: function (val) {
                return 4 + val[2] / 10;
              },
              itemStyle: {
                normal: {show: false}
              },
              tooltip: {
                show: false,
              },
              data: [{
                name: fromdata, value: geoCoordMap[item[0]].concat([100]),
              }],
            },
            /*到达点*/
            {
              type: 'effectScatter',
              coordinateSystem: 'geo',
              rippleEffect: {
                period: 4, brushType: 'stroke', scale: 4
              },
              zlevel: 15,
              label: {
                normal: {
                  show: false
                }
              },
              tooltip: {
                show: false,
              },
              symbol: 'circle',
              symbolSize: 15,
              itemStyle: {
                normal: {
                  color: '#F19000'
                }
              },
              data: item[1].map(function (dataItem) {
                return {
                  name: dataItem[1].name,
                  value: geoCoordMap[dataItem[1].name].concat([dataItem[1].name]),
                  tooltip: {
                    formatter: dataItem[0].name + "--" + dataItem[1].name + "：" + dataItem[1].value
                  }
                };
              }),
            });
        });

        let option = {

          color: ['#fc5353', '#f4fc6c', '#e68b55', '#9a68ff', '#ff60c5'],

          tooltip: {
            trigger: 'item',
            formatter: function (params) {
              if (params.value) {
                return params.name + ' : ' + params.value[2];
              } else {
                return params.name;
              }
            }
          },
          legend: {
            orient: 'horizontal',
            left: '27%',
            top: '5%',
            data: ['高线'],
            textStyle: {
              color: '#ffffff'
            },
            icon: 'circle'
          },
          geo: {
            map: '山东',
            zlevel: 10,
            layoutCenter: ['48%', '43%'],
            roam: true,
            layoutSize: "100%",
            zoom: 1.08,
            label: {
              normal: {
                show: true,//地图上的省份名称是否显示
                textStyle: {
                  fontSize: 12,
                  color: '#43D0D6'
                }
              },
              emphasis: {
                show: true
              }
            },
            itemStyle: {
              normal: {
                color: '#062031',
                borderWidth: 1.1,
                borderColor: '#43D0D6'
              },
              emphasis: {
                areaColor: '#43D0D6'
              }
            }
          },
          series: series
        };
        chart.setOption(option);
        chart.on('click', function (params) {

        });
      }
    },
    mounted() {
      this.getEcharts();
      this.jump();

      let drCav = document.getElementById("digitalRain");

      /*将画布大小设置为窗口文档显示区大小*/
      let width = window.innerWidth;
      let height = window.innerHeight;
      drCav.width = width;
      drCav.height = height;

      let fontsize = 12;                          //数字字体大小
      let columns = Math.ceil(width / fontsize);  //列数（向上取整）
      let dropLine = [];
      for (let i = 0; i < columns; i++) {
        dropLine[i] = 0;
      }

      /*Run*/
      if (drCav.getContext) {
        let ctx = drCav.getContext("2d");
        let timer = setInterval(function () {
          ctx.fillStyle = "rgba(0,0,0,0.07)";   //设置透明度，逐渐覆盖之前的数字
          ctx.fillRect(0, 0, width, height);       //填充画布

          ctx.fillStyle = "#06643b";
          ctx.font = fontsize + "px Simsun";
          for (let i = 0; i < columns; i++) {
            let figure = Math.floor(Math.random() * 10);  //生成0~9的伪随机数

            /*绘制数字(核心部分)*/
            ctx.fillText(figure, i * fontsize, dropLine[i] * fontsize);
            if (dropLine[i] * fontsize > height || Math.random() > 0.98) {
              dropLine[i] = 0;
            }
            dropLine[i]++;
          }
          width++;
        }, 60);
      }

    }
  }
</script>

<style scoped>
  .app-container {
    margin: 2px 0px;

    padding: 0px;
    background: #000000
  }

  @-webkit-keyframes scaleDraw {
    0% {
      -webkit-transform: scale(1);
    }
    25% {
      -webkit-transform: scale(1.5);
    }
    50% {
      -webkit-transform: scale(1.8);
    }
    75% {
      -webkit-transform: scale(2.2);
    }
  }

  #mainMap, #imgDiv {
    -webkit-animation-name: scaleDraw;
    -webkit-animation-timing-function: ease-in-out;
    -webkit-animation-iteration-count: infinite;
    -webkit-animation-duration: 40s;
    -webkit-animation-direction: alternate;
  }

  body {
    padding: 0;
  }

  img {
    margin: 0;
  }

  #first {
    display: block;
  }

  iframe {
    display: none;
  }
</style>
