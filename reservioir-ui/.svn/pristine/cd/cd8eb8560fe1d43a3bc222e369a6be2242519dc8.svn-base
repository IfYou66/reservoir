<template>
  <div class='app-container'>
    <div id="container">

    </div>
  </div>
</template>

<script>
  import * as THREE from 'three';
  import {OrbitControls} from 'three/examples/jsm/controls/OrbitControls.js';
  import {Water} from 'three/examples/jsm/objects/Water.js';
  import {Sky} from 'three/examples/jsm/objects/Sky.js';
  import {TTFLoader} from 'three/examples/jsm/loaders/TTFLoader.js';
  import {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader.js';
  import {GPUComputationRenderer} from 'three/examples/jsm/misc/GPUComputationRenderer.js';

  export default {
    name: "first",
    methods: {},
    mounted() {
      /* TEXTURE WIDTH FOR SIMULATION */
      const WIDTH = 2;
      const BIRDS = 4;

      /* BAKE ANIMATION INTO TEXTURE and CREATE GEOMETRY FROM BASE MODEL */
      const BirdGeometry = new THREE.BufferGeometry();
      let textureAnimation, durationAnimation, birdMesh, materialShader, vertexPerBird;

      function nextPowerOf2(n) {
        return Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)));
      }

      Math.lerp = function (value1, value2, amount) {
        amount = Math.max(Math.min(amount, 1), 0);
        return value1 + (value2 - value1) * amount;
      };

      const gltfs = ['files/glbs/Parrot.glb', 'files/glbs/Flamingo.glb'];
      const selectModel = Math.floor(Math.random() * gltfs.length);
      new GLTFLoader().load(gltfs[selectModel], function (gltf) {
        const animations = gltf.animations;
        durationAnimation = Math.round(animations[0].duration * 60);
        const birdGeo = gltf.scene.children[0].geometry;
        const morphAttributes = birdGeo.morphAttributes.position;
        const tHeight = nextPowerOf2(durationAnimation);
        const tWidth = nextPowerOf2(birdGeo.getAttribute('position').count);
        vertexPerBird = birdGeo.getAttribute('position').count;
        const tData = new Float32Array(3 * tWidth * tHeight);

        for (let i = 0; i < tWidth; i++) {
          for (let j = 0; j < tHeight; j++) {
            const offset = j * tWidth * 3;
            const curMorph = Math.floor(j / durationAnimation * morphAttributes.length);
            const nextMorph = (Math.floor(j / durationAnimation * morphAttributes.length) + 1) % morphAttributes.length;
            const lerpAmount = j / durationAnimation * morphAttributes.length % 1;

            if (j < durationAnimation) {
              let d0, d1;
              d0 = morphAttributes[curMorph].array[i * 3];
              d1 = morphAttributes[nextMorph].array[i * 3];
              if (d0 !== undefined && d1 !== undefined) tData[offset + i * 3] = Math.lerp(d0, d1, lerpAmount);
              d0 = morphAttributes[curMorph].array[i * 3 + 1];
              d1 = morphAttributes[nextMorph].array[i * 3 + 1];
              if (d0 !== undefined && d1 !== undefined) tData[offset + i * 3 + 1] = Math.lerp(d0, d1, lerpAmount);
              d0 = morphAttributes[curMorph].array[i * 3 + 2];
              d1 = morphAttributes[nextMorph].array[i * 3 + 2];
              if (d0 !== undefined && d1 !== undefined) tData[offset + i * 3 + 2] = Math.lerp(d0, d1, lerpAmount);
            }
          }
        }

        textureAnimation = new THREE.DataTexture(tData, tWidth, tHeight, THREE.RGBFormat, THREE.FloatType);
        textureAnimation.needsUpdate = true;

        const vertices = [], color = [], reference = [], seeds = [], indices = [];
        const totalVertices = birdGeo.getAttribute('position').count * 3 * BIRDS;
        for (let i = 0; i < totalVertices; i++) {
          const bIndex = i % (birdGeo.getAttribute('position').count * 3);
          vertices.push(birdGeo.getAttribute('position').array[bIndex]);
          color.push(birdGeo.getAttribute('color').array[bIndex]);
        }

        let r = Math.random();
        for (let i = 0; i < birdGeo.getAttribute('position').count * BIRDS; i++) {
          const bIndex = i % (birdGeo.getAttribute('position').count);
          const bird = Math.floor(i / birdGeo.getAttribute('position').count);
          if (bIndex === 0) r = Math.random();
          const j = ~~bird;
          const x = (j % WIDTH) / WIDTH;
          const y = ~~(j / WIDTH) / WIDTH;
          reference.push(x, y, bIndex / tWidth, durationAnimation / tHeight);
          seeds.push(bird, r, Math.random(), Math.random());
        }

        for (let i = 0; i < birdGeo.index.array.length * BIRDS; i++) {
          const offset = Math.floor(i / birdGeo.index.array.length) * (birdGeo.getAttribute('position').count);
          indices.push(birdGeo.index.array[i % birdGeo.index.array.length] + offset);
        }

        BirdGeometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(vertices), 3));
        BirdGeometry.setAttribute('birdColor', new THREE.BufferAttribute(new Float32Array(color), 3));
        BirdGeometry.setAttribute('color', new THREE.BufferAttribute(new Float32Array(color), 3));
        BirdGeometry.setAttribute('reference', new THREE.BufferAttribute(new Float32Array(reference), 4));
        BirdGeometry.setAttribute('seeds', new THREE.BufferAttribute(new Float32Array(seeds), 4));

        BirdGeometry.setIndex(indices);

        init();
        animate();

      });


      let container, stats;
      let camera, scene, renderer;
      let mouseX = 0, mouseY = 0;

      let windowHalfX = window.innerWidth / 2;
      let windowHalfY = window.innerHeight / 2;

      const BOUNDS = 800, BOUNDS_HALF = BOUNDS / 2;

      let last = performance.now();

      let gpuCompute;
      let velocityVariable;
      let positionVariable;
      let positionUniforms;
      let velocityUniforms;

      let controls, water, sun;
      let meshes;
      let iniMeshes = function () {
        meshes = [
          {
            name: 'mesh0',
            pos: {x: -60, y: 0, z: 60},
            url: '#',
            img: require('@/assets/flash/basin.gif'),
            rot: {x: 0.1, y: 0.2, z: 0.5}
          },
          {
            name: 'mesh1',
            pos: {x: -35, y: 0, z: 35},
            url: '#',
            img: require('@/assets/flash/engineering.gif'),
            rot: {x: 0.2, y: 0.2, z: 0.4}
          },
          {
            name: 'mesh2',
            pos: {x: -10, y: 0, z: 10},
            url: '/reservoir',
            img: require('@/assets/flash/reservoir.gif'),
            rot: {x: 0.3, y: 0.2, z: 0.3}
          },
          {
            name: 'mesh3',
            pos: {x: 25, y: 0, z: 30},
            url: '#',
            img: require('@/assets/flash/process.gif'),
            rot: {x: 0.4, y: 0.2, z: 0.2}
          },
          {
            name: 'mesh4',
            pos: {x: 60, y: 0, z: 40},
            url: '#',
            img: require('@/assets/flash/supply.gif'),
            rot: {x: 0.5, y: 0.2, z: 0.1}
          },
        ];
      }();


      let group, textMesh1, textMesh2, textGeo, material;

      let text = '滕州市数字水库管理平台';
      const height = 20,
        size = 70,
        hover = 30,
        curveSegments = 4,
        bevelThickness = 2,
        bevelSize = 1.5;

      let font = null;
      const mirror = true;


      let inArea = false;
      let currentIndex = null;


      addTouch();

      function addTouch() {
        function onMouseMove(event) {
          let intersect = getIntersect();
          if (intersect) {
            document.body.style.cursor = "pointer";
            let mesh = meshes[intersect.object.index];
            currentIndex = intersect.object.index;
            mesh.rot.x = 0;
            mesh.rot.z = 0;
            mesh.rot.y = 0;
            mesh.pos.y = 5;
            inArea = true;
            render();
          } else {
            if (inArea) {
              inArea = false;
              meshes[currentIndex].rot.x = (currentIndex + 1) * 0.1;
              meshes[currentIndex].rot.y = 0.2;
              meshes[currentIndex].rot.z = (meshes.length - currentIndex - 1) * 0.1;
              meshes[currentIndex].pos.y = 0;
              render();
            }
            document.body.style.cursor = "default";
          }
        }

        function onMouseClick(event) {
          let intersect = getIntersect();
          if (intersect) {
            window.location.href = findMesh(intersect.object.position.x).url;
          }
        }

        function findMesh(x) {
          for (let mesh of meshes) {
            if (x === mesh.pos.x) {
              return mesh;
            }
          }
        }

        function getIntersect() {
          //声明射线和mouse变量
          let raycaster = new THREE.Raycaster();
          let mouse = new THREE.Vector2();

          //通过鼠标点击的位置计算出射线所需要的点的位置，以屏幕中心为原点，值的范围为-1到1.
          mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
          mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

          //根据在屏幕的二维位置以及相机的矩阵更新射线的位置
          raycaster.setFromCamera(mouse, camera);

          // 获取射线直线和所有模型相交的数组集合
          let intersects = raycaster.intersectObjects(scene.children, true); //增加第二个参数，可以遍历子子孙孙对象
          //判断当前数组是否为空,不为空则获取最近的的模型，将其颜色修改为红色
          if (intersects.length > 2) {
            for (let intersect of intersects) {
              if (intersect.object instanceof THREE.Mesh && (intersect.object.index >= 0)) {
                return intersect;
              }
            }
          }
        }

        document.addEventListener("click", onMouseClick, false);
        document.addEventListener("mousemove", onMouseMove, false);
      }

      function init() {
        container = document.getElementById('container');

        renderer = new THREE.WebGLRenderer();
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.toneMapping = THREE.ACESFilmicToneMapping;
        container.appendChild(renderer.domElement);
        //

        scene = new THREE.Scene();

        camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 20000);
        camera.position.set(30, 30, 100);
        //

        sun = new THREE.Vector3();

        // Water
        const waterGeometry = new THREE.PlaneGeometry(10000, 10000);
        water = new Water(
          waterGeometry,
          {
            textureWidth: 512,
            textureHeight: 512,
            waterNormals: new THREE.TextureLoader().load(require('@/assets/flash/waternormals.jpg'), function (texture) {
              texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
            }),
            sunDirection: new THREE.Vector3(),
            sunColor: 0xffffff,
            waterColor: 0x001e0f,
            distortionScale: 10,
            fog: scene.fog !== undefined
          }
        );
        water.rotation.x = -Math.PI / 2;
        scene.add(water);

        // Skybox
        const sky = new Sky();
        sky.scale.setScalar(10000);
        scene.add(sky);

        const skyUniforms = sky.material.uniforms;
        skyUniforms['turbidity'].value = 10;
        skyUniforms['rayleigh'].value = 9;
        skyUniforms['mieCoefficient'].value = 0.005;
        skyUniforms['mieDirectionalG'].value = 0.8;

        const parameters = {
          elevation: ((12 - Math.abs(new Date().getHours() + new Date().getMinutes() / 60 - 12)) * 40 / 12 - 20) * 2,
          azimuth: (12 - new Date().getHours() - new Date().getMinutes() / 60) * 10 - 170
        };

        const pmremGenerator = new THREE.PMREMGenerator(renderer);

        let updateSun = function () {
          const phi = THREE.MathUtils.degToRad(90 - parameters.elevation);
          const theta = THREE.MathUtils.degToRad(parameters.azimuth);

          sun.setFromSphericalCoords(1, phi, theta);
          sky.material.uniforms['sunPosition'].value.copy(sun);
          water.material.uniforms['sunDirection'].value.copy(sun).normalize();
          scene.environment = pmremGenerator.fromScene(sky).texture;
        }();

        const geometry = new THREE.BoxGeometry(20, 20, 20);

        for (let i = 0; i < meshes.length; i++) {
          const texture = new THREE.TextureLoader().load(meshes[i].img);
          const material = new THREE.MeshStandardMaterial({map: texture});

          let m = new THREE.Mesh(geometry, material);
          m.index = i;
          scene.add(m);
          meshes[i].obj = m;
        }

        const geo = new THREE.BoxGeometry(30, 30, 30);
        //const tex = new THREE.TextureLoader().load(require('@/assets/flash/icon.png'));
        //const mat = new THREE.MeshStandardMaterial({map: tex});
        //let iconMesh = new THREE.Mesh(geo, mat);
        // iconMesh.position.x = -630;
        // iconMesh.position.y = 88;
        // iconMesh.position.z = -500;
        // iconMesh.rotation.y = 7.24;
        // iconMesh.rotation.x = 9.5;
        // iconMesh.rotation.z = 9.4;
        //scene.add(iconMesh);   版权问题，暂时不开启

        controls = new OrbitControls(camera, renderer.domElement);
        controls.maxPolarAngle = Math.PI * 0.495;
        controls.target.set(0, 10, 0);
        controls.minDistance = 50.0;
        controls.maxDistance = 4800.0;
        controls.update();

        //
        const dirLight = new THREE.DirectionalLight(0xffffff, 0.125);
        dirLight.position.set(0, 0, 1).normalize();
        scene.add(dirLight);

        const pointLight = new THREE.PointLight(0xffffff, 1.5);
        pointLight.position.set(0, 200, 90);
        pointLight.color.setHSL(0.1, 1, 0.3);
        scene.add(pointLight);

        material = new THREE.MeshPhongMaterial({color: 0xffffff, flatShading: true});
        //
        group = new THREE.Group();
        group.position.y = 100;

        scene.add(group);

        const loader = new TTFLoader();

        loader.load(require('@/assets/flash/name.ttf'), function (json) {
          font = new THREE.Font(json);
          createText();
        });


        camera.updateMatrixWorld();

        initComputeRenderer();
        initBirds();
        container.style.touchAction = 'none';
        container.addEventListener('pointermove', onPointerMove);

        window.addEventListener('resize', onWindowResize);
      }

      function initComputeRenderer() {
        gpuCompute = new GPUComputationRenderer(WIDTH, WIDTH, renderer);

        const dtPosition = gpuCompute.createTexture();
        const dtVelocity = gpuCompute.createTexture();
        fillPositionTexture(dtPosition);
        fillVelocityTexture(dtVelocity);

        velocityVariable = gpuCompute.addVariable("textureVelocity",
          'uniform float time;\n' +
          '\t\t\tuniform float testing;\n' +
          '\t\t\tuniform float delta; // about 0.016\n' +
          '\t\t\tuniform float separationDistance; // 20\n' +
          '\t\t\tuniform float alignmentDistance; // 40\n' +
          '\t\t\tuniform float cohesionDistance; //\n' +
          '\t\t\tuniform float freedomFactor;\n' +
          '\t\t\tuniform vec3 predator;\n' +
          '\n' +
          '\t\t\tconst float width = resolution.x;\n' +
          '\t\t\tconst float height = resolution.y;\n' +
          '\n' +
          '\t\t\tconst float PI = 3.141592653589793;\n' +
          '\t\t\tconst float PI_2 = PI * 2.0;\n' +
          '\t\t\t// const float VISION = PI * 0.55;\n' +
          '\n' +
          '\t\t\tfloat zoneRadius = 40.0;\n' +
          '\t\t\tfloat zoneRadiusSquared = 1600.0;\n' +
          '\n' +
          '\t\t\tfloat separationThresh = 0.45;\n' +
          '\t\t\tfloat alignmentThresh = 0.65;\n' +
          '\n' +
          '\t\t\tconst float UPPER_BOUNDS = BOUNDS;\n' +
          '\t\t\tconst float LOWER_BOUNDS = -UPPER_BOUNDS;\n' +
          '\n' +
          '\t\t\tconst float SPEED_LIMIT = 9.0;\n' +
          '\n' +
          '\t\t\tfloat rand( vec2 co ){\n' +
          '\t\t\t\treturn fract( sin( dot( co.xy, vec2(12.9898,78.233) ) ) * 43758.5453 );\n' +
          '\t\t\t}\n' +
          '\n' +
          '\t\t\tvoid main() {\n' +
          '\n' +
          '\t\t\t\tzoneRadius = separationDistance + alignmentDistance + cohesionDistance;\n' +
          '\t\t\t\tseparationThresh = separationDistance / zoneRadius;\n' +
          '\t\t\t\talignmentThresh = ( separationDistance + alignmentDistance ) / zoneRadius;\n' +
          '\t\t\t\tzoneRadiusSquared = zoneRadius * zoneRadius;\n' +
          '\n' +
          '\n' +
          '\t\t\t\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n' +
          '\t\t\t\tvec3 birdPosition, birdVelocity;\n' +
          '\n' +
          '\t\t\t\tvec3 selfPosition = texture2D( texturePosition, uv ).xyz;\n' +
          '\t\t\t\tvec3 selfVelocity = texture2D( textureVelocity, uv ).xyz;\n' +
          '\n' +
          '\t\t\t\tfloat dist;\n' +
          '\t\t\t\tvec3 dir; // direction\n' +
          '\t\t\t\tfloat distSquared;\n' +
          '\n' +
          '\t\t\t\tfloat separationSquared = separationDistance * separationDistance;\n' +
          '\t\t\t\tfloat cohesionSquared = cohesionDistance * cohesionDistance;\n' +
          '\n' +
          '\t\t\t\tfloat f;\n' +
          '\t\t\t\tfloat percent;\n' +
          '\n' +
          '\t\t\t\tvec3 velocity = selfVelocity;\n' +
          '\n' +
          '\t\t\t\tfloat limit = SPEED_LIMIT;\n' +
          '\n' +
          '\t\t\t\tdir = predator * UPPER_BOUNDS - selfPosition;\n' +
          '\t\t\t\tdir.z = 0.;\n' +
          '\t\t\t\t// dir.z *= 0.6;\n' +
          '\t\t\t\tdist = length( dir );\n' +
          '\t\t\t\tdistSquared = dist * dist;\n' +
          '\n' +
          '\t\t\t\tfloat preyRadius = 150.0;\n' +
          '\t\t\t\tfloat preyRadiusSq = preyRadius * preyRadius;\n' +
          '\n' +
          '\n' +
          '\t\t\t\t// move birds away from predator\n' +
          '\t\t\t\tif ( dist < preyRadius ) {\n' +
          '\n' +
          '\t\t\t\t\tf = ( distSquared / preyRadiusSq - 1.0 ) * delta * 100.;\n' +
          '\t\t\t\t\tvelocity += normalize( dir ) * f;\n' +
          '\t\t\t\t\tlimit += 5.0;\n' +
          '\t\t\t\t}\n' +
          '\n' +
          '\n' +
          '\t\t\t\t// if (testing == 0.0) {}\n' +
          '\t\t\t\t// if ( rand( uv + time ) < freedomFactor ) {}\n' +
          '\n' +
          '\n' +
          '\t\t\t\t// Attract flocks to the center\n' +
          '\t\t\t\tvec3 central = vec3( 0., 0., 0. );\n' +
          '\t\t\t\tdir = selfPosition - central;\n' +
          '\t\t\t\tdist = length( dir );\n' +
          '\n' +
          '\t\t\t\tdir.y *= 2.5;\n' +
          '\t\t\t\tvelocity -= normalize( dir ) * delta * 5.;\n' +
          '\n' +
          '\t\t\t\tfor ( float y = 0.0; y < height; y++ ) {\n' +
          '\t\t\t\t\tfor ( float x = 0.0; x < width; x++ ) {\n' +
          '\n' +
          '\t\t\t\t\t\tvec2 ref = vec2( x + 0.5, y + 0.5 ) / resolution.xy;\n' +
          '\t\t\t\t\t\tbirdPosition = texture2D( texturePosition, ref ).xyz;\n' +
          '\n' +
          '\t\t\t\t\t\tdir = birdPosition - selfPosition;\n' +
          '\t\t\t\t\t\tdist = length( dir );\n' +
          '\n' +
          '\t\t\t\t\t\tif ( dist < 0.0001 ) continue;\n' +
          '\n' +
          '\t\t\t\t\t\tdistSquared = dist * dist;\n' +
          '\n' +
          '\t\t\t\t\t\tif ( distSquared > zoneRadiusSquared ) continue;\n' +
          '\n' +
          '\t\t\t\t\t\tpercent = distSquared / zoneRadiusSquared;\n' +
          '\n' +
          '\t\t\t\t\t\tif ( percent < separationThresh ) { // low\n' +
          '\n' +
          '\t\t\t\t\t\t\t// Separation - Move apart for comfort\n' +
          '\t\t\t\t\t\t\tf = ( separationThresh / percent - 1.0 ) * delta;\n' +
          '\t\t\t\t\t\t\tvelocity -= normalize( dir ) * f;\n' +
          '\n' +
          '\t\t\t\t\t\t} else if ( percent < alignmentThresh ) { // high\n' +
          '\n' +
          '\t\t\t\t\t\t\t// Alignment - fly the same direction\n' +
          '\t\t\t\t\t\t\tfloat threshDelta = alignmentThresh - separationThresh;\n' +
          '\t\t\t\t\t\t\tfloat adjustedPercent = ( percent - separationThresh ) / threshDelta;\n' +
          '\n' +
          '\t\t\t\t\t\t\tbirdVelocity = texture2D( textureVelocity, ref ).xyz;\n' +
          '\n' +
          '\t\t\t\t\t\t\tf = ( 0.5 - cos( adjustedPercent * PI_2 ) * 0.5 + 0.5 ) * delta;\n' +
          '\t\t\t\t\t\t\tvelocity += normalize( birdVelocity ) * f;\n' +
          '\n' +
          '\t\t\t\t\t\t} else {\n' +
          '\n' +
          '\t\t\t\t\t\t\t// Attraction / Cohesion - move closer\n' +
          '\t\t\t\t\t\t\tfloat threshDelta = 1.0 - alignmentThresh;\n' +
          '\t\t\t\t\t\t\tfloat adjustedPercent;\n' +
          '\t\t\t\t\t\t\tif( threshDelta == 0. ) adjustedPercent = 1.;\n' +
          '\t\t\t\t\t\t\telse adjustedPercent = ( percent - alignmentThresh ) / threshDelta;\n' +
          '\n' +
          '\t\t\t\t\t\t\tf = ( 0.5 - ( cos( adjustedPercent * PI_2 ) * -0.5 + 0.5 ) ) * delta;\n' +
          '\n' +
          '\t\t\t\t\t\t\tvelocity += normalize( dir ) * f;\n' +
          '\t\t\t\t\t\t}\n' +
          '\t\t\t\t\t}\n' +
          '\t\t\t\t}\n' +
          '\n' +
          '\t\t\t\t// this make tends to fly around than down or up\n' +
          '\t\t\t\t// if (velocity.y > 0.) velocity.y *= (1. - 0.2 * delta);\n' +
          '\n' +
          '\t\t\t\t// Speed Limits\n' +
          '\t\t\t\tif ( length( velocity ) > limit ) {\n' +
          '\t\t\t\t\tvelocity = normalize( velocity ) * limit;\n' +
          '\t\t\t\t}\n' +
          '\n' +
          '\t\t\t\tgl_FragColor = vec4( velocity, 1.0 );\n' +
          '\n' +
          '\t\t\t}\n', dtVelocity);
        positionVariable = gpuCompute.addVariable("texturePosition",
          'uniform float time;\n' +
          '\t\t\tuniform float delta;\n' +
          '\n' +
          '\t\t\tvoid main()\t{\n' +
          '\n' +
          '\t\t\t\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n' +
          '\t\t\t\tvec4 tmpPos = texture2D( texturePosition, uv );\n' +
          '\t\t\t\tvec3 position = tmpPos.xyz;\n' +
          '\t\t\t\tvec3 velocity = texture2D( textureVelocity, uv ).xyz;\n' +
          '\n' +
          '\t\t\t\tfloat phase = tmpPos.w;\n' +
          '\n' +
          '\t\t\t\tphase = mod( ( phase + delta +\n' +
          '\t\t\t\t\tlength( velocity.xz ) * delta * 3. +\n' +
          '\t\t\t\t\tmax( velocity.y, 0.0 ) * delta * 6. ), 62.83 );\n' +
          '\n' +
          '\t\t\t\tgl_FragColor = vec4( position + velocity * delta * 15. , phase );\n' +
          '\n' +
          '\t\t\t}'

          , dtPosition);

        gpuCompute.setVariableDependencies(velocityVariable, [positionVariable, velocityVariable]);
        gpuCompute.setVariableDependencies(positionVariable, [positionVariable, velocityVariable]);

        positionUniforms = positionVariable.material.uniforms;
        velocityUniforms = velocityVariable.material.uniforms;

        positionUniforms["time"] = {value: 0.0};
        positionUniforms["delta"] = {value: 0.0};
        velocityUniforms["time"] = {value: 1.0};
        velocityUniforms["delta"] = {value: 0.0};
        velocityUniforms["testing"] = {value: 1.0};
        velocityUniforms["separationDistance"] = {value: 1.0};
        velocityUniforms["alignmentDistance"] = {value: 1.0};
        velocityUniforms["cohesionDistance"] = {value: 1.0};
        velocityUniforms["freedomFactor"] = {value: 1.0};
        velocityUniforms["predator"] = {value: new THREE.Vector3()};
        velocityVariable.material.defines.BOUNDS = BOUNDS.toFixed(2);

        velocityVariable.wrapS = THREE.RepeatWrapping;
        velocityVariable.wrapT = THREE.RepeatWrapping;
        positionVariable.wrapS = THREE.RepeatWrapping;
        positionVariable.wrapT = THREE.RepeatWrapping;

        const error = gpuCompute.init();

        if (error !== null) {

          console.error(error);

        }

      }

      function initBirds() {
        const geometry = BirdGeometry;
        const m = new THREE.MeshStandardMaterial({
          vertexColors: true,
          flatShading: true,
          roughness: 1,
          metalness: 0
        });

        m.onBeforeCompile = (shader) => {
          shader.uniforms.texturePosition = {value: null};
          shader.uniforms.textureVelocity = {value: null};
          shader.uniforms.textureAnimation = {value: textureAnimation};
          shader.uniforms.time = {value: 1.0};
          shader.uniforms.size = {value: 0.3};
          shader.uniforms.delta = {value: 0.0};

          let token = '#define STANDARD';

          let insert = /* glsl */`
						attribute vec4 reference;
						attribute vec4 seeds;
						attribute vec3 birdColor;
						uniform sampler2D texturePosition;
						uniform sampler2D textureVelocity;
						uniform sampler2D textureAnimation;
						uniform float size;
						uniform float time;
					`;

          shader.vertexShader = shader.vertexShader.replace(token, token + insert);

          token = '#include <begin_vertex>';

          insert = /* glsl */`
						vec4 tmpPos = texture2D( texturePosition, reference.xy );

						vec3 pos = tmpPos.xyz;
						vec3 velocity = normalize(texture2D( textureVelocity, reference.xy ).xyz);
						vec3 aniPos = texture2D( textureAnimation, vec2( reference.z, mod( time + ( seeds.x ) * ( ( 0.0004 + seeds.y / 10000.0) + normalize( velocity ) / 20000.0 ), reference.w ) ) ).xyz;
						vec3 newPosition = position;

						newPosition = mat3( modelMatrix ) * ( newPosition + aniPos );
						newPosition *= size + seeds.y * size * 0.2;

						velocity.z *= -1.;
						float xz = length( velocity.xz );
						float xyz = 1.;
						float x = sqrt( 1. - velocity.y * velocity.y );

						float cosry = velocity.x / xz;
						float sinry = velocity.z / xz;

						float cosrz = x / xyz;
						float sinrz = velocity.y / xyz;

						mat3 maty =  mat3( cosry, 0, -sinry, 0    , 1, 0     , sinry, 0, cosry );
						mat3 matz =  mat3( cosrz , sinrz, 0, -sinrz, cosrz, 0, 0     , 0    , 1 );

						newPosition =  maty * matz * newPosition;
						newPosition += pos;

						vec3 transformed = vec3( newPosition );
					`;

          shader.vertexShader = shader.vertexShader.replace(token, insert);
          materialShader = shader;
        };

        birdMesh = new THREE.Mesh(geometry, m);
        birdMesh.rotation.y = Math.PI / 2;
        birdMesh.position.x = 1300;
        birdMesh.position.z = -2400;
        birdMesh.position.y = 300;

        birdMesh.castShadow = true;
        birdMesh.receiveShadow = true;
        scene.add(birdMesh);
      }

      function fillPositionTexture(texture) {
        const theArray = texture.image.data;
        for (let k = 0, kl = theArray.length; k < kl; k += 4) {
          const x = Math.random() * BOUNDS - BOUNDS_HALF;
          const y = Math.random() * BOUNDS - BOUNDS_HALF;
          const z = Math.random() * BOUNDS - BOUNDS_HALF;

          theArray[k + 0] = x;
          theArray[k + 1] = y;
          theArray[k + 2] = z;
          theArray[k + 3] = 1;
        }
      }

      function fillVelocityTexture(texture) {
        const theArray = texture.image.data;
        for (let k = 0, kl = theArray.length; k < kl; k += 4) {
          const x = Math.random() - 0.5;
          const y = Math.random() - 0.5;
          const z = Math.random() - 0.5;
          theArray[k + 0] = x * 10;
          theArray[k + 1] = y * 10;
          theArray[k + 2] = z * 10;
          theArray[k + 3] = 1;
        }
      }


      function onPointerMove(event) {
        if (event.isPrimary === false) return;
        mouseX = event.clientX - windowHalfX;
        mouseY = event.clientY - windowHalfY;
      }

      function createText() {
        textGeo = new THREE.TextGeometry(text, {
          font: font,
          size: size,
          height: height,
          curveSegments: curveSegments,
          bevelThickness: bevelThickness,
          bevelSize: bevelSize,
          bevelEnabled: true
        });

        textGeo.computeBoundingBox();
        textGeo.computeVertexNormals();

        const centerOffset = -0.5 * (textGeo.boundingBox.max.x - textGeo.boundingBox.min.x);

        if (mirror) {
          textMesh2 = new THREE.Mesh(textGeo, material);
          textMesh2.position.x = centerOffset;
          textMesh2.position.y = -hover;
          textMesh2.position.z = height;
          textMesh2.rotation.x = Math.PI;
          textMesh2.rotation.y = Math.PI * 2;
          group.add(textMesh2);
        }
      }

      function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
      }

      function animate() {
        requestAnimationFrame(animate);
        group.position.x = -227;
        group.position.y = 18;
        group.position.z = -600;
        group.rotation.y = 6.0;
        group.rotation.x = 600.02;
        group.rotation.z = 219.9;
        render();
      }


      let radius = 2700;
      let theta = 8;


      function render() {
        const now = performance.now();
        const time = now * 0.0005;
        for (let mesh of meshes) {
          move(time, mesh);
        }
        water.material.uniforms['time'].value += 1.0 / 60.0;

        if (theta < 33.7) {
          theta += 0.1;
          radius -= 10;

          camera.position.x = radius * Math.sin(THREE.MathUtils.degToRad(theta)) - 45;
          camera.position.y = radius / 3 * Math.sin(THREE.MathUtils.degToRad(theta));
          camera.position.z = radius * Math.cos(THREE.MathUtils.degToRad(theta));
        }


        //camera.lookAt(scene.position);

        let delta = (now - last) / 1000;
        if (delta > 1) delta = 1; // safety cap on large deltas
        last = now;
        positionUniforms["time"].value = now;
        positionUniforms["delta"].value = delta;
        velocityUniforms["time"].value = now;
        velocityUniforms["delta"].value = delta;
        if (materialShader) materialShader.uniforms["time"].value = now / 1000;
        if (materialShader) materialShader.uniforms["delta"].value = delta;

        velocityUniforms["predator"].value.set(0.5 * mouseX / windowHalfX, -0.5 * mouseY / windowHalfY, 0);

        mouseX = 10000;
        mouseY = 10000;

        gpuCompute.compute();
        if (materialShader) materialShader.uniforms["texturePosition"].value = gpuCompute.getCurrentRenderTarget(positionVariable).texture;
        if (materialShader) materialShader.uniforms["textureVelocity"].value = gpuCompute.getCurrentRenderTarget(velocityVariable).texture;


        renderer.render(scene, camera);
      }

      function move(time, mesh) {
        mesh.obj.position.y = Math.sin(time + mesh.pos.x) * 5 + mesh.pos.y;
        mesh.obj.position.x = mesh.pos.x;
        mesh.obj.position.z = mesh.pos.z;
        mesh.obj.rotation.x = mesh.rot.x * time;
        mesh.obj.rotation.z = mesh.rot.z * time;
      }
    }
  }
</script>

<style scoped>
  .app-container{
    margin: 0;
    padding: 0 !important;
  }

</style>
